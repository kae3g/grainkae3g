# NixOS configuration for Robotic Farm VirtualBox VM
# 
# This configuration is designed to be used in /etc/nixos/configuration.nix
# on the VM, or can be imported into a flake.nix as a module.
#
# Usage:
#   1. Copy to VM: scp -P 2222 nixos/vm-configuration.nix nixos@localhost:/tmp/
#   2. On VM: sudo mv /tmp/vm-configuration.nix /etc/nixos/configuration.nix
#   3. On VM: sudo nixos-rebuild switch
#
# Timestamp: 12025-10-05--06thhouse01984

{ config, pkgs, ... }:

{
  # Import hardware configuration (generated by nixos-generate-config)
  imports = [ ./hardware-configuration.nix ];

  # ============================================================================
  # BOOT CONFIGURATION
  # ============================================================================
  
  boot.loader.grub = {
    enable = true;
    device = "/dev/sda";  # For BIOS boot
    # For UEFI boot, use instead:
    # efiSupport = true;
    # efiInstallAsRemovable = true;
    # device = "nodev";
  };

  # ============================================================================
  # NETWORKING
  # ============================================================================
  
  networking = {
    hostName = "robotic-farm-nixos";
    networkmanager.enable = true;
    
    # Open ports for development
    firewall = {
      enable = true;
      allowedTCPPorts = [ 
        22    # SSH
        80    # HTTP
        443   # HTTPS
        3000  # Development servers
        8080  # Common dev port
      ];
    };
  };

  # ============================================================================
  # NIX CONFIGURATION
  # ============================================================================
  
  nix = {
    settings = {
      # Enable flakes and new nix command
      experimental-features = [ "nix-command" "flakes" ];
      
      # Optimize store automatically
      auto-optimise-store = true;
      
      # Build settings
      max-jobs = 2;
      cores = 0;  # Use all available cores for each job
      
      # Trusted users (can use nix-copy-closure, etc.)
      trusted-users = [ "root" "nixos" ];
    };
    
    # Automatic garbage collection
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 30d";
    };
  };

  # ============================================================================
  # LOCALIZATION
  # ============================================================================
  
  time.timeZone = "America/Los_Angeles";
  
  i18n.defaultLocale = "en_US.UTF-8";
  
  i18n.extraLocaleSettings = {
    LC_ADDRESS = "en_US.UTF-8";
    LC_IDENTIFICATION = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_NAME = "en_US.UTF-8";
    LC_NUMERIC = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_TELEPHONE = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
  };

  # ============================================================================
  # SYSTEM PACKAGES
  # ============================================================================
  
  environment.systemPackages = with pkgs; [
    # Editors
    vim
    neovim
    nano
    
    # Version control
    git
    git-lfs
    
    # Shell utilities
    curl
    wget
    htop
    btop
    tmux
    screen
    ripgrep
    fd
    jq
    yq-go
    tree
    ncdu
    
    # Development tools
    gnumake
    gcc
    
    # Clojure ecosystem (matches project requirements)
    babashka
    clojure
    clj-kondo
    clojure-lsp
    
    # Node.js (version 22, matching project)
    nodejs_22
    
    # Container tools
    docker-compose
    
    # Compression
    unzip
    zip
    gzip
    bzip2
    
    # Network tools
    dig
    nmap
    netcat
    
    # File transfer
    rsync
    scp
  ];

  # ============================================================================
  # SHELL CONFIGURATION
  # ============================================================================
  
  programs.bash = {
    enableCompletion = true;
    
    shellAliases = {
      # Navigation
      ll = "ls -alF";
      la = "ls -A";
      l = "ls -CF";
      ".." = "cd ..";
      "..." = "cd ../..";
      "...." = "cd ../../..";
      
      # Project shortcuts
      rf = "cd ~/robotic-farm";
      
      # Git shortcuts
      g = "git";
      gs = "git status";
      gl = "git log --oneline --graph --decorate";
      gd = "git diff";
      
      # Nix shortcuts
      nix-build-vm = "sudo nixos-rebuild switch";
      nix-test-vm = "sudo nixos-rebuild test";
      nix-clean = "nix-collect-garbage -d";
      
      # Docker shortcuts
      d = "docker";
      dc = "docker-compose";
      dps = "docker ps";
      dlog = "docker logs";
    };
  };
  
  # Git configuration
  programs.git = {
    enable = true;
    config = {
      init.defaultBranch = "main";
      pull.rebase = false;
    };
  };

  # ============================================================================
  # SERVICES
  # ============================================================================
  
  # SSH
  services.openssh = {
    enable = true;
    settings = {
      PermitRootLogin = "no";
      PasswordAuthentication = false;  # Key-based auth only (secure)
      X11Forwarding = false;
    };
  };

  # ============================================================================
  # VIRTUALIZATION
  # ============================================================================
  
  # Docker
  virtualisation.docker = {
    enable = true;
    autoPrune = {
      enable = true;
      dates = "weekly";
    };
  };
  
  # VirtualBox Guest Additions
  virtualisation.virtualbox.guest = {
    enable = true;
    x11 = false;  # No graphical environment needed
  };

  # ============================================================================
  # USERS
  # ============================================================================
  
  users.users.nixos = {
    isNormalUser = true;
    description = "Robotic Farm Developer";
    extraGroups = [ 
      "wheel"      # Sudo access
      "docker"     # Docker without sudo
      "vboxsf"     # VirtualBox shared folders
      "networkmanager"
    ];
    shell = pkgs.bash;
    
    # SSH keys (add your public keys here)
    openssh.authorizedKeys.keys = [
      # Example:
      # "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFooBar... you@macbook"
      # 
      # Add your actual public key(s) here after setup
    ];
  };
  
  # Allow wheel group to use sudo without password (development convenience)
  security.sudo.wheelNeedsPassword = false;

  # ============================================================================
  # AUTOMATIC UPGRADES (Optional - disabled by default)
  # ============================================================================
  
  system.autoUpgrade = {
    enable = false;  # Set to true if you want automatic updates
    allowReboot = false;
    channel = "https://nixos.org/channels/nixos-24.05";
  };

  # ============================================================================
  # SYSTEM STATE VERSION
  # ============================================================================
  
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It's perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.05"; # Did you read the comment?
}

