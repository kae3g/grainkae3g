{
  "slug" : "9592-permissions-who-can-do-what",
  "meta" : {
    "slug" : "9592-permissions-who-can-do-what",
    "title" : "kae3g 9591: Permissions - Who Can Do What",
    "filename" : "9592-permissions-who-can-do-what.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9591: Permissions - Who Can Do What</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 4</strong> | <strong>Reading Time: 15 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>Unix permission model (read, write, execute)</li><li>User, group, and other (the three permission classes)</li><li>Octal notation (755, 644, etc.)</li><li>Special permissions (setuid, setgid, sticky bit)</li><li>How to read and modify permissions (chmod, chown, chgrp)</li><li>Why security starts with proper permissions</li><li>Capabilities as evolution beyond traditional permissions<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9590-filesystem-hierarchical-organization'>9590: The Filesystem</a></strong> - File organization</li><li><strong><a href='/12025-10/9570-processes-programs-in-motion'>9570: Processes</a></strong> - Who runs what</li><li><strong><a href='/12025-10/9507-helen-atthowe-ecological-systems'>9507: Helen Atthowe</a></strong> - Access control as garden boundaries<h2></h2></li></ul><h2>The Security Garden</h2><p><strong>Plant lens</strong>: Permissions are like <strong>garden boundaries</strong>:</p><ul><li><strong>Your garden</strong> (owner permissions)</li><li><strong>Community garden</strong> (group permissions)</li><li><strong>Public park</strong> (other permissions)</li></ul><p><strong>Who can</strong>:</p><ul><li><strong>Enter</strong> (read - see what's there)</li><li><strong>Plant/harvest</strong> (write - modify contents)</li><li><strong>Use the tools</strong> (execute - run programs)</li></ul><p><strong>This essay</strong>: How Unix implements these boundaries.<h2></h2></p><h2>The Permission Model</h2><p><strong>Every file/directory</strong> has permissions for three classes:</p><pre><code class=\"bash\">ls -l essay.md\n# -rw-r--r-- 1 alice staff 1024 Oct 10 12:00 essay.md\n#  │││ │││ │││\n#  owner │ other\n#      group\n</code></pre><p><strong>Breaking it down</strong>:</p><pre><code>-rw-r--r--\n│││ ││││││\n││└ owner permissions &#40;rw-&#41;\n│└  group permissions &#40;r--&#41;\n└   other permissions &#40;r--&#41;\n</code></pre><p><strong>Each class</strong> gets 3 bits:</p><ul><li><strong>r</strong> (read): Can see contents</li><li><strong>w</strong> (write): Can modify</li><li><strong>x</strong> (execute): Can run (for files) or enter (for directories)<h2></h2></li></ul><h2>Permission Breakdown</h2><h3>Owner (User)</h3><p><strong>The file's owner</strong> (usually the person who created it):</p><pre><code class=\"bash\"># Create file\necho &quot;My essay&quot; &gt; essay.md\n\n# Check ownership\nls -l essay.md\n# -rw-r--r-- 1 alice staff 1024 Oct 10 12:00 essay.md\n#              └───┘\n#              owner\n</code></pre><p><strong>Owner can</strong>:</p><ul><li>Read file (<code>r</code>)</li><li>Write file (<code>w</code>)</li><li>NOT execute (<code>-</code>)</li></ul><h3>Group</h3><p><strong>Users can belong to groups</strong> (e.g., <code>staff</code>, <code>developers</code>, <code>admin</code>):</p><pre><code class=\"bash\"># Check your groups\ngroups\n# Output: alice staff developers\n\n# Files owned by group 'staff'\nls -l /shared/\n# -rw-rw-r-- 1 bob staff 2048 Oct 10 docs.md\n#            └─────┘\n#            group\n</code></pre><p><strong>Group members can</strong>:</p><ul><li>Read file (<code>r</code>)</li><li>Write file (<code>w</code>)</li><li>NOT execute (<code>-</code>)</li></ul><p><strong>Use case</strong>: Shared projects (team members can all edit).</p><h3>Other (World)</h3><p><strong>Everyone else</strong> (not owner, not in group):</p><pre><code class=\"bash\"># Public file\nls -l /var/www/index.html\n# -rw-r--r-- 1 www-data www-data 4096 Oct 10 index.html\n#                  │││\n#                 other\n</code></pre><p><strong>Other can</strong>:</p><ul><li>Read file (<code>r</code>)</li><li>NOT write (<code>-</code>)</li><li>NOT execute (<code>-</code>)</li></ul><p><strong>Use case</strong>: Public websites (everyone can read, only owner can write).<h2></h2></p><h2>Octal Notation</h2><p><strong>Permissions as numbers</strong>:</p><pre><code>r = 4  &#40;binary: 100&#41;\nw = 2  &#40;binary: 010&#41;\nx = 1  &#40;binary: 001&#41;\n</code></pre><p><strong>Add them up</strong>:</p><pre><code>rw- = 4+2+0 = 6\nr-- = 4+0+0 = 4\nr-x = 4+0+1 = 5\nrwx = 4+2+1 = 7\n--- = 0+0+0 = 0\n</code></pre><p><strong>Common patterns</strong>:<pre><code class=\"bash\">chmod 755 script.sh\n# Owner: rwx &#40;7&#41; - full control\n# Group: r-x &#40;5&#41; - read and execute\n# Other: r-x &#40;5&#41; - read and execute\n\nchmod 644 essay.md\n# Owner: rw- &#40;6&#41; - read and write\n# Group: r-- &#40;4&#41; - read only\n# Other: r-- &#40;4&#41; - read only\n\nchmod 600 secret.key\n# Owner: rw- &#40;6&#41; - read and write\n# Group: --- &#40;0&#41; - no access\n# Other: --- &#40;0&#41; - no access\n</code></pre></p><p><strong>This is the most common system</strong> for expressing permissions.<h2></h2></p><h2>Directory Permissions</h2><p><strong>Directories are special</strong>:</p><p><strong>Read (<code>r</code>)</strong>: List contents<pre><code class=\"bash\">ls mydir/\n# Works if you have read permission\n</code></pre></p><p><strong>Write (<code>w</code>)</strong>: Add/remove files<pre><code class=\"bash\">touch mydir/newfile\n# Works if you have write permission\n</code></pre></p><p><strong>Execute (<code>x</code>)</strong>: Enter directory<pre><code class=\"bash\">cd mydir/\n# Works if you have execute permission\n</code></pre></p><p><strong>Common mistake</strong>:<pre><code class=\"bash\">chmod 666 mydir  # rw-rw-rw-\n# Can't enter! &#40;no x bit&#41;\n\ncd mydir/\n# Error: Permission denied\n\n# Fix:\nchmod 755 mydir  # rwxr-xr-x\ncd mydir/\n# Works!\n</code></pre></p><p><strong>For directories</strong>: <code>x</code> is <strong>required</strong> to access (even if <code>r</code> is set).<h2></h2></p><h2>Changing Permissions</h2><h3><code>chmod</code> (Change Mode)</h3><p><strong>Symbolic</strong>:<pre><code class=\"bash\"># Add execute for owner\nchmod u+x script.sh\n\n# Remove write for group\nchmod g-w file.txt\n\n# Set everyone to read-only\nchmod a=r file.txt\n\n# Multiple changes\nchmod u+x,g-w,o-r file.txt\n</code></pre></p><p><strong>Octal</strong> (more common):<pre><code class=\"bash\">chmod 755 script.sh   # rwxr-xr-x\nchmod 644 essay.md    # rw-r--r--\nchmod 600 secret.key  # rw-------\n</code></pre></p><h3><code>chown</code> (Change Owner)</h3><pre><code class=\"bash\"># Change owner\nsudo chown bob file.txt\n\n# Change owner and group\nsudo chown bob:developers file.txt\n\n# Recursive &#40;entire directory tree&#41;\nsudo chown -R alice:staff mydir/\n</code></pre><h3><code>chgrp</code> (Change Group)</h3><pre><code class=\"bash\"># Change group\nchgrp staff file.txt\n\n# Recursive\nchgrp -R developers project/\n</code></pre><h2></h2><h2>Special Permissions</h2><h3>Setuid (Set User ID)</h3><p><strong>When executed</strong>, run as file owner (not as you):</p><pre><code class=\"bash\">ls -l /usr/bin/sudo\n# -rwsr-xr-x 1 root wheel 123456 Oct 10 sudo\n#    └─ s = setuid bit\n\n# When YOU run sudo:\n# Process runs as ROOT &#40;file owner&#41;, not as you\n# This is how sudo works!\n</code></pre><p><strong>Set setuid</strong>:<pre><code class=\"bash\">chmod u+s script.sh\n# Or:\nchmod 4755 script.sh  # 4 = setuid bit\n</code></pre></p><p><strong>Security risk</strong>: Use carefully (lets users run as someone else).</p><h3>Setgid (Set Group ID)</h3><p><strong>For files</strong>: Run as file's group<br /> <strong>For directories</strong>: New files inherit directory's group</p><pre><code class=\"bash\"># Shared directory for 'developers' group\nmkdir /shared/project\nchmod 2775 /shared/project  # 2 = setgid bit\nchgrp developers /shared/project\n\n# Now: Any file created inherits 'developers' group\n# &#40;Good for team collaboration!&#41;\n</code></pre><h3>Sticky Bit</h3><p><strong>For directories</strong>: Only owner can delete their files (even if others have write permission)</p><pre><code class=\"bash\">ls -ld /tmp\n# drwxrwxrwt 10 root root 4096 Oct 10 tmp\n#         └─ t = sticky bit\n\n# Anyone can create files in /tmp\n# But only file owner &#40;or root&#41; can delete them\n</code></pre><p><strong>Set sticky bit</strong>:<pre><code class=\"bash\">chmod +t /shared/\n# Or:\nchmod 1777 /shared/  # 1 = sticky bit\n</code></pre></p><h2></h2><h2>Practical Security</h2><h3>Principle 1: Least Privilege</h3><p><strong>Give minimum permissions needed</strong>:</p><p><strong>Bad</strong>:<pre><code class=\"bash\">chmod 777 mydir/  # rwxrwxrwx &#40;everyone can do anything!&#41;\n# Security risk!\n</code></pre></p><p><strong>Good</strong>:<pre><code class=\"bash\">chmod 755 mydir/  # rwxr-xr-x\n# Owner: full control\n# Others: read and execute only\n</code></pre></p><h3>Principle 2: Sensitive Files</h3><p><strong>Private keys, passwords, secrets</strong>:</p><pre><code class=\"bash\">chmod 600 &#126;/.ssh/id&#95;rsa  # rw-------\n# Only YOU can read/write\n# &#40;SSH requires this!&#41;\n</code></pre><h3>Principle 3: Executable Scripts</h3><p><strong>Scripts need execute bit</strong>:</p><pre><code class=\"bash\"># Create script\necho '#!/bin/bash\\necho &quot;Hello&quot;' &gt; script.sh\n\n# Not executable yet\n./script.sh\n# Error: Permission denied\n\n# Add execute\nchmod +x script.sh\n\n# Now works\n./script.sh\n# Output: Hello\n</code></pre><h2></h2><h2>Capabilities: Beyond Traditional Permissions</h2><p><strong>Problem with traditional model</strong>:</p><ul><li>All-or-nothing (root has ALL power, or none)</li><li>Coarse-grained (can't say \"can bind port 80, but nothing else\")</li></ul><p><strong>Capabilities</strong> (modern systems):</p><ul><li><strong>Fine-grained permissions</strong> (specific powers, not all-or-nothing)</li><li><strong>Principle of least privilege</strong> (give exactly what's needed)</li></ul><p><strong>Example</strong>:<pre><code class=\"bash\"># Give a program ONLY the power to bind low ports\n# &#40;not full root!&#41;\nsetcap 'cap&#95;net&#95;bind&#95;service=+ep' /usr/bin/myserver\n\n# Now myserver can bind port 80, but:\n# - Can't read other users' files\n# - Can't kill other processes\n# - Can't modify system files\n</code></pre></p><p><strong>seL4</strong> (Essay 9954) uses capabilities exclusively (no traditional permissions).</p><p><strong>This is the future</strong>: Fine-grained, verifiable access control.<h2></h2></p><h2>Try This</h2><h3>Exercise 1: Permission Exploration</h3><pre><code class=\"bash\"># Check your home directory\nls -la &#126;\n\n# Observe:\n# - Which files are executable? &#40;scripts, binaries&#41;\n# - Which are private? &#40;600 - SSH keys, config&#41;\n# - Which are public? &#40;644 - most documents&#41;\n</code></pre><h2></h2><h3>Exercise 2: Create Shared Directory</h3><pre><code class=\"bash\"># Create shared space\nmkdir &#126;/shared\nchmod 770 &#126;/shared  # rwxrwx---\n\n# Add group\nchgrp staff &#126;/shared\n\n# Now: You and 'staff' group can read/write\n# Others can't access\n</code></pre><h2></h2><h3>Exercise 3: Setuid Experiment</h3><pre><code class=\"bash\"># Find setuid programs\nfind /usr/bin -perm -4000 -ls 2&gt;/dev/null\n\n# Common ones:\n# - sudo &#40;run as root&#41;\n# - passwd &#40;change passwords - needs root to modify /etc/shadow&#41;\n# - ping &#40;needs raw sockets - historically needed root&#41;\n</code></pre><p><strong>Observe</strong>: Most setuid programs are owned by root (security-critical!).<h2></h2></p><h2>Going Deeper</h2><h3>Related Essays</h3><ul><li><strong><a href='/12025-10/9590-filesystem-hierarchical-organization'>9590: Filesystem</a></strong> - File structure</li><li><strong><a href='/12025-10/9570-processes-programs-in-motion'>9570: Processes</a></strong> - Who runs programs</li><li><strong><a href='/12025-10/9954-sel4-verified-microkernel'>9954: seL4 Microkernel</a></strong> - Capability-based security</li><li><strong><a href='/12025-10/9507-helen-atthowe-ecological-systems'>9507: Helen Atthowe</a></strong> - Boundaries as garden management</li></ul><h3>External Resources</h3><ul><li><strong><code>man chmod</code></strong> - Change mode (permissions)</li><li><strong><code>man capabilities</code></strong> - Linux capabilities (7)</li><li><strong>\"Unix and Linux System Administration Handbook\"</strong> - Security chapter</li><li><strong>SELinux, AppArmor</strong> - Mandatory access control (beyond permissions)<h2></h2></li></ul><h2>Reflection Questions</h2><ol><li><strong>Is 777 ever justified?</strong> (When would you give everyone full access?)</li><li><strong>Why does SSH require 600 on private keys?</strong> (Security - others reading your key = compromised!)</li><li><strong>Could permissions be more fine-grained by default?</strong> (Capabilities say yes - but complexity trade-off)</li><li><strong>Should all security be capabilities?</strong> (seL4 thinks so - but learning curve vs traditional)</li><li><strong>How do you audit permissions across 10,000 files?</strong> (Scripts, automation, declarative systems like Nix)<h2></h2></li></ol><h2>Summary</h2><p><strong>Unix Permission Model</strong>:</p><ul><li><strong>Three classes</strong>: Owner, group, other</li><li><strong>Three permissions</strong>: Read (4), write (2), execute (1)</li><li><strong>Octal notation</strong>: 755, 644, 600, etc.</li></ul><p><strong>Key Commands</strong>:</p><ul><li><strong><code>chmod</code></strong>: Change permissions (<code>chmod 755 file</code>)</li><li><strong><code>chown</code></strong>: Change owner (<code>chown alice file</code>)</li><li><strong><code>chgrp</code></strong>: Change group (<code>chgrp staff file</code>)</li></ul><p><strong>Special Permissions</strong>:</p><ul><li><strong>Setuid (4)</strong>: Run as file owner (security risk!)</li><li><strong>Setgid (2)</strong>: Run as file group, or inherit group for directories</li><li><strong>Sticky bit (1)</strong>: Only owner can delete (good for <code>/tmp/</code>)</li></ul><p><strong>Security Principles</strong>:</p><ul><li><strong>Least privilege</strong>: Minimum permissions needed</li><li><strong>Sensitive files</strong>: 600 (private keys, secrets)</li><li><strong>Executable scripts</strong>: Add <code>+x</code> bit</li><li><strong>Shared directories</strong>: Use groups + setgid</li></ul><p><strong>Key Insights</strong>:</p><ul><li><strong>Permissions are boundaries</strong> (who can access what)</li><li><strong>Coarse but effective</strong> (three classes × three permissions = simple)</li><li><strong>Capabilities are finer</strong> (future - give exact powers needed)</li><li><strong>Security via access control</strong> (can't attack what you can't access)</li></ul><p><strong>In the Valley</strong>:</p><ul><li><strong>We set permissions carefully</strong> (least privilege always)</li><li><strong>We use groups for collaboration</strong> (shared projects)</li><li><strong>We protect secrets</strong> (600 for private keys, config)</li><li><strong>We look toward capabilities</strong> (seL4, fine-grained future)</li></ul><p><strong>Plant lens</strong>: <strong>\"Permissions are garden boundaries—who can enter (read), who can plant (write), who can use the tools (execute).\"</strong><h2></h2></p><p><strong>Next</strong>: We'll explore <strong>networking basics</strong>—how processes communicate across machines, the foundation of distributed systems and the internet itself!<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9591-filesystem-hierarchical-organization'>9591 (filesystem hierarchical organization)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9593-networking-basics-sockets-protocols'>9593 (networking basics sockets protocols)</a></p><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 4</li><li><strong>Prerequisites</strong>: 9590, 9570, 9507</li><li><strong>Concepts</strong>: Unix permissions, chmod, chown, setuid, setgid, sticky bit, capabilities, least privilege</li><li><strong>Next Concepts</strong>: Networking, sockets, TCP/IP, protocols</li><li><strong>Plant Lens</strong>: Garden boundaries (access control), who can enter/plant/use tools</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T15:17:39.429359243Z-12607"
}