{
  "slug" : "9599-documentation-writing-for-humans",
  "meta" : {
    "slug" : "9599-documentation-writing-for-humans",
    "title" : "kae3g 9598: Documentation - Writing for Humans",
    "filename" : "9599-documentation-writing-for-humans.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9598: Documentation - Writing for Humans</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 5</strong> | <strong>Reading Time: 16 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>Why documentation matters (code is read more than written)</li><li>Different types of docs (README, API, tutorials, guides)</li><li>How to explain complex systems simply</li><li>The art of good examples</li><li>Documentation as knowledge preservation (House of Wisdom!)</li><li>Why plain text docs outlast everything else</li><li>Documentation as tending the knowledge garden<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9560-text-files-universal-format'>9560: Text Files</a></strong> - Markdown for docs</li><li><strong><a href='/12025-10/9596-version-control-git-foundations'>9596: Version Control</a></strong> - Version-control docs</li><li><strong><a href='/12025-10/9505-house-of-wisdom-knowledge-gardens'>9505: House of Wisdom</a></strong> - Knowledge preservation<h2></h2></li></ul><h2>Code is Read 10x More Than Written</h2><p><strong>Fundamental truth</strong>:</p><pre><code>Time writing code:   10 hours\nTime reading code:   100 hours &#40;you + others + future you&#41;\n</code></pre><p><strong>Good documentation</strong>:</p><ul><li>Saves 90 hours of reading time</li><li>Enables others to contribute</li><li>Helps future you (6 months later, you forget everything!)</li></ul><p><strong>Plant lens</strong>: <strong>\"Documentation is the garden's guidebook—helps new gardeners understand what's planted, why, and how to tend it.\"</strong><h2></h2></p><h2>Types of Documentation</h2><h3>README.md (The Welcome Mat)</h3><p><strong>First thing people see</strong>:</p><pre><code class=\"markdown\"><pre><code class=\"bash\">git clone ...\nnpm install\nnpm start\n</code></pre><h2>Features</h2><ul><li>Feature A</li><li>Feature B</li></ul><h2>Documentation</h2><p>See <a href='docs/'>docs/</a> for full guide.</p><pre><code><pre><code class=\"clojure\">&#40;defn process-data\n  &quot;Transforms input data according to schema.\n  \n  Args:\n    data - Vector of maps with :id and :value keys\n    schema - Transformation spec\n  \n  Returns:\n    Transformed vector of maps\n  \n  Example:\n    &#40;process-data &#91;{:id 1 :value 10}&#93; identity-schema&#41;\n    ;; =&gt; &#91;{:id 1 :value 10}&#93;&quot;\n  &#91;data schema&#93;\n  &#40;transform data schema&#41;&#41;\n</code></pre><p><strong>Good docs include</strong>:</p><ul><li>What it does (high-level)</li><li>Parameters (types, meaning)</li><li>Return value (type, meaning)</li><li>Examples (concrete usage)</li></ul><h3>Tutorials (Step-by-Step)</h3><p><strong>Teach by doing</strong>:</p><pre><code class=\"markdown\"># Tutorial: Build Your First Web App\n\n## Step 1: Setup\nInstall Node.js, create project.\n\n## Step 2: Create Server\nWrite this code: &#91;example&#93;\n\n## Step 3: Test\nRun `npm start`, visit http://localhost:3000\n\n## Step 4: Deploy\nPush to GitHub, configure hosting.\n</code></pre><p><strong>Goal</strong>: Take someone from <strong>zero to working</strong> (hand-holding).</p><h3>Guides (Conceptual)</h3><p><strong>Explain ideas</strong>:</p><pre><code class=\"markdown\"># Understanding React Hooks\n\nHooks are functions that let you &quot;hook into&quot; React state.\n\n## Why Hooks?\nClasses were complex, functional components are simpler.\n\n## Common Hooks\n- useState: Add state to component\n- useEffect: Run side effects\n</code></pre><p><strong>Goal</strong>: <strong>Deep understanding</strong> (concepts, not just steps).</p><p><strong>This valley</strong>: Most essays are guides (teaching concepts, not just commands).<h2></h2></p><h2>The Art of Good Examples</h2><p><strong>Bad example</strong> (too abstract):</p><pre><code class=\"python\">def foo&#40;x, y&#41;:\n    &quot;&quot;&quot;Processes inputs.&quot;&quot;&quot;\n    return bar&#40;x&#41; + baz&#40;y&#41;\n</code></pre><p><strong>What does this DO?</strong> (Unclear!)</p><p><strong>Good example</strong> (concrete, clear):</p><pre><code class=\"python\">def calculate&#95;total&#95;price&#40;items, tax&#95;rate&#41;:\n    &quot;&quot;&quot;Calculates total price including tax.\n    \n    Example:\n        items = &#91;10.00, 20.00, 5.00&#93;  # Prices\n        tax&#95;rate = 0.08  # 8% tax\n        calculate&#95;total&#95;price&#40;items, tax&#95;rate&#41;\n        # Returns: 37.80 &#40;35.00 + 2.80 tax&#41;\n    &quot;&quot;&quot;\n    subtotal = sum&#40;items&#41;\n    tax = subtotal &#42; tax&#95;rate\n    return subtotal + tax\n</code></pre><p><strong>Now clear!</strong> (Concrete numbers, real-world meaning)</p><p><strong>Guideline</strong>: <strong>Show, don't just tell</strong> (examples > abstract descriptions).<h2></h2></p><h2>Documentation Principles</h2><h3>1. Start with Why</h3><p><strong>Bad</strong>: \"This function does X.\"</p><p><strong>Good</strong>: \"We need X because of Y. This function does X.\"</p><p><strong>Example</strong>:</p><pre><code class=\"markdown\">## Why Immutability?\n\nMutable state causes race conditions in concurrent code.\nBy using immutable data, we eliminate entire classes of bugs.\n\nThe `update` function creates a new version instead of mutating.\n</code></pre><p><strong>Context</strong> helps understanding.</p><h3>2. Write for Beginners</h3><p><strong>You know the system</strong>. Readers don't.</p><p><strong>Bad</strong>: \"Configure the ingress controller.\"</p><p><strong>Good</strong>: \"The ingress controller routes external traffic to your services. Edit <code>ingress.yaml</code> to add routes.\"</p><p><strong>Don't assume knowledge</strong> (or explain terms first).</p><h3>3. Use Plain Language</h3><p><strong>Bad</strong>: \"Instantiate a singleton factory bean.\"</p><p><strong>Good</strong>: \"Create one shared object that all code uses.\"</p><p><strong>Jargon is a barrier</strong> (use when necessary, explain first).</p><h3>4. Show the Path</h3><p><strong>Bad</strong>: List of features (what it CAN do).</p><p><strong>Good</strong>: Learning path (what to learn FIRST, then next).</p><p><strong>This valley</strong>: Phased curriculum (9500→9600→9700... clear progression!).<h2></h2></p><h2>Documentation as Preservation</h2><p><strong>House of Wisdom</strong> (Essay 9505) preserved Greek knowledge through <strong>translation and copying</strong>.</p><p><strong>Modern equivalent</strong>: <strong>Documentation in version control</strong>.</p><pre><code class=\"bash\"># Your docs are versioned\ngit log docs/\n\n# Can see how understanding evolved\ngit show abc123:docs/architecture.md\n\n# Preserved forever &#40;like manuscripts!&#41;\n</code></pre><p><strong>Why plain text</strong> (Essay 9560):</p><ul><li>Survives format changes (Markdown will outlast Word!)</li><li>Version-controllable (Git diffs show what changed)</li><li>Searchable (grep, ripgrep work)</li><li>Portable (opens anywhere)</li></ul><p><strong>Plant lens</strong>: <strong>\"Documentation is seed-saving—preserve knowledge in durable form (text) so future generations can replant.\"</strong><h2></h2></p><h2>Common Documentation Mistakes</h2><h3>1. No Examples</h3><p><strong>Docs say</strong>: \"Use the <code>transform</code> function.\"</p><p><strong>Reader asks</strong>: \"HOW??\"</p><p><strong>Fix</strong>: Show example (even simple one helps!).</p><h3>2. Out-of-Date</h3><p><strong>Code evolved</strong>, docs didn't:</p><pre><code class=\"python\"># Docs say:\napp.run&#40;port=3000&#41;\n\n# Actual API:\napp.start&#40;config={'port': 3000}&#41;  # Changed!\n</code></pre><p><strong>Prevention</strong>:</p><ul><li>Version docs with code (same Git repo)</li><li>Test code examples (doctests, CI)</li><li>Review docs during code review</li></ul><h3>3. Too Much Detail</h3><p><strong>Docs explain</strong> every parameter, every edge case, every internal:</p><pre><code>The FrobnicatorService uses a BeanFactory to instantiate...\n&#40;5 pages of internals&#41;\n</code></pre><p><strong>User just wants</strong>: \"How do I use this?\"</p><p><strong>Fix</strong>: Start simple (quick start), then deep dives (optional advanced docs).<h2></h2></p><h2>Documentation for the Valley</h2><p><strong>Our essays ARE documentation</strong>:</p><h3>Structure</h3><ul><li><strong>What You'll Learn</strong> (overview - like README)</li><li><strong>Prerequisites</strong> (learning path)</li><li><strong>Concepts</strong> (guide - deep explanations)</li><li><strong>Try This</strong> (tutorial - hands-on)</li><li><strong>Going Deeper</strong> (links to more)</li><li><strong>Summary</strong> (key takeaways)</li></ul><p><strong>This is intentional</strong> (optimized for learning!).</p><h3>Plain Text</h3><p><strong>All Markdown</strong>:</p><ul><li>Version-controlled (Git)</li><li>Future-proof (will outlast proprietary formats)</li><li>Portable (render on web, CLI, PDF, etc.)</li></ul><h3>Cross-Referenced</h3><p><strong>Every essay</strong> links to related essays:</p><ul><li>Prerequisites (what to read first)</li><li>Going Deeper (related topics)</li><li>Navigation (previous/next in sequence)</li></ul><p><strong>This builds a knowledge web</strong> (not isolated docs).<h2></h2></p><h2>Try This</h2><h3>Exercise 1: Improve a README</h3><p><strong>Take a project</strong> (yours or open source):</p><p><strong>Check</strong>:</p><ul><li>Does it have a README?</li><li>Does it explain WHAT the project does?</li><li>Does it have Quick Start?</li><li>Does it have examples?</li></ul><p><strong>If missing</strong>: Add them! (Pull request = contribution!)<h2></h2></p><h3>Exercise 2: Write API Doc</h3><p><strong>Pick a function</strong> you wrote:</p><p><strong>Add docstring</strong>:<pre><code class=\"clojure\">&#40;defn your-function\n  &quot;One-sentence description.\n  \n  Longer explanation if needed.\n  \n  Args:\n    x - What x means\n    y - What y means\n  \n  Returns:\n    What it returns\n  \n  Example:\n    &#40;your-function 5 10&#41;\n    ;; =&gt; 50&quot;\n  &#91;x y&#93;\n  &#40;&#42; x y&#41;&#41;\n</code></pre></p><h2></h2><h3>Exercise 3: Explain to a Beginner</h3><p><strong>Pick a complex concept</strong> (Git, Nix, monads, whatever).</p><p><strong>Write 3 paragraphs</strong>:</p><ol><li>What it is (simple terms)</li><li>Why it exists (what problem it solves)</li><li>How to use it (minimal example)</li></ol><p><strong>No jargon</strong> (or explain jargon first).</p><p><strong>Share</strong> with someone unfamiliar (see if they understand!).<h2></h2></p><h2>Going Deeper</h2><h3>Related Essays</h3><ul><li><strong><a href='/12025-10/9560-text-files-universal-format'>9560: Text Files</a></strong> - Markdown for docs</li><li><strong><a href='/12025-10/9505-house-of-wisdom-knowledge-gardens'>9505: House of Wisdom</a></strong> - Knowledge preservation</li><li><strong><a href='/12025-10/9596-version-control-git-foundations'>9596: Version Control</a></strong> - Version docs with code</li><li><strong>All valley essays</strong> - Examples of structured documentation!</li></ul><h3>External Resources</h3><ul><li><strong>\"Docs for Developers\"</strong> - Jared Bhatti (comprehensive guide)</li><li><strong>Write the Docs</strong> - Community and conference</li><li><strong>Divio Documentation System</strong> - 4-type framework (tutorial, how-to, reference, explanation)</li><li><strong>Readme Driven Development</strong> - Write README first (like TDD but for docs)<h2></h2></li></ul><h2>Reflection Questions</h2><ol><li><strong>Why is documentation often an afterthought?</strong> (Coding is \"real work\", docs are \"extra\"—wrong mindset!)</li><li><strong>Should code be self-documenting?</strong> (Good names help, but not enough—you still need docs for WHY)</li><li><strong>How do you keep docs updated?</strong> (Version with code, test examples, make it easy to update)</li><li><strong>Is there such a thing as too much documentation?</strong> (Yes—overwhelming! Start simple, add depth progressively)</li><li><strong>How would Nock docs work?</strong> (12 rules fit on 2 pages—minimal surface area to document!)<h2></h2></li></ol><h2>Summary</h2><p><strong>Documentation Matters Because</strong>:</p><ul><li>Code is read 10x more than written</li><li>Helps others contribute</li><li>Helps future you</li><li>Preserves knowledge</li></ul><p><strong>Types of Documentation</strong>:</p><ul><li><strong>README</strong>: Quick start, overview</li><li><strong>API docs</strong>: Function/class reference</li><li><strong>Tutorials</strong>: Step-by-step (beginner-friendly)</li><li><strong>Guides</strong>: Conceptual (deep understanding)</li></ul><p><strong>Good Documentation</strong>:</p><ul><li><strong>Starts with why</strong> (context before details)</li><li><strong>Shows examples</strong> (concrete > abstract)</li><li><strong>Uses plain language</strong> (no unnecessary jargon)</li><li><strong>Provides learning path</strong> (beginner → advanced)</li></ul><p><strong>Common Mistakes</strong>:</p><ul><li>No examples (too abstract)</li><li>Out-of-date (code evolved, docs didn't)</li><li>Too much detail (overwhelms beginners)</li></ul><p><strong>Best Practices</strong>:</p><ul><li><strong>Plain text</strong> (Markdown - version-controllable, future-proof)</li><li><strong>Version with code</strong> (docs in same Git repo)</li><li><strong>Test examples</strong> (ensure they work!)</li><li><strong>Cross-reference</strong> (build knowledge web)</li></ul><p><strong>In the Valley</strong>:</p><ul><li><strong>Every essay is documentation</strong> (teaching complex systems)</li><li><strong>Structured for learning</strong> (What/Why/How/Try/Deeper/Summary)</li><li><strong>Plain text</strong> (Markdown - survives decades)</li><li><strong>Cross-referenced</strong> (knowledge web, not islands)</li><li><strong>Version-controlled</strong> (Git - every change preserved)</li></ul><p><strong>Plant lens</strong>: <strong>\"Documentation is the garden guidebook—explains what's planted, why each plant is there, how to tend them, and what they yield.\"</strong><h2></h2></p><p><strong>Next</strong>: We'll explore <strong>debugging</strong>—the art of finding and fixing bugs, mental models for understanding failures, and tools that help!<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9598-testing-verification-validation'>9598 (testing verification validation)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9600-debugging-finding-fixing-issues'>9600 (debugging finding fixing issues)</a></p><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 5</li><li><strong>Prerequisites</strong>: 9560, 9596, 9505</li><li><strong>Concepts</strong>: Documentation, README, API docs, tutorials, guides, plain text, knowledge preservation</li><li><strong>Next Concepts</strong>: Debugging, troubleshooting, mental models, tools</li><li><strong>Plant Lens</strong>: Garden guidebook (knowledge transfer), seed-saving (preservation), tending instructions</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T15:17:39.429634604Z-12077"
}