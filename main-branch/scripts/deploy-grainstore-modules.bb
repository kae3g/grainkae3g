#!/usr/bin/env bb

(require '[clojure.edn :as edn]
         '[clojure.java.io :as io]
         '[clojure.string :as str]
         '[babashka.process :refer [shell]])

(defn read-grainstore-manifest []
  "Read the grainstore.edn manifest"
  (-> "grainstore/grainstore.edn"
      slurp
      edn/read-string))

(defn get-grain-pbc-modules []
  "Get all Grain PBC modules (exclude external dependencies)"
  (let [manifest (read-grainstore-manifest)
        modules (-> manifest :grainstore :modules)]
    (->> modules
         (filter (fn [[_k v]] (not (get-in v [:repos :external]))))
         (map (fn [[k v]] {:name (name k) :info v}))
         (sort-by :name))))

(defn create-deployment-plan []
  "Create a deployment plan for all modules"
  (let [modules (get-grain-pbc-modules)]
    (println "üåæ Grain Network Deployment Plan")
    (println "=" (apply str (repeat 40 "=")))
    (println)
    (println (str "Total Modules: " (count modules)))
    (println (str "Platforms: GitHub + Codeberg"))
    (println (str "Total Deployments: " (* (count modules) 2)))
    (println)
    (println "Modules to Deploy:")
    (doseq [module modules]
      (println (str "  ‚Ä¢ " (:name module) " - " (:description (:info module)))))
    (println)
    (println "Deployment Steps:")
    (println "1. Create Codeberg grainpbc organization")
    (println "2. Deploy to GitHub grainpbc org")
    (println "3. Deploy to Codeberg grainpbc org")
    (println "4. Enable Pages on both platforms")
    (println "5. Set up CI/CD mirroring")
    (println)
    modules))

(defn check-git-remotes []
  "Check if we have the necessary git remotes"
  (let [remotes (-> (shell {:out :string} "git remote -v")
                    :out
                    str/split-lines)]
    (println "üîç Checking Git Remotes:")
    (doseq [remote remotes]
      (println (str "  " remote)))
    (println)
    (let [has-github (some #(str/includes? % "github.com") remotes)
          has-codeberg (some #(str/includes? % "codeberg.org") remotes)]
      (println "Remote Status:")
      (println (str "  GitHub: " (if has-github "‚úÖ" "‚ùå")))
      (println (str "  Codeberg: " (if has-codeberg "‚úÖ" "‚ùå")))
      (println)
      {:github has-github :codeberg has-codeberg})))

(defn generate-module-readme [module-name module-info]
  "Generate a README.md for a module with dual-platform URLs"
  (let [github-url (str "https://github.com/grainpbc/" module-name)
        codeberg-url (str "https://codeberg.org/grainpbc/" module-name)
        github-pages (str "https://grainpbc.github.io/" module-name)
        codeberg-pages (str "https://grainpbc.codeberg.page/" module-name)]
    (str "# " (str/capitalize (str/replace module-name #"-" " ")) "\n\n"
         (:description module-info) "\n\n"
         "## üåê Websites\n\n"
         "**GitHub:** " github-url "\n"
         "**Codeberg:** " codeberg-url "\n\n"
         "**GitHub Pages:** " github-pages "\n"
         "**Codeberg Pages:** " codeberg-pages "\n\n"
         "## üì¶ Installation\n\n"
         "```bash\n"
         "# Clone from GitHub\n"
         "git clone " github-url "\n"
         "\n"
         "# Or clone from Codeberg\n"
         "git clone " codeberg-url "\n"
         "```\n\n"
         "## üöÄ Quick Start\n\n"
         "```bash\n"
         "# Install dependencies\n"
         "bb deps\n"
         "\n"
         "# Run tasks\n"
         "bb tasks\n"
         "```\n\n"
         "## üìö Documentation\n\n"
         "See the [documentation](" github-pages ") for detailed usage instructions.\n\n"
         "## ü§ù Contributing\n\n"
         "Contributions welcome! Please see our [contributing guidelines](" github-url "/blob/main/CONTRIBUTING.md).\n\n"
         "## üìÑ License\n\n"
         "This project is licensed under the " (:license module-info) " License.\n\n"
         "## üåæ Grain Network\n\n"
         "Part of the [Grain Network](https://github.com/grainpbc) - Global Renewable technology for a sustainable future.\n")))

(defn create-deployment-script [modules]
  "Create a bash script for deploying all modules"
  (let [script-content (str "#!/bin/bash\n"
                           "# Grain Network Module Deployment Script\n"
                           "# Generated by deploy-grainstore-modules.bb\n\n"
                           "set -e\n\n"
                           "echo \"üåæ Grain Network Module Deployment\"\n"
                           "echo \"================================\"\n\n"
                           "MODULES=(\n"
                           (str/join "\n" (map #(str "  \"" (:name %) "\"") modules))
                           ")\n\n"
                           "echo \"Deploying ${#MODULES[@]} modules to GitHub and Codeberg...\"\n"
                           "echo\n\n"
                           "for module in \"${MODULES[@]}\"; do\n"
                           "  echo \"üì¶ Deploying $module...\"\n"
                           "  \n"
                           "  # Create GitHub repository\n"
                           "  echo \"  Creating GitHub repository...\"\n"
                           "  gh repo create grainpbc/$module --public --description \"$module - Grain Network module\"\n"
                           "  \n"
                           "  # Create Codeberg repository\n"
                           "  echo \"  Creating Codeberg repository...\"\n"
                           "  # Note: Codeberg CLI not available, manual creation required\n"
                           "  \n"
                           "  # Add remotes\n"
                           "  cd grainstore/$module\n"
                           "  git remote add github https://github.com/grainpbc/$module.git\n"
                           "  git remote add codeberg https://codeberg.org/grainpbc/$module.git\n"
                           "  \n"
                           "  # Generate README with dual URLs\n"
                           "  # (README generation would go here)\n"
                           "  \n"
                           "  # Push to both platforms\n"
                           "  git push github main\n"
                           "  git push codeberg main\n"
                           "  \n"
                           "  cd ../..\n"
                           "  echo \"  ‚úÖ $module deployed\"\n"
                           "  echo\n"
                           "done\n\n"
                           "echo \"üéâ All modules deployed successfully!\"\n"
                           "echo \"Next: Enable Pages on both platforms\"\n")]
    (spit "scripts/deploy-modules.sh" script-content)
    (shell "chmod +x scripts/deploy-modules.sh")
    (println "üìù Created deployment script: scripts/deploy-modules.sh")))

(defn main []
  "Main deployment planning function"
  (println "üåæ Grain Network Module Deployment Planner")
  (println "=" (apply str (repeat 45 "=")))
  (println)
  
  (let [modules (create-deployment-plan)
        remotes (check-git-remotes)]
    
    (when-not (:github remotes)
      (println "‚ö†Ô∏è  Warning: GitHub remote not found. You may need to add it:")
      (println "   git remote add github https://github.com/grainpbc/grainkae3g.git"))
    
    (when-not (:codeberg remotes)
      (println "‚ö†Ô∏è  Warning: Codeberg remote not found. You may need to add it:")
      (println "   git remote add codeberg https://codeberg.org/grainpbc/grainkae3g.git"))
    
    (println)
    (create-deployment-script modules)
    
    (println)
    (println "üöÄ Ready to Deploy!")
    (println "Run: ./scripts/deploy-modules.sh")
    (println)
    (println "Manual Steps Required:")
    (println "1. Create Codeberg grainpbc organization")
    (println "2. Install GitHub CLI: gh auth login")
    (println "3. Run deployment script")
    (println "4. Enable Pages on both platforms")))

(main)
