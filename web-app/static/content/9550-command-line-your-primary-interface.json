{
  "slug" : "9550-command-line-your-primary-interface",
  "meta" : {
    "slug" : "9550-command-line-your-primary-interface",
    "title" : "kae3g 9550: The Command Line - Your Primary Interface",
    "filename" : "9550-command-line-your-primary-interface.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9550: The Command Line - Your Primary Interface</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 3</strong> | <strong>Reading Time: 14 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>Why the command line is more powerful than GUIs</li><li>Essential shell commands you'll use daily</li><li>How to navigate the filesystem efficiently</li><li>Shell shortcuts that save hours</li><li>Understanding paths (absolute vs relative)</li><li>How to compose commands for leverage</li><li>Customizing your shell environment<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9510-unix-philosophy-do-one-thing-well'>9510: Unix Philosophy</a></strong> - Text streams, composition</li><li><strong><a href='/12025-10/9540-types-sets-mathematical-foundations'>9540: Types and Sets</a></strong> - Understanding structure<h2></h2></li></ul><h2>Why Command Line?</h2><p><strong>GUIs are nice</strong>. Point, click, done. So why learn the command line?</p><h3>1. Power</h3><p><strong>GUI</strong>: Can do what designer anticipated.<br /> <strong>Command line</strong>: Can do <strong>anything the system allows</strong>.</p><p><strong>Example</strong>:</p><ul><li>GUI: \"Delete these 5 files\" (click each, confirm each)</li><li>Command line: <code>rm &#42;.tmp</code> (delete all .tmp files, one command)</li></ul><h3>2. Automation</h3><p><strong>GUI</strong>: Must click repeatedly (boring, error-prone).<br /> <strong>Command line</strong>: Write script once, run forever.</p><pre><code class=\"bash\">#!/bin/bash\n# Backup script\ntar -czf backup-$&#40;date +%Y%m%d&#41;.tar.gz &#126;/important-stuff/\nscp backup-&#42;.tar.gz server:/backups/\n</code></pre><p><strong>Save this script</strong>, run daily (or automate with cron). <strong>GUIs can't do this.</strong></p><h3>3. Remote Access</h3><p><strong>GUI</strong>: Requires graphical session (slow over network).<br /> <strong>Command line</strong>: Works over SSH (text-only, fast).</p><pre><code class=\"bash\"># From your laptop, control a server in Virginia:\nssh user@server.example.com\n# Now you're on that server's command line\n# Full control, minimal bandwidth\n</code></pre><p><strong>Servers typically don't have GUIs</strong> (waste of resources). Command line is <strong>the</strong> interface.</p><h3>4. Composition</h3><p><strong>GUI</strong>: Each app is isolated (can't pipe Photoshop output to Excel).<br /> <strong>Command line</strong>: Everything composes (Unix philosophy!).</p><pre><code class=\"bash\"># Get top 10 most common words\ncat essay.md | tr ' ' '\\n' | sort | uniq -c | sort -rn | head -10\n</code></pre><p><strong>Six programs</strong>, working together. Try that in a GUI!<h2></h2></p><h2>Essential Commands</h2><h3>Navigation</h3><pre><code class=\"bash\"># Where am I?\npwd  # Print Working Directory\n# =&gt; /Users/you/projects/valley\n\n# List files\nls\nls -la  # Long format, include hidden files\nls -lh  # Human-readable sizes &#40;5M instead of 5242880&#41;\n\n# Change directory\ncd /path/to/directory  # Absolute path\ncd relative/path       # Relative to current\ncd ..                  # Parent directory\ncd &#126;                   # Home directory\ncd -                   # Previous directory &#40;toggle!&#41;\n</code></pre><h3>File Operations</h3><pre><code class=\"bash\"># Create\ntouch file.txt      # Create empty file\nmkdir directory     # Create directory\nmkdir -p a/b/c      # Create nested directories\n\n# Copy\ncp source.txt dest.txt\ncp -r dir1/ dir2/   # Recursive &#40;for directories&#41;\n\n# Move/Rename\nmv old.txt new.txt\nmv file.txt ../    # Move to parent directory\n\n# Delete\nrm file.txt\nrm -r directory/   # Recursive &#40;careful!&#41;\nrm -i &#42;.txt        # Interactive &#40;confirm each&#41;\n\n# View\ncat file.txt       # Dump entire file\nless file.txt      # Page through &#40;q to quit&#41;\nhead -20 file.txt  # First 20 lines\ntail -20 file.txt  # Last 20 lines\n</code></pre><h3>Text Processing</h3><pre><code class=\"bash\"># Search\ngrep &quot;pattern&quot; file.txt\ngrep -i &quot;pattern&quot; file.txt  # Case-insensitive\ngrep -r &quot;pattern&quot; directory/  # Recursive\n\n# Count\nwc file.txt         # Lines, words, characters\nwc -l file.txt      # Just lines\n\n# Sort\nsort file.txt\nsort -n file.txt    # Numeric sort\nsort -r file.txt    # Reverse\n\n# Unique\nsort file.txt | uniq       # Remove adjacent duplicates\nsort file.txt | uniq -c    # Count occurrences\n</code></pre><h2></h2><h2>Paths: Absolute vs Relative</h2><h3>Absolute Paths</h3><p><strong>Start with <code>/</code></strong> (root):</p><pre><code class=\"bash\">/Users/alice/documents/essay.txt\n/etc/hosts\n/var/log/system.log\n</code></pre><p><strong>Always works</strong>, regardless of current directory.</p><p><strong>Use when</strong>: Scripting (scripts should work from anywhere).</p><h3>Relative Paths</h3><p><strong>Relative to current directory</strong>:</p><pre><code class=\"bash\"># If you're in /Users/alice/\ndocuments/essay.txt   # =&gt; /Users/alice/documents/essay.txt\n../bob/file.txt       # =&gt; /Users/bob/file.txt\n./script.sh           # =&gt; /Users/alice/script.sh &#40;current dir&#41;\n</code></pre><p><strong>Shorter</strong>, but <strong>depends on where you are</strong>.</p><p><strong>Use when</strong>: Interactive use (less typing).</p><h3>Special Paths</h3><pre><code class=\"bash\">&#126;        # Home directory &#40;/Users/alice&#41;\n.        # Current directory\n..       # Parent directory\n-        # Previous directory &#40;cd - to toggle&#41;\n</code></pre><h2></h2><h2>Shell Shortcuts (Life-Changing!)</h2><h3>Tab Completion</h3><pre><code class=\"bash\">cd /usr/lo&#91;TAB&#93;  # Completes to: cd /usr/local/\n</code></pre><p><strong>Tab completes</strong> filenames, commands, paths. <strong>Use it constantly</strong> (save 80% of typing).</p><h3>History Navigation</h3><pre><code class=\"bash\"># Up arrow: previous command\n# Down arrow: next command\n\n# Search history:\nCtrl-R  # Reverse search\n# Type &quot;grep&quot; → shows last grep command\n# Enter to run, Ctrl-R again for older matches\n\n# View history\nhistory\nhistory | grep &quot;git commit&quot;  # Find that commit command you ran yesterday\n</code></pre><h3>Editing Shortcuts</h3><pre><code class=\"bash\">Ctrl-A   # Beginning of line\nCtrl-E   # End of line\nCtrl-U   # Delete from cursor to beginning\nCtrl-K   # Delete from cursor to end\nCtrl-W   # Delete previous word\nCtrl-L   # Clear screen &#40;like `clear` command&#41;\n</code></pre><p><strong>Master these</strong>: Save thousands of keystrokes.</p><h3>Process Control</h3><pre><code class=\"bash\">Ctrl-C   # Kill current process &#40;interrupt&#41;\nCtrl-Z   # Suspend current process\nfg       # Resume suspended process &#40;foreground&#41;\nbg       # Resume in background\n\n# Run in background from start:\nlong-running-command &amp;\n</code></pre><h2></h2><h2>Pipes and Redirection</h2><h3>Standard Streams</h3><p>Every process has three streams:</p><pre><code>stdin  &#40;0&#41;: Input &#40;keyboard by default&#41;\nstdout &#40;1&#41;: Output &#40;terminal by default&#41;\nstderr &#40;2&#41;: Errors &#40;terminal by default&#41;\n</code></pre><h3>Redirection</h3><pre><code class=\"bash\"># Redirect stdout to file\nls &gt; file-list.txt\n\n# Append to file\necho &quot;new line&quot; &gt;&gt; log.txt\n\n# Redirect stderr\ncommand 2&gt; errors.txt\n\n# Redirect both stdout and stderr\ncommand &gt; output.txt 2&gt;&amp;1\n\n# Redirect stdin &#40;read from file&#41;\nsort &lt; unsorted.txt\n</code></pre><h3>Pipes</h3><pre><code class=\"bash\"># Pipe stdout of command1 to stdin of command2\ncommand1 | command2\n\n# Chain multiple:\ncat file.txt | grep &quot;error&quot; | wc -l\n# &quot;How many error lines?&quot;\n</code></pre><p><strong>Pipes are composition</strong> (Unix philosophy in action).<h2></h2></p><h2>Practical Examples</h2><h3>Example 1: Find Large Files</h3><pre><code class=\"bash\"># Find files larger than 100MB\nfind &#126; -type f -size +100M\n\n# Sort by size &#40;largest first&#41;\nfind &#126; -type f -size +100M -exec ls -lh {} \\; | sort -k5 -hr\n</code></pre><h3>Example 2: Monitor Disk Usage</h3><pre><code class=\"bash\"># What's using space?\ndu -sh &#42;  # Summary, human-readable, current directory\n\n# Largest directories:\ndu -sh &#42; | sort -hr | head -10\n</code></pre><h3>Example 3: Quick Web Server</h3><pre><code class=\"bash\"># Python 3: serve current directory on port 8000\npython3 -m http.server 8000\n\n# Visit: http://localhost:8000\n# Instant file sharing!\n</code></pre><h3>Example 4: Download & Extract</h3><pre><code class=\"bash\"># Download file\ncurl -O https://example.com/file.tar.gz\n\n# Extract\ntar -xzf file.tar.gz\n\n# One-liner:\ncurl https://example.com/file.tar.gz | tar -xz\n</code></pre><h2></h2><h2>Shell Scripting Basics</h2><h3>Your First Script</h3><pre><code class=\"bash\">#!/bin/bash\n# hello.sh\n\necho &quot;Hello, $1!&quot;  # $1 = first argument\n</code></pre><p><strong>Make executable</strong>:<pre><code class=\"bash\">chmod +x hello.sh\n./hello.sh Alice  # =&gt; &quot;Hello, Alice!&quot;\n</code></pre></p><h3>Variables</h3><pre><code class=\"bash\">name=&quot;Alice&quot;\necho &quot;Hello, $name&quot;\n\n# Command substitution\ncurrent&#95;date=$&#40;date +%Y-%m-%d&#41;\necho &quot;Today is $current&#95;date&quot;\n</code></pre><h3>Conditionals</h3><pre><code class=\"bash\">if &#91; -f &quot;file.txt&quot; &#93;; then\n    echo &quot;File exists&quot;\nelse\n    echo &quot;File not found&quot;\nfi\n</code></pre><h3>Loops</h3><pre><code class=\"bash\"># Loop over files\nfor file in &#42;.txt; do\n    echo &quot;Processing $file&quot;\n    wc -l &quot;$file&quot;\ndone\n\n# Loop over numbers\nfor i in {1..10}; do\n    echo &quot;Iteration $i&quot;\ndone\n</code></pre><h2></h2><h2>Customizing Your Shell</h2><h3>Shell Configuration</h3><p><strong>Files that run on startup</strong>:</p><pre><code class=\"bash\">&#126;/.bashrc    # Bash &#40;Linux&#41;\n&#126;/.zshrc     # Zsh &#40;macOS default since Catalina&#41;\n&#126;/.profile   # Login shells\n</code></pre><p><strong>Add aliases</strong> (shortcuts):</p><pre><code class=\"bash\"># In &#126;/.zshrc or &#126;/.bashrc:\nalias ll='ls -lah'\nalias gst='git status'\nalias gco='git checkout'\nalias reload='source &#126;/.zshrc'\n\n# Now: type `ll` instead of `ls -lah`\n</code></pre><h3>Prompt Customization</h3><pre><code class=\"bash\"># Show current directory and git branch\nexport PS1='\\w $&#40;git branch 2&gt;/dev/null | grep &quot;&#94;&#42;&quot; | cut -d &quot; &quot; -f2&#41;\\$ '\n\n# Looks like:\n# &#126;/projects/valley main$ \n</code></pre><h3>Environment Variables</h3><pre><code class=\"bash\"># Set PATH &#40;where shell looks for commands&#41;\nexport PATH=&quot;$HOME/bin:$PATH&quot;\n\n# Now commands in &#126;/bin/ are available\n</code></pre><h2></h2><h2>Try This</h2><h3>Exercise 1: Navigation Workout</h3><p><strong>Without using GUI</strong> (Finder, Explorer):</p><ol><li>Open terminal</li><li>Go to home directory: <code>cd &#126;</code></li><li>List files: <code>ls -la</code></li><li>Create test directory: <code>mkdir shell-practice</code></li><li>Enter it: <code>cd shell-practice</code></li><li>Create files: <code>touch file1.txt file2.txt file3.txt</code></li><li>List them: <code>ls</code></li><li>Go to parent: <code>cd ..</code></li><li>Remove directory: <code>rm -r shell-practice</code></li></ol><p><strong>Goal</strong>: Feel comfortable navigating via command line.<h2></h2></p><h3>Exercise 2: Pipeline Challenge</h3><p><strong>Find the 5 largest files in your home directory</strong>:</p><pre><code class=\"bash\">find &#126; -type f -exec ls -lh {} \\; 2&gt;/dev/null | \\\n    sort -k5 -hr | \\\n    head -5\n</code></pre><p><strong>Breakdown</strong>:</p><ul><li><code>find &#126; -type f</code>: Find all files under home</li><li><code>-exec ls -lh {}</code>: Run <code>ls -lh</code> on each (human-readable sizes)</li><li><code>2&gt;/dev/null</code>: Ignore errors (permission denied)</li><li><code>sort -k5 -hr</code>: Sort by column 5 (size), human-readable, reverse</li><li><code>head -5</code>: Take top 5</li></ul><p><strong>Modify</strong>: Find .txt files only, or find smallest files.<h2></h2></p><h3>Exercise 3: Create Your Alias</h3><p><strong>Add to <code>&#126;/.zshrc</code> or <code>&#126;/.bashrc</code></strong>:</p><pre><code class=\"bash\"># Your custom aliases\nalias projects='cd &#126;/projects'\nalias today='date +%Y-%m-%d'\nalias count='wc -l'\n\n# Reload:\nsource &#126;/.zshrc\n</code></pre><p><strong>Now</strong>:</p><ul><li><code>projects</code> takes you to ~/projects</li><li><code>today</code> prints current date</li><li><code>cat file.txt | count</code> counts lines</li></ul><p><strong>Build your personal toolkit!</strong><h2></h2></p><h2>Advanced Patterns</h2><h3>1. Find and Replace Across Files</h3><pre><code class=\"bash\"># Find all .md files containing &quot;old text&quot;, replace with &quot;new text&quot;\nfind . -name &quot;&#42;.md&quot; -exec sed -i '' 's/old text/new text/g' {} \\;\n\n# macOS: sed -i ''\n# Linux: sed -i\n</code></pre><h3>2. Parallel Execution</h3><pre><code class=\"bash\"># Process files in parallel &#40;GNU parallel&#41;\nfind . -name &quot;&#42;.jpg&quot; | parallel convert {} {.}.png\n\n# Or with xargs:\nfind . -name &quot;&#42;.jpg&quot; | xargs -P 4 -I {} convert {} {}.png\n# -P 4: use 4 parallel processes\n</code></pre><h3>3. Watch Command</h3><pre><code class=\"bash\"># Run command every 2 seconds\nwatch -n 2 'df -h'\n\n# Monitor disk space live\n</code></pre><h3>4. Process Substitution</h3><pre><code class=\"bash\"># Compare output of two commands\ndiff &lt;&#40;ls dir1/&#41; &lt;&#40;ls dir2/&#41;\n\n# &lt;&#40;...&#41; creates temporary file with command output\n</code></pre><h2></h2><h2>The Shell as Programming Language</h2><p><strong>Shell</strong> (bash, zsh, fish) is a <strong>programming language</strong>:</p><h3>Functions</h3><pre><code class=\"bash\"># Define function\ngreet&#40;&#41; {\n    echo &quot;Hello, $1!&quot;\n}\n\n# Call it\ngreet Alice  # =&gt; &quot;Hello, Alice!&quot;\n</code></pre><h3>Error Handling</h3><pre><code class=\"bash\"># Check if command succeeded\nif git pull; then\n    echo &quot;Updated successfully&quot;\nelse\n    echo &quot;Pull failed&quot;\n    exit 1\nfi\n\n# Or shorthand:\ngit pull &amp;&amp; echo &quot;Success&quot; || echo &quot;Failed&quot;\n</code></pre><h3>Arrays</h3><pre><code class=\"bash\"># Bash arrays\nfiles=&#40;file1.txt file2.txt file3.txt&#41;\n\n# Loop over array\nfor file in &quot;${files&#91;@&#93;}&quot;; do\n    echo &quot;Processing $file&quot;\ndone\n</code></pre><h2></h2><h2>Going Deeper</h2><h3>Related Essays</h3><ul><li><strong><a href='/12025-10/9510-unix-philosophy-do-one-thing-well'>9510: Unix Philosophy</a></strong> - Foundation for command-line thinking</li><li><strong><a href='/12025-10/9560-text-files-universal-format'>9560: Text Files</a></strong> - What you're manipulating</li><li><strong><a href='/12025-10/9570-processes-programs-in-motion'>9570: Processes</a></strong> - What shell commands create</li><li><strong><a href='/12025-10/9580-filesystem-hierarchical-organization'>9580: Filesystem</a></strong> - The structure you navigate</li></ul><h3>External Resources</h3><ul><li><strong>\"The Linux Command Line\"</strong> by William Shotts - Free PDF, comprehensive</li><li><strong>\"Data Science at the Command Line\"</strong> - Advanced shell techniques</li><li><strong>explainshell.com</strong> - Paste any command, get explanation</li><li><strong>tldr pages</strong> - Simplified man pages with examples</li></ul><h3>For Shell Mastery</h3><ul><li><strong>Fish shell</strong> - User-friendly alternative to bash/zsh</li><li><strong>Oh My Zsh</strong> - Framework for managing zsh configuration</li><li><strong>Powerlevel10k</strong> - Beautiful, informative prompt<h2></h2></li></ul><h2>Reflection Questions</h2><ol><li><strong>Why do developers love the command line despite its learning curve?</strong> (Power, automation, composition)</li><li><strong>Will GUIs make command lines obsolete?</strong> (Unlikely—they serve different needs)</li><li><strong>Is shell scripting \"real programming\"?</strong> (Yes! Bash is Turing-complete)</li><li><strong>Should non-technical users learn the command line?</strong> (Depends—but basic navigation is empowering)</li><li><strong>What's your most-used command?</strong> (Mine: <code>git status</code>, <code>ls</code>, <code>cd</code>)<h2></h2></li></ol><h2>Summary</h2><p><strong>The command line</strong>:</p><ul><li><strong>Text-based interface</strong> to your computer</li><li><strong>More powerful</strong> than GUIs (can do anything system allows)</li><li><strong>Automatable</strong> (scripts beat repetitive clicking)</li><li><strong>Remote-friendly</strong> (SSH, low bandwidth)</li><li><strong>Composable</strong> (pipes, redirection, text streams)</li></ul><p><strong>Essential commands</strong>:</p><ul><li><strong>Navigation</strong>: pwd, ls, cd</li><li><strong>Files</strong>: cp, mv, rm, touch, mkdir</li><li><strong>Text</strong>: cat, grep, sed, awk, wc</li><li><strong>Pipes</strong>: | for composition</li></ul><p><strong>Skills</strong>:</p><ul><li><strong>Tab completion</strong> (save typing)</li><li><strong>History search</strong> (Ctrl-R)</li><li><strong>Keyboard shortcuts</strong> (Ctrl-A, Ctrl-E, etc.)</li><li><strong>Pipes and redirection</strong> (>, <, |)</li></ul><p><strong>In the Valley</strong>:</p><ul><li><strong>Command line is primary</strong> (GUIs are optional)</li><li><strong>Scripting is essential</strong> (automation, reproducibility)</li><li><strong>Text orientation</strong> (everything flows through text)</li><li><strong>Unix tools are our foundation</strong> (grep, awk, sed mastery)<h2></h2></li></ul><p><strong>Next</strong>: We'll explore <strong>text files</strong>—the universal data format that makes the command line so powerful. Why plain text beats binary formats for durability and interoperability!<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9540-types-sets-mathematical-foundations'>9540 (types sets mathematical foundations)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9560-text-files-universal-format'>9560 (text files universal format)</a></p><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 3</li><li><strong>Prerequisites</strong>: 9510, 9540</li><li><strong>Concepts</strong>: Shell, bash/zsh, navigation, pipes, redirection, automation, SSH</li><li><strong>Next Concepts</strong>: Text files, formats, serialization, plain text philosophy</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T15:17:39.42918745Z-14672"
}