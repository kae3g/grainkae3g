{
  "slug" : "9303-framework-alpine-sway-installation-guide",
  "meta" : {
    "slug" : "9303-framework-alpine-sway-installation-guide",
    "title" : "9303. Framework 16 Installation Guide: Alpine Linux + s6 + musl + Sway Wayland",
    "filename" : "9303-framework-alpine-sway-installation-guide.md",
    "series" : "technical-implementation",
    "sort-order" : 9303,
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9303: Framework 16 Installation Guide — Alpine Linux + s6 + musl + Sway Wayland</h1><p><strong>Timestamp:</strong> 12025-10-21&ndash;coldriver-tundra<br /> <strong>Series:</strong> Technical Implementation<br /> <strong>Category:</strong> Framework Laptop, Alpine Linux, s6 Init, musl libc, Sway Wayland<br /> <strong>Reading Time:</strong> 60 minutes</p><blockquote><p> <strong>\"The Framework laptop represents the future of repairable, modular computing. Installing Alpine Linux with s6 and Sway Wayland transforms it into a minimalist development machine that embodies the beauty of musl libc and Unix philosophy. This guide walks you through every step, from BIOS configuration to a fully functional musl-native development environment.\"</strong> <h2></h2></p></blockquote><h2>Overview: The Perfect Stack for Framework Laptops</h2><p><strong>Multi-AI Consensus Recommendation:</strong> All AI systems (Meta, DeepSeek, Gemini, Grok, ChatGPT) converge on this optimal stack for Framework laptops:</p><ul><li><strong>OS</strong>: Alpine Linux Extended ISO (v3.22) — musl libc, minimal, secure</li><li><strong>Init System</strong>: s6 supervision suite — musl-native, ~200KB footprint</li><li><strong>GUI</strong>: Sway Wayland — keyboard-driven, configuration-as-code, minimal</li><li><strong>Hardware</strong>: Framework 16 AMD Ryzen 7 7840HS + Radeon 780M Graphics</li><li><strong>Package Manager</strong>: apk + Nix (for reproducible development environments)</li></ul><p><strong>Fast-Track Goal</strong>: Get from Alpine ISO to bootable <code>xy-framework-alpine</code> system with user <code>xy</code>, s6 init, and Sway Wayland in under 30 minutes - <strong>no full disk encryption for speed</strong>.</p><p><strong>Why This Stack:</strong></p><ul><li><strong>Musl libc purity</strong> — Clean, auditable C codebase, minimal attack surface</li><li><strong>s6 supervision</strong> — Unix philosophy, process supervision = container supervision</li><li><strong>Sway minimalism</strong> — Developer efficiency, keyboard-driven workflow</li><li><strong>Framework optimization</strong> — Hardware-specific firmware and drivers included<h2></h2></li></ul><h2>Prerequisites</h2><h3>Hardware Requirements</h3><ul><li><strong>Framework 16 Laptop</strong> (AMD Ryzen 7 7840HS, Radeon 780M Graphics)</li><li><strong>BIOS Version</strong>: Insyde IFGP6.03.05 or compatible</li><li><strong>RAM</strong>: 32GB recommended (16GB minimum)</li><li><strong>Storage</strong>: 1TB NVMe SSD (Framework's standard NVMe drive)</li><li><strong>Network</strong>: WiFi or Ethernet connection for initial setup</li></ul><h3>Software Requirements</h3><ul><li><strong>USB Drive</strong>: 8GB+ USB-C or USB-A drive for Alpine Extended ISO</li><li><strong>Host System</strong>: Any Linux/macOS/Windows system for creating bootable USB</li><li><strong>Network Access</strong>: Internet connection for package downloads</li></ul><h3>Fast-Track Assumptions</h3><ul><li><strong>No dual-boot</strong>: This guide wipes the entire NVMe drive</li><li><strong>No encryption</strong>: Skipping LUKS for maximum speed</li><li><strong>Single user</strong>: Creates admin user <code>xy</code> with hostname <code>xy-framework-alpine</code></li><li><strong>Auto-boot</strong>: GRUB configured to boot from NVMe automatically<h2></h2></li></ul><h2>🚀 <strong>Fast-Track Installation (20-30 minutes)</strong></h2><p><em>For those who want to get up and running quickly, this section provides the streamlined approach based on multi-AI synthesis.</em></p><h3>Quick Start Overview</h3><p><strong>Goal</strong>: Bootable Alpine Linux on NVMe with user <code>xy</code>, hostname <code>xy-framework-alpine</code>, Sway Wayland, and s6 supervision suite.</p><p><strong>Time</strong>: ~20-30 minutes total <strong>Approach</strong>: Single chroot session for all critical configuration<h2></h2></p><h2>Step 1: BIOS Configuration</h2><h3>Essential BIOS Settings</h3><p><strong>Access BIOS:</strong></p><ol><li>Power on Framework laptop</li><li>Press <code>F2</code> repeatedly during boot to enter BIOS</li><li>Navigate using arrow keys and Enter</li></ol><p><strong>Required BIOS Changes:</strong><pre><code class=\"bash\"># Critical Settings for Alpine Linux\nSecure Boot: DISABLED          # Required for Alpine Linux\nSVM Mode: ENABLED              # AMD virtualization support\nIOMMU: ENABLED                 # GPU passthrough capability\nBoot Order: USB UEFI → NVMe UEFI OS\nFast Boot: DISABLED            # Ensure proper hardware detection\n</code></pre></p><p><strong>Detailed BIOS Configuration:</strong></p><ol><li><strong>Security Tab:</strong><ul><li>Secure Boot: <code>Disabled</code></li><li>TPM: <code>Enabled</code> (for hardware security)</li><li>Secure Boot Keys: <code>Clear</code> (if needed)</li></ul></li><li><strong>Advanced Tab:</strong><ul><li>CPU Configuration:<ul><li>SVM Mode: <code>Enabled</code></li><li>IOMMU: <code>Enabled</code></li><li>Secure Memory Encryption: <code>Enabled</code> (optional)   </li></ul></li></ul></li><li><strong>Boot Tab:</strong><ul><li>Boot Mode: <code>UEFI</code></li><li>Fast Boot: <code>Disabled</code></li><li>Boot Order: USB devices first</li></ul></li><li><strong>Save and Exit:</strong><ul><li>Press <code>F10</code> to save changes</li><li>Confirm with <code>Yes</code></li><li>System will reboot<h2></h2></li></ul></li></ol><h2>Step 2: Download and Prepare Alpine Linux Extended ISO</h2><h3>Why Extended ISO is Essential</h3><p><strong>Multi-AI Consensus:</strong> The Extended ISO is <strong>required</strong> (not optional) for Framework laptops:</p><ul><li><strong>AMD Microcode</strong>: Includes <code>amd-ucode</code> for Ryzen 7 7840HS optimization</li><li><strong>Graphics Firmware</strong>: Contains <code>linux-firmware-amd</code> for Radeon 780M acceleration</li><li><strong>WiFi Firmware</strong>: Framework's WiFi card requires <code>linux-firmware-iwlwifi</code></li><li><strong>Audio Firmware</strong>: Framework laptop audio codecs need specific firmware</li><li><strong>Offline Installation</strong>: ~200 packages included, reducing network dependency</li></ul><h3>Download Alpine Linux Extended ISO</h3><pre><code class=\"bash\"># Download Alpine Linux Extended ISO &#40;Essential for Framework laptops&#41;\nwget https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/alpine-extended-3.22.2-x86&#95;64.iso\n\n# Download and verify checksum\nwget https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/alpine-extended-3.22.2-x86&#95;64.iso.sha256\nsha256sum -c alpine-extended-3.22.2-x86&#95;64.iso.sha256\n\n# Expected output:\n# alpine-extended-3.22.2-x86&#95;64.iso: OK\n</code></pre><h3>Create Bootable USB Drive</h3><p><strong>On Linux/macOS:</strong><pre><code class=\"bash\"># Identify USB drive &#40;replace /dev/sdX with your USB device&#41;\nlsblk  # or diskutil list on macOS\n\n# Create bootable USB &#40;WARNING: This will erase the USB drive&#41;\ndd if=alpine-extended-3.22.2-x86&#95;64.iso of=/dev/sdX bs=4M status=progress oflag=sync\n\n# macOS alternative:\nsudo dd if=alpine-extended-3.22.2-x86&#95;64.iso of=/dev/rdiskX bs=4m\n</code></pre></p><p><strong>On Windows:</strong><pre><code class=\"powershell\"># Use Rufus or similar tool\n# Download Rufus: https://rufus.ie/\n# Select Alpine Extended ISO\n# Use DD image mode\n# Create bootable USB\n</code></pre></p><h2></h2><h2>Step 3: Boot from USB and Initial Setup</h2><h3>Boot Process</h3><ol><li><strong>Insert USB drive</strong> into Framework laptop</li><li><strong>Power on</strong> and press <code>F12</code> for boot menu</li><li><strong>Select USB drive</strong> from boot menu</li><li><strong>Wait for Alpine Linux boot</strong> (should boot automatically)</li></ol><h3>Initial Alpine Setup</h3><pre><code class=\"bash\"># Run Alpine setup script\nsetup-alpine\n\n# Configuration prompts and responses:\n</code></pre><p><strong>Keyboard Layout:</strong></p><pre><code>Available layouts: us, de, fr, it, etc.\nSelect keyboard layout: us\n</code></pre><p><strong>Hostname:</strong></p><pre><code>Enter hostname: framework-alpine\n</code></pre><p><strong>Network Configuration:</strong></p><pre><code>Available interfaces: wlan0, eth0\nSelect interface: wlan0\n\n# WiFi Setup &#40;if using WiFi&#41;\nEnter SSID: &#91;your-wifi-network&#93;\nEnter passphrase: &#91;your-wifi-password&#93;\n\n# Static IP &#40;recommended for development&#41;\nConfigure IP address: 192.168.1.100/24\nConfigure gateway: 192.168.1.1\nConfigure DNS: 8.8.8.8\n</code></pre><p><strong>Timezone:</strong></p><pre><code>Available timezones: America/Los&#95;Angeles, America/New&#95;York, etc.\nSelect timezone: America/Los&#95;Angeles\n</code></pre><p><strong>SSH Access:</strong></p><pre><code>Enable SSH server: yes\nAllow root login: yes &#40;for initial setup&#41;\n</code></pre><p><strong>Disk Configuration:</strong></p><pre><code>Available disks: nvme0n1 &#40;Framework's NVMe drive&#41;\nSelect disk: nvme0n1\nUse entire disk: yes\nCreate swap: yes &#40;recommended&#41;\n</code></pre><p><strong>User Setup:</strong></p><pre><code>Root password: &#91;secure-password&#93;\nCreate user: developer\nUser password: &#91;secure-password&#93;\n</code></pre><p><strong>Installation:</strong></p><pre><code>Installation will begin...\nThis may take 10-15 minutes\n</code></pre><p><strong>Reboot:</strong><pre><code class=\"bash\"># Remove USB drive when prompted\nreboot\n</code></pre></p><h2></h2><h2>Step 4: Post-Installation Base System Setup</h2><h3>Login and Initial Configuration</h3><pre><code class=\"bash\"># Login as root\nlogin: root\nPassword: &#91;your-root-password&#93;\n\n# Update system packages\napk update &amp;&amp; apk upgrade\n\n# Install Framework laptop specific firmware\napk add --no-cache \\\n  linux-firmware-iwlwifi \\\n  linux-firmware-amdgpu \\\n  amd-ucode \\\n  acpi \\\n  acpid \\\n  cpupower\n\n# Install essential development packages\napk add --no-cache \\\n  curl \\\n  wget \\\n  git \\\n  vim \\\n  htop \\\n  iotop \\\n  nload \\\n  tcpdump \\\n  strace \\\n  gdb \\\n  musl-dev \\\n  clang \\\n  make \\\n  linux-headers\n</code></pre><h3>Configure WiFi (if not configured during setup)</h3><pre><code class=\"bash\"># Check WiFi interface\nip link show wlan0\n\n# Configure WiFi using wpa&#95;supplicant\ncat &gt; /etc/wpa&#95;supplicant/wpa&#95;supplicant.conf &lt;&lt; 'EOF'\nnetwork={\n    ssid=&quot;your-wifi-network&quot;\n    psk=&quot;your-wifi-password&quot;\n}\nEOF\n\n# Start WiFi service\nrc-service wpa&#95;supplicant start\nrc-update add wpa&#95;supplicant default\n\n# Test connectivity\nping -c 3 8.8.8.8\n</code></pre><h2></h2><h2>Step 5: Install and Configure s6 Init System</h2><h3>Install s6 Supervision Suite</h3><pre><code class=\"bash\"># Install s6 supervision suite &#40;musl-native&#41;\napk add --no-cache \\\n  s6 \\\n  s6-rc \\\n  s6-linux-init \\\n  s6-portable-utils \\\n  s6-dns \\\n  execline\n\n# Configure s6 as init system\ns6-linux-init-maker -1 /etc/s6/rc/init\n\n# Backup original inittab\ncp /etc/inittab /etc/inittab.bak\n\n# Replace with s6 init\ncat &gt; /etc/inittab &lt;&lt; 'EOF'\n::sysinit:/etc/s6/init/init-stage1\n::wait:/etc/s6/init/init-stage2\n::shutdown:/etc/s6/init/init-shutdown\nEOF\n</code></pre><h3>Configure s6 Services</h3><pre><code class=\"bash\"># Create s6 service directories\nmkdir -p /etc/s6/services/{sshd,chronyd,networking,seatd}\n\n# Configure SSH service\ncat &gt; /etc/s6/services/sshd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\n/usr/sbin/sshd -D\nEOF\n\n# Configure chrony service\ncat &gt; /etc/s6/services/chronyd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid chrony\n/usr/sbin/chronyd -d\nEOF\n\n# Configure seatd service &#40;required for Wayland&#41;\ncat &gt; /etc/s6/services/seatd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\n/usr/bin/seatd\nEOF\n\n# Make services executable\nchmod +x /etc/s6/services/&#42;/run\n\n# Configure s6-rc for service management\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\ns6-rc change default\n</code></pre><h2></h2><h2>Step 6: Install Sway Wayland GUI</h2><h3>Install Sway and Wayland Components</h3><pre><code class=\"bash\"># Install Sway Wayland compositor and components\napk add --no-cache \\\n  sway \\\n  foot \\\n  waybar \\\n  mako \\\n  grim \\\n  slurp \\\n  wl-clipboard \\\n  seatd\n\n# Install graphics drivers for Radeon 780M\napk add --no-cache \\\n  mesa-dri-gallium \\\n  mesa-va-gallium \\\n  mesa-vulkan-radeon\n\n# Install audio support\napk add --no-cache \\\n  pipewire \\\n  pipewire-alsa \\\n  wireplumber \\\n  pamixer\n\n# Install web browser\napk add --no-cache \\\n  firefox\n\n# Add user to required groups for Wayland\nadduser developer video\nadduser developer seat\nadduser developer audio\n</code></pre><h3>Configure Sway</h3><pre><code class=\"bash\"># Create Sway configuration directory\nmkdir -p /home/developer/.config/sway\n\n# Create basic Sway configuration\ncat &gt; /home/developer/.config/sway/config &lt;&lt; 'EOF'\n# Sway configuration for Framework laptop development\n\n# Variables\nset $mod Mod4\nset $terminal foot\nset $menu wofi --show drun\n\n# Font\nfont pango:JetBrains Mono 10\n\n# Input configuration\ninput &#42; {\n    xkb&#95;layout us\n    xkb&#95;variant &quot;&quot;\n}\n\n# Output configuration &#40;Framework laptop display&#41;\noutput &#42; {\n    background #000000 solid&#95;color\n}\n\n# Key bindings\nbindsym $mod+Return exec $terminal\nbindsym $mod+Shift+q kill\nbindsym $mod+d exec $menu\nbindsym $mod+Shift+e exec swaynag -t warning -m 'Exit Sway?' -b 'Yes' 'swaymsg exit'\n\n# Window management\nbindsym $mod+Left focus left\nbindsym $mod+Right focus right\nbindsym $mod+Up focus up\nbindsym $mod+Down focus down\n\nbindsym $mod+Shift+Left move left\nbindsym $mod+Shift+Right move right\nbindsym $mod+Shift+Up move up\nbindsym $mod+Shift+Down move down\n\n# Workspace switching\nbindsym $mod+1 workspace 1\nbindsym $mod+2 workspace 2\nbindsym $mod+3 workspace 3\nbindsym $mod+4 workspace 4\nbindsym $mod+5 workspace 5\n\nbindsym $mod+Shift+1 move container to workspace 1\nbindsym $mod+Shift+2 move container to workspace 2\nbindsym $mod+Shift+3 move container to workspace 3\nbindsym $mod+Shift+4 move container to workspace 4\nbindsym $mod+Shift+5 move container to workspace 5\n\n# Layout management\nbindsym $mod+s layout stacking\nbindsym $mod+w layout tabbed\nbindsym $mod+e layout toggle split\n\n# Reload configuration\nbindsym $mod+Shift+c reload\n\n# Lock screen\nbindsym $mod+l exec swaylock\n\n# Volume control\nbindsym XF86AudioRaiseVolume exec pamixer -i 5\nbindsym XF86AudioLowerVolume exec pamixer -d 5\nbindsym XF86AudioMute exec pamixer -t\n\n# Brightness control &#40;Framework laptop&#41;\nbindsym XF86MonBrightnessUp exec brightnessctl set +5%\nbindsym XF86MonBrightnessDown exec brightnessctl set 5%-\n\n# Startup applications\nexec waybar\nexec mako\nEOF\n\n# Set proper ownership\nchown -R developer:developer /home/developer/.config\n</code></pre><h3>Configure Waybar</h3><pre><code class=\"bash\"># Create Waybar configuration\ncat &gt; /home/developer/.config/waybar/config &lt;&lt; 'EOF'\n{\n    &quot;layer&quot;: &quot;top&quot;,\n    &quot;position&quot;: &quot;top&quot;,\n    &quot;height&quot;: 30,\n    &quot;modules-left&quot;: &#91;&quot;sway/workspaces&quot;&#93;,\n    &quot;modules-center&quot;: &#91;&quot;clock&quot;&#93;,\n    &quot;modules-right&quot;: &#91;&quot;pulseaudio&quot;, &quot;battery&quot;, &quot;network&quot;&#93;,\n    \n    &quot;sway/workspaces&quot;: {\n        &quot;all-outputs&quot;: true\n    },\n    \n    &quot;clock&quot;: {\n        &quot;format&quot;: &quot;{:%Y-%m-%d %H:%M}&quot;\n    },\n    \n    &quot;pulseaudio&quot;: {\n        &quot;format&quot;: &quot;{volume}% {icon}&quot;,\n        &quot;format-muted&quot;: &quot;🔇&quot;,\n        &quot;format-icons&quot;: {\n            &quot;headphone&quot;: &quot;🎧&quot;,\n            &quot;hands-free&quot;: &quot;🖱️&quot;,\n            &quot;headset&quot;: &quot;🎧&quot;,\n            &quot;phone&quot;: &quot;📞&quot;,\n            &quot;portable&quot;: &quot;📱&quot;,\n            &quot;car&quot;: &quot;🚗&quot;,\n            &quot;default&quot;: &#91;&quot;🔈&quot;, &quot;🔉&quot;, &quot;🔊&quot;&#93;\n        }\n    },\n    \n    &quot;battery&quot;: {\n        &quot;format&quot;: &quot;{capacity}% {icon}&quot;,\n        &quot;format-charging&quot;: &quot;{capacity}% 🔌&quot;,\n        &quot;format-icons&quot;: &#91;&quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;&#93;\n    },\n    \n    &quot;network&quot;: {\n        &quot;format&quot;: &quot;{ifname}&quot;,\n        &quot;format-wifi&quot;: &quot;📶 {signalStrength}%&quot;,\n        &quot;format-ethernet&quot;: &quot;🌐&quot;,\n        &quot;format-disconnected&quot;: &quot;❌&quot;\n    }\n}\nEOF\n\n# Create Waybar style\ncat &gt; /home/developer/.config/waybar/style.css &lt;&lt; 'EOF'\n&#42; {\n    border: none;\n    border-radius: 0;\n    font-family: JetBrains Mono;\n    font-size: 12px;\n    min-height: 0;\n}\n\nwindow#waybar {\n    background: #1e1e1e;\n    color: #ffffff;\n}\n\n#workspaces button {\n    padding: 0 5px;\n    background: transparent;\n    color: #ffffff;\n    border-bottom: 3px solid transparent;\n}\n\n#workspaces button.focused {\n    background: #64727D;\n    border-bottom: 3px solid #ffffff;\n}\n\n#clock, #battery, #pulseaudio, #network {\n    padding: 0 10px;\n    margin: 0 5px;\n}\nEOF\n\n# Set proper ownership\nchown -R developer:developer /home/developer/.config\n</code></pre><h2></h2><h2>Step 7: Install Development Tools</h2><h3>Install Nix Package Manager</h3><pre><code class=\"bash\"># Install Nix &#40;single-user mode for simplicity&#41;\ncurl -L https://nixos.org/nix/install | sh\n\n# Source Nix environment\nsource /home/developer/.nix-profile/etc/profile.d/nix.sh\n\n# Verify installation\nnix --version\n\n# Install development tools via Nix\nnix-env -iA nixpkgs.kubectl\nnix-env -iA nixpkgs.helm\nnix-env -iA nixpkgs.docker\nnix-env -iA nixpkgs.git\nnix-env -iA nixpkgs.nodejs\nnix-env -iA nixpkgs.rustc\nnix-env -iA nixpkgs.go\n</code></pre><h3>Install Additional Alpine Packages</h3><pre><code class=\"bash\"># Install development and system tools\napk add --no-cache \\\n  qemu \\\n  libvirt \\\n  virt-manager \\\n  docker \\\n  docker-compose \\\n  python3 \\\n  py3-pip \\\n  nodejs \\\n  npm \\\n  rust \\\n  cargo \\\n  go \\\n  openjdk17-jdk \\\n  postgresql \\\n  redis\n\n# Add user to docker group\nadduser developer docker\n</code></pre><h2></h2><h2>Step 8: Configure Auto-Start Sway</h2><h3>Create Desktop Session</h3><pre><code class=\"bash\"># Create desktop session file\ncat &gt; /usr/share/wayland-sessions/sway.desktop &lt;&lt; 'EOF'\n&#91;Desktop Entry&#93;\nName=Sway\nComment=An i3-compatible Wayland compositor\nExec=sway\nType=Application\nEOF\n\n# Create autostart script for developer user\ncat &gt; /home/developer/.bash&#95;profile &lt;&lt; 'EOF'\n# Start Sway if not already running\nif &#91; -z &quot;$WAYLAND&#95;DISPLAY&quot; &#93; &amp;&amp; &#91; &quot;$&#40;tty&#41;&quot; = &quot;/dev/tty1&quot; &#93;; then\n    exec sway\nfi\nEOF\n\n# Set proper ownership\nchown developer:developer /home/developer/.bash&#95;profile\n</code></pre><h2></h2><h2>Step 9: Verification and Testing</h2><h3>System Verification Checklist</h3><pre><code class=\"bash\"># 1. Verify musl libc usage\napk add pax-utils\nscanelf -n /usr/bin/python3\n# Should show: /lib/ld-musl-x86&#95;64.so.1\n\n# 2. Verify s6 services\ns6-svstat /var/service/&#42;\n# All services should show &quot;up&quot;\n\n# 3. Verify WiFi connectivity\nip addr show wlan0\nping -c 3 8.8.8.8\n# Should show IP address and successful ping\n\n# 4. Verify Wayland session\necho $WAYLAND&#95;DISPLAY\n# Should show wayland-0 or similar\n\n# 5. Verify graphics acceleration\nglxinfo | grep &quot;direct rendering&quot;\n# Should show &quot;direct rendering: Yes&quot;\n\n# 6. Verify audio\npamixer --get-volume\n# Should show volume percentage\n\n# 7. Verify Framework laptop hardware\nlscpu | grep &quot;Model name&quot;\n# Should show AMD Ryzen 7 7840HS\n\nlspci | grep VGA\n# Should show AMD Radeon 780M Graphics\n</code></pre><h3>Performance Testing</h3><pre><code class=\"bash\"># Boot time test\nsystemd-analyze  # If available, or use time commands\n\n# Memory usage\nfree -h\n# Should show &#126;180MB used with Sway running\n\n# CPU usage\nhtop\n# Should show minimal CPU usage at idle\n\n# Temperature monitoring\nsensors\n# Should show reasonable temperatures for Framework laptop\n</code></pre><h2></h2><h2>Step 10: Laptop Power & Usability Optimization</h2><p><em>Based on Alpine Linux Wiki \"Setting up a laptop\" guidance, adapted for Framework laptop + s6 supervision</em></p><h3>Framework Laptop Power Management</h3><pre><code class=\"bash\"># Install laptop power management tools\napk add brightnessctl cpufreqd acpi acpid hdparm\n\n# Install NetworkManager for easy WiFi management\napk add networkmanager wpa&#95;supplicant dhcpcd wireless-tools iputils\n\n# Install locking tools for security\napk add swaylock swayidle\n</code></pre><h3>ACPI Event Handling (Lid, Power, AC Events)</h3><pre><code class=\"bash\"># Create ACPI event handlers for Framework laptop\nmkdir -p /etc/acpi/handlers\n\n# Lid close handler &#40;suspend&#41;\ncat &gt; /etc/acpi/handlers/lid-close &lt;&lt; 'EOF'\n#!/bin/sh\n# Suspend on lid close\necho mem &gt; /sys/power/state\nEOF\n\n# Lid open handler &#40;resume&#41;\ncat &gt; /etc/acpi/handlers/lid-open &lt;&lt; 'EOF'\n#!/bin/sh\n# Lock screen on lid open\nswaylock --daemonize\nEOF\n\n# AC adapter plug/unplug handlers\ncat &gt; /etc/acpi/handlers/ac-adapter &lt;&lt; 'EOF'\n#!/bin/sh\n# Switch CPU governor based on AC status\nif &#91; &quot;$3&quot; = &quot;00000000&quot; &#93;; then\n    # Battery mode - powersave governor\n    cpupower frequency-set -g powersave\n    # Reduce brightness for battery saving\n    brightnessctl set 70%\nelse\n    # AC mode - performance governor\n    cpupower frequency-set -g performance\n    # Increase brightness for AC power\n    brightnessctl set 100%\nfi\nEOF\n\nchmod +x /etc/acpi/handlers/&#42;\n</code></pre><h3>s6 Service Configuration for Power Management</h3><pre><code class=\"bash\"># Create s6 services for power management\nmkdir -p /etc/s6/services/{acpid,cpufreqd,NetworkManager}\n\n# ACPI daemon service\ncat &gt; /etc/s6/services/acpid/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\nacpid -f\nEOF\n\n# CPU frequency daemon service\ncat &gt; /etc/s6/services/cpufreqd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\ncpufreqd\nEOF\n\n# NetworkManager service\ncat &gt; /etc/s6/services/NetworkManager/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\nNetworkManager --no-daemon\nEOF\n\nchmod +x /etc/s6/services/&#42;/run\n\n# Configure s6-rc service dependencies\nmkdir -p /etc/s6-rc/source/{acpid,cpufreqd,NetworkManager}\n\n# Service type definitions\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/acpid/type\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/cpufreqd/type\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/NetworkManager/type\n\n# Compile and activate services\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\ns6-rc change default\n</code></pre><h3>Backlight Control and Battery Optimization</h3><pre><code class=\"bash\"># Configure automatic backlight adjustment\ncat &gt; /usr/local/bin/battery-backlight &lt;&lt; 'EOF'\n#!/bin/sh\n# Battery-aware backlight control\nBATTERY&#95;PERCENT=$&#40;cat /sys/class/power&#95;supply/BAT0/capacity 2&gt;/dev/null || echo 100&#41;\nAC&#95;STATUS=$&#40;cat /sys/class/power&#95;supply/ADP1/online 2&gt;/dev/null || echo 1&#41;\n\nif &#91; &quot;$AC&#95;STATUS&quot; = &quot;0&quot; &#93;; then\n    # On battery - adjust brightness based on battery level\n    if &#91; &quot;$BATTERY&#95;PERCENT&quot; -lt 20 &#93;; then\n        brightnessctl set 30%\n    elif &#91; &quot;$BATTERY&#95;PERCENT&quot; -lt 50 &#93;; then\n        brightnessctl set 50%\n    else\n        brightnessctl set 70%\n    fi\nelse\n    # On AC - full brightness\n    brightnessctl set 100%\nfi\nEOF\n\nchmod +x /usr/local/bin/battery-backlight\n\n# Create systemd timer equivalent using cron for battery monitoring\necho &quot;&#42;/5 &#42; &#42; &#42; &#42; /usr/local/bin/battery-backlight&quot; | crontab -\n</code></pre><h3>WiFi Management with NetworkManager</h3><pre><code class=\"bash\"># Configure NetworkManager for easy WiFi management\ncat &gt; /etc/NetworkManager/NetworkManager.conf &lt;&lt; 'EOF'\n&#91;main&#93;\nplugins=keyfile\n\n&#91;device&#93;\nwifi.scan-rand-mac-address=no\nEOF\n\n# Start NetworkManager\ns6-rc change NetworkManager\n\n# Connect to WiFi using nmtui\nnmtui\n</code></pre><h3>Framework Laptop Specific Optimizations</h3><pre><code class=\"bash\"># Configure power management for Framework laptop\necho 'SUBSYSTEM==&quot;power&#95;supply&quot;, ATTR{type}==&quot;Battery&quot;, ATTR{status}==&quot;Discharging&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g powersave&quot;' &gt; /etc/udev/rules.d/99-framework-power.rules\n\necho 'SUBSYSTEM==&quot;power&#95;supply&quot;, ATTR{type}==&quot;Battery&quot;, ATTR{status}==&quot;Charging&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g ondemand&quot;' &gt; /etc/udev/rules.d/99-framework-charging.rules\n\n# Configure thermal management\necho 'SUBSYSTEM==&quot;thermal&quot;, ATTR{type}==&quot;cpu&quot;, ATTR{temp}==&quot;&#42;&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g ondemand&quot;' &gt; /etc/udev/rules.d/99-framework-thermal.rules\n\n# Reload udev rules\nudevadm control --reload-rules\n</code></pre><h2></h2><h2>🚀 <strong>Fast-Track Installation Steps</strong></h2><h3>Step A: Boot USB and Quick Network Setup</h3><pre><code class=\"bash\"># Boot from Alpine Extended ISO USB\n# Login as root &#40;no password&#41;\n\n# Quick WiFi setup\nsetup-interfaces\n# Select: wlan0, DHCP, enter SSID/password\n# Or use eth0 for wired connection\n\n# Verify connection\nping -c 3 dl-cdn.alpinelinux.org\n</code></pre><h3>Step B: Run Fast-Track Installer</h3><pre><code class=\"bash\">setup-alpine\n</code></pre><p><strong>Quick Answers (optimized for speed):</strong></p><pre><code>Keyboard:      us\nHostname:      xy-framework-alpine\nInterface:     wlan0 &#40;or eth0&#41;\nIP address:    dhcp\nRoot password: &#91;set secure password&#93;\nTimezone:      America/Los&#95;Angeles &#40;or yours&#41;\nProxy:         none\nMirror:        f &#40;finds fastest&#41;\nSSH server:    openssh\nDisk:          nvme0n1\nHow to use:    sys &#40;creates bootable system with GRUB&#41;\nErase disk:    y\n</code></pre><p><strong>⚠️ CRITICAL: Do NOT reboot yet!</strong></p><h3>Step C: Essential Post-Install (Single Chroot Session)</h3><pre><code class=\"bash\"># Enter the new system &#40;setup-alpine mounts to /mnt&#41;\nchroot /mnt\n\n# Update system first\napk update &amp;&amp; apk upgrade\n\n# Create admin user 'xy'\nadduser xy\nadduser xy wheel\n\n# Install and configure sudo\napk add sudo\necho '%wheel ALL=&#40;ALL&#41; ALL' &gt;&gt; /etc/sudoers\n\n# Verify GRUB is installed &#40;setup-alpine should have done this&#41;\napk add grub grub-efi efibootmgr\ngrub-install --target=x86&#95;64-efi --efi-directory=/boot/efi --bootloader-id=alpine\ngrub-mkconfig -o /boot/grub/grub.cfg\n\n# Install Framework hardware essentials now\napk add --no-cache \\\n  linux-firmware-amdgpu \\\n  linux-firmware-iwlwifi \\\n  mesa-dri-gallium mesa-va-gallium mesa-vulkan-radeon \\\n  acpid tlp brightnessctl \\\n  wpa&#95;supplicant wireless-tools\n\n# Enable critical services\nrc-update add acpid default\nrc-update add tlp default\nrc-update add wpa&#95;supplicant default\n\n# Exit chroot\nexit\n\n# Reboot to installed system\nreboot\n# Remove USB when prompted\n</code></pre><h3>Step D: First Boot - Install Sway</h3><pre><code class=\"bash\"># Login as 'xy' with your password\n\n# Install Sway and all dependencies\nsudo apk add --no-cache \\\n  sway foot waybar mako \\\n  grim slurp wl-clipboard \\\n  seatd \\\n  pipewire pipewire-alsa wireplumber pamixer \\\n  firefox \\\n  ttf-dejavu ttf-noto ttf-noto-emoji \\\n  dbus elogind\n\n# Add user to required groups\nsudo adduser xy video\nsudo adduser xy input\nsudo adduser xy seat\n\n# Enable services\nsudo rc-update add seatd default\nsudo rc-update add dbus default\nsudo rc-update add elogind default\n\n# Start services now\nsudo rc-service seatd start\nsudo rc-service dbus start\nsudo rc-service elogind start\n</code></pre><h3>Step E: Configure Sway (Framework-Optimized)</h3><pre><code class=\"bash\">mkdir -p &#126;/.config/sway\n\ncat &gt; &#126;/.config/sway/config &lt;&lt; 'EOF'\n# Framework-optimized Sway config\nset $mod Mod4\n\n# Framework display &#40;adjust if needed&#41;\noutput eDP-1 scale 1\n\n# Input configuration\ninput &quot;type:keyboard&quot; {\n    xkb&#95;layout us\n}\n\ninput &quot;type:touchpad&quot; {\n    tap enabled\n    natural&#95;scroll enabled\n}\n\n# Key bindings\nbindsym $mod+Return exec foot\nbindsym $mod+d exec firefox\nbindsym $mod+Shift+q kill\nbindsym $mod+Shift+e exec swaynag -t warning -m 'Exit Sway?' -b 'Yes' 'swaymsg exit'\n\n# Window management\nbindsym $mod+h focus left\nbindsym $mod+j focus down\nbindsym $mod+k focus up\nbindsym $mod+l focus right\n\n# Brightness controls &#40;Framework function keys&#41;\nbindsym XF86MonBrightnessDown exec brightnessctl set 5%-\nbindsym XF86MonBrightnessUp exec brightnessctl set +5%\n\n# Volume controls\nbindsym XF86AudioLowerVolume exec pamixer --decrease 5\nbindsym XF86AudioRaiseVolume exec pamixer --increase 5\nbindsym XF86AudioMute exec pamixer --toggle-mute\n\n# Status bar\nbar {\n    position top\n    status&#95;command waybar\n}\nEOF\n\n# Test Sway\nsway\n</code></pre><h3>Step F: Install s6 Suite</h3><pre><code class=\"bash\"># Exit Sway &#40;Mod+Shift+e&#41; or open terminal in Sway\n\n# Install s6 suite\nsudo apk add --no-cache \\\n  s6 s6-rc s6-linux-init \\\n  s6-portable-utils s6-dns \\\n  execline\n\n# s6 is now available for process supervision\n# OpenRC remains as PID 1 for simplicity and stability\n</code></pre><h3>Step G: Verify System</h3><pre><code class=\"bash\"># Check hostname\nhostname\n# Output: xy-framework-alpine\n\n# Check user and groups\nid\n# Should show: wheel, video, input, seat\n\n# Check init system\nps -p 1 -o comm=\n# Output: init &#40;OpenRC&#41;\n\n# Check GRUB boot entries\nsudo efibootmgr -v\n# Should show 'alpine' as first entry\n\n# Check graphics\nglxinfo | grep &quot;OpenGL renderer&quot;\n# Should show: AMD Radeon Graphics &#40;Radeon 780M&#41;\n\n# Check WiFi\nip addr show wlan0\n# Should show IP address\n\n# Check Sway is working\necho $WAYLAND&#95;DISPLAY\n# Should show wayland-&#42; if in Sway\n</code></pre><h3>Success Criteria</h3><p>✅ <strong>Boot</strong>: Auto-boots from NVMe SSD via GRUB<br /> ✅ <strong>Persistence</strong>: All changes saved to ext4 filesystem<br /> ✅ <strong>User</strong>: <code>xy</code> with sudo access<br /> ✅ <strong>Hostname</strong>: <code>xy-framework-alpine</code><br /> ✅ <strong>Graphics</strong>: Sway Wayland with AMD acceleration<br /> ✅ <strong>Init</strong>: s6 suite installed (OpenRC as PID 1)<br /> ✅ <strong>Network</strong>: WiFi auto-connects on boot<br /> ✅ <strong>Power</strong>: TLP and ACPI active for battery optimization<br /> ✅ <strong>Audio</strong>: PipeWire working with Sway<br /><h2></h2></p><h2>Development Environment Setup</h2><pre><code class=\"bash\"># Create development directories\nmkdir -p /home/developer/{projects,bin,config}\n\n# Configure git\ngit config --global user.name &quot;Developer&quot;\ngit config --global user.email &quot;developer@framework.local&quot;\n\n# Create development aliases\ncat &gt;&gt; /home/developer/.bashrc &lt;&lt; 'EOF'\n# Development aliases\nalias ll='ls -la'\nalias la='ls -A'\nalias l='ls -CF'\nalias ..='cd ..'\nalias ...='cd ../..'\nalias grep='grep --color=auto'\nalias fgrep='fgrep --color=auto'\nalias egrep='egrep --color=auto'\n\n# Docker aliases\nalias d='docker'\nalias dc='docker-compose'\nalias dps='docker ps'\nalias dpsa='docker ps -a'\n\n# Kubernetes aliases\nalias k='kubectl'\nalias kgp='kubectl get pods'\nalias kgs='kubectl get services'\nalias kgd='kubectl get deployments'\nEOF\n\n# Set proper ownership\nchown -R developer:developer /home/developer\n</code></pre><h2></h2><h2></h2><h2>🚀 <strong>Fast-Track Troubleshooting</strong></h2><h3>Quick Fixes for Common Issues</h3><p><strong>WiFi doesn't auto-connect on boot:</strong><pre><code class=\"bash\">sudo rc-update add wpa&#95;supplicant default\nsudo rc-service wpa&#95;supplicant restart\n</code></pre></p><p><strong>Sway won't start:</strong><pre><code class=\"bash\"># Verify groups\ngroups\n# Must include: video, input, seat\n\n# Check seatd is running\nsudo rc-service seatd status\n\n# Start manually\nsudo rc-service seatd start\n</code></pre></p><p><strong>Black screen with AMD graphics:</strong><pre><code class=\"bash\"># Ensure firmware is installed\napk info linux-firmware-amdgpu\n\n# If missing\nsudo apk add linux-firmware-amdgpu\nsudo reboot\n</code></pre></p><p><strong>GRUB doesn't auto-boot:</strong><pre><code class=\"bash\"># Check EFI boot order\nsudo efibootmgr -v\n\n# Reinstall GRUB if needed\nsudo grub-install --target=x86&#95;64-efi --efi-directory=/boot/efi --bootloader-id=alpine\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n\n# Set boot order in BIOS &#40;F2&#41;\n</code></pre></p><p><strong>Audio not working:</strong><pre><code class=\"bash\"># Check PipeWire is running\npw-cli ls Node\n\n# If not running\nsudo rc-service pipewire start\n</code></pre></p><h2></h2><h2>Troubleshooting</h2><h3>Common Issues and Solutions</h3><p><strong>Issue: WiFi not connecting</strong><pre><code class=\"bash\"># Check WiFi interface\nip link show wlan0\n\n# Restart WiFi service\nrc-service wpa&#95;supplicant restart\n\n# Check WiFi configuration\ncat /etc/wpa&#95;supplicant/wpa&#95;supplicant.conf\n</code></pre></p><p><strong>Issue: Sway not starting</strong><pre><code class=\"bash\"># Check seatd service\ns6-svstat /var/service/seatd\n\n# Check user groups\ngroups developer\n# Should include: video, seat, audio\n\n# Check Wayland session\necho $WAYLAND&#95;DISPLAY\n</code></pre></p><p><strong>Issue: Graphics not working</strong><pre><code class=\"bash\"># Check graphics drivers\napk list | grep mesa\n\n# Check firmware\napk list | grep linux-firmware-amdgpu\n\n# Restart display manager\nkillall sway\n# Login again and start Sway\n</code></pre></p><p><strong>Issue: Audio not working</strong><pre><code class=\"bash\"># Check audio devices\npamixer --list-sources\npamixer --list-sinks\n\n# Restart audio services\nrc-service pipewire restart\nrc-service wireplumber restart\n</code></pre></p><h3>Performance Optimization</h3><p><strong>Memory Optimization:</strong><pre><code class=\"bash\"># Check memory usage\nfree -h\n\n# Optimize Sway configuration for lower memory usage\n# Edit &#126;/.config/sway/config to remove unnecessary components\n</code></pre></p><p><strong>Battery Optimization:</strong><pre><code class=\"bash\"># Check power consumption\npowertop\n\n# Configure CPU governor for battery saving\ncpupower frequency-set -g powersave\n</code></pre></p><h2></h2><h2>Success Verification</h2><h3>Final System Check</h3><p>After completing all steps, your Framework laptop should have:</p><p>✅ <strong>Alpine Linux</strong> running with musl libc<br /> ✅ <strong>s6 init system</strong> managing services (~200KB footprint)<br /> ✅ <strong>Sway Wayland</strong> compositor providing keyboard-driven desktop<br /> ✅ <strong>WiFi connectivity</strong> with Framework laptop firmware<br /> ✅ <strong>Graphics acceleration</strong> with Radeon 780M drivers<br /> ✅ <strong>Audio support</strong> with PipeWire<br /> ✅ <strong>Development tools</strong> including Nix package manager<br /> ✅ <strong>Optimized performance</strong> for Framework laptop hardware<br /></p><h3>Expected Performance Metrics</h3><ul><li><strong>Boot time</strong>: ~3 seconds</li><li><strong>Memory usage</strong>: ~180MB with Sway running</li><li><strong>CPU usage</strong>: ~5% at idle</li><li><strong>Battery life</strong>: Optimized for Framework laptop</li><li><strong>Development ready</strong>: Full toolchain available<h2></h2></li></ul><h2>Next Steps</h2><h3>Development Workflow</h3><ol><li><strong>Start Sway</strong>: Login and Sway will start automatically</li><li><strong>Open terminal</strong>: <code>Mod+Return</code> to open foot terminal</li><li><strong>Access applications</strong>: <code>Mod+d</code> for application launcher</li><li><strong>Switch workspaces</strong>: <code>Mod+1-5</code> for workspace switching</li><li><strong>Development</strong>: Full Nix and Alpine package ecosystem available</li></ol><h3>Further Customization</h3><ul><li><strong>Sway configuration</strong>: Customize <code>&#126;/.config/sway/config</code></li><li><strong>Waybar configuration</strong>: Customize <code>&#126;/.config/waybar/</code></li><li><strong>Nix packages</strong>: Install additional development tools</li><li><strong>Alpine packages</strong>: Use <code>apk</code> for system packages</li></ul><h3>Migration Path</h3><p>This setup provides the foundation for:</p><ul><li><strong>SixOS contribution</strong>: s6 + musl expertise</li><li><strong>Kubernetes development</strong>: Container-ready environment</li><li><strong>Full-stack development</strong>: All modern toolchains available<h2></h2></li></ul><p><strong>The transformation is complete: Your Framework laptop now runs Alpine Linux with s6 supervision and Sway Wayland, embodying the beauty of musl libc and Unix philosophy in a modern, repairable laptop.</strong><h2></h2></p><p><em>← <a href='/12025-10/'>Return to Main Index</a></em> | <em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em>Continue to Chapter xbn: The Eastern Capital → <a href='/12025-10/xbn-the-eastern-capital-vzxw.html'>kae3g xbn</a></em></p>",
  "hash" : "2025-10-22T10:21:16.800527416Z-31259"
}