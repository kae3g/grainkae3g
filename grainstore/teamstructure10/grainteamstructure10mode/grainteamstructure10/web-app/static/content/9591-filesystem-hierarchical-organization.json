{
  "slug" : "9591-filesystem-hierarchical-organization",
  "meta" : {
    "slug" : "9591-filesystem-hierarchical-organization",
    "title" : "kae3g 9590: The Filesystem - Hierarchical Organization",
    "filename" : "9591-filesystem-hierarchical-organization.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9590: The Filesystem - Hierarchical Organization</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 3</strong> | <strong>Reading Time: 16 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>How filesystems organize data hierarchically (directories, files, paths)</li><li>Inodes: The hidden identity system behind files</li><li>Hard links vs soft links (symlinks)</li><li>The Unix filesystem hierarchy (/, /home, /etc, /usr, /var)</li><li>Why \"everything is a file\" in Unix</li><li>Filesystem operations (create, read, update, delete)</li><li>How the House of Wisdom organized manuscripts (historical parallel)<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9560-text-files-universal-format'>9560: Text Files</a></strong> - What files contain</li><li><strong><a href='/12025-10/9570-processes-programs-in-motion'>9570: Processes</a></strong> - What uses files</li><li><strong><a href='/12025-10/9580-memory-management'>9580: Memory Management</a></strong> - Temporary storage (RAM) vs persistent (disk)<h2></h2></li></ul><h2>The Persistent Garden</h2><p><strong>Memory</strong> (Essay 9580): Temporary, fast, expensive (like water - flows and evaporates)</p><p><strong>Filesystem</strong>: Permanent, slower, cheaper (like seeds - stored for years)</p><p><strong>Plant lens</strong>: <strong>\"Filesystem is the seed bank—organized storage for knowledge that survives winter (power loss).\"</strong></p><p><strong>Key difference</strong>: RAM is erased when power off. Filesystem persists.<h2></h2></p><h2>Hierarchical Organization</h2><p><strong>Filesystems are trees</strong> (hierarchical, like organizational charts):</p><pre><code>/  &#40;root - top of tree&#41;\n├── home/\n│   ├── alice/\n│   │   ├── documents/\n│   │   │   └── essay.md\n│   │   └── projects/\n│   └── bob/\n├── etc/\n│   ├── ssh/\n│   │   └── sshd&#95;config\n│   └── nginx/\n└── usr/\n    └── bin/\n        ├── python3\n        └── clojure\n</code></pre><p><strong>Every item</strong> is either:</p><ul><li><strong>File</strong> (contains data: text, binary, whatever)</li><li><strong>Directory</strong> (contains other files/directories)</li></ul><p><strong>Paths</strong> describe location:</p><ul><li><strong>Absolute</strong>: <code>/home/alice/essay.md</code> (from root)</li><li><strong>Relative</strong>: <code>../bob/</code> (from current location)</li></ul><p><strong>Plant lens</strong>: <strong>\"Directories are branches, files are fruits/seeds, paths are routes through the garden.\"</strong><h2></h2></p><h2>Inodes: The Hidden Identity</h2><p><strong>What you see</strong>:<pre><code class=\"bash\">ls -l\n# -rw-r--r--  1 alice  staff  1024 Oct 10 12:00 essay.md\n</code></pre></p><p><strong>What the filesystem sees</strong>:</p><pre><code>Inode 12345:\n  - Type: regular file\n  - Permissions: rw-r--r--\n  - Owner: alice &#40;UID 501&#41;\n  - Size: 1024 bytes\n  - Timestamps: created, modified, accessed\n  - Data blocks: &#91;block 8000, block 8001&#93;\n  - Link count: 1\n</code></pre><p><strong>The filename</strong> (<code>essay.md</code>) is just a <strong>pointer</strong> to the inode!</p><p><strong>Inode</strong> = File's identity (metadata + data location)</p><p><strong>Directory entry</strong> = Name → Inode mapping</p><h3>Why This Matters</h3><p><strong>Multiple names, one file</strong> (hard links):<pre><code class=\"bash\"># Create file\necho &quot;Hello&quot; &gt; original.txt\n\n# Create hard link &#40;another name for same inode&#41;\nln original.txt backup.txt\n\n# Both point to SAME inode!\nls -li\n# 12345 -rw-r--r-- 2 alice original.txt\n# 12345 -rw-r--r-- 2 alice backup.txt\n# &#40;Same inode number: 12345&#41;\n\n# Edit one:\necho &quot;World&quot; &gt;&gt; original.txt\n\n# Other reflects change &#40;same file!&#41;\ncat backup.txt\n# Output: Hello\n#         World\n</code></pre></p><p><strong>Plant lens</strong>: <strong>\"Inode is the plant's DNA, filenames are labels we put on it.\"</strong><h2></h2></p><h2>Hard Links vs Soft Links (Symlinks)</h2><h3>Hard Links</h3><p><strong>Points to inode directly</strong>:<pre><code class=\"bash\">ln original.txt hardlink.txt\n\n# If you delete original.txt:\nrm original.txt\n\n# hardlink.txt still works! &#40;inode still exists&#41;\ncat hardlink.txt\n# Output: &#40;file contents&#41;\n</code></pre></p><p><strong>Limitation</strong>: Can't link across filesystems (inodes are per-filesystem).</p><h3>Soft Links (Symlinks)</h3><p><strong>Points to filename</strong> (like a shortcut):<pre><code class=\"bash\">ln -s original.txt symlink.txt\n\n# If you delete original.txt:\nrm original.txt\n\n# symlink.txt breaks! &#40;points to non-existent file&#41;\ncat symlink.txt\n# Error: No such file or directory\n</code></pre></p><p><strong>Benefit</strong>: Can link across filesystems, can link to directories.</p><p><strong>Comparison</strong>:</p><table><thead><tr><th>Hard Link</th><th>Soft Link</th></tr></thead><tbody><tr><td>Points to inode</td><td>Points to filename</td></tr><tr><td>Survives file deletion</td><td>Breaks if target deleted</td></tr><tr><td>Same filesystem only</td><td>Cross-filesystem OK</td></tr><tr><td>Can't link directories</td><td>Can link directories</td></tr></tbody></table><p><strong>Plant lens</strong>: </p><ul><li>Hard link = <strong>clones</strong> (both are the same plant)</li><li>Soft link = <strong>signpost</strong> (points to where plant is)<h2></h2></li></ul><h2>The Unix Filesystem Hierarchy</h2><p><strong>Standard layout</strong> (Filesystem Hierarchy Standard - FHS):</p><pre><code>/              Root &#40;top of tree&#41;\n├── bin/       Essential binaries &#40;ls, cat, sh&#41;\n├── boot/      Boot loader files &#40;kernel&#41;\n├── dev/       Device files &#40;hard drives, terminals&#41;\n├── etc/       Configuration files &#40;system-wide&#41;\n├── home/      User home directories\n├── lib/       Shared libraries &#40;like .dll on Windows&#41;\n├── opt/       Optional software packages\n├── proc/      Virtual filesystem &#40;process info&#41;\n├── root/      Root user's home\n├── tmp/       Temporary files &#40;cleared on reboot&#41;\n├── usr/       User programs and data\n│   ├── bin/   User binaries\n│   ├── lib/   User libraries\n│   └── share/ Shared data &#40;docs, man pages&#41;\n└── var/       Variable data &#40;logs, databases, caches&#41;\n</code></pre><p><strong>Key directories</strong>:</p><p><strong><code>/etc/</code></strong>: Configuration as text files<pre><code class=\"bash\">ls /etc/\n# hosts, ssh/, nginx/, fstab, passwd, ...\n</code></pre></p><p><strong><code>/home/</code></strong>: Your files<pre><code class=\"bash\">ls /home/alice/\n# documents/, downloads/, .config/, ...\n</code></pre></p><p><strong><code>/var/log/</code></strong>: System logs<pre><code class=\"bash\">tail /var/log/system.log\n# See what's happening on your system\n</code></pre></p><h2></h2><h2>\"Everything is a File\"</h2><p><strong>Unix philosophy</strong>: Treat everything uniformly.</p><p><strong>Not just</strong> regular files, but:</p><h3>Device Files (<code>/dev/</code>)</h3><pre><code class=\"bash\"># Hard drive\nls -l /dev/sda\n# brw-rw---- 1 root disk 8, 0 Oct 10 12:00 /dev/sda\n\n# Terminal\nls -l /dev/tty\n# crw-rw-rw- 1 root tty 5, 0 Oct 10 12:00 /dev/tty\n\n# Random number generator\ncat /dev/urandom | head -c 10 | xxd\n# Generates random bytes!\n</code></pre><p><strong>Interact with hardware</strong> as if it's a file (read/write).</p><h3>Process Info (<code>/proc/</code>)</h3><pre><code class=\"bash\"># Process 1234's info\ncat /proc/1234/status\n# Shows: memory usage, state, etc.\n\n# CPU info\ncat /proc/cpuinfo\n\n# Memory info\ncat /proc/meminfo\n</code></pre><p><strong>Virtual filesystem</strong>: Kernel generates content on-the-fly (not real files on disk).</p><h3>Pipes (FIFOs)</h3><pre><code class=\"bash\"># Create named pipe\nmkfifo mypipe\n\n# In one terminal:\ncat mypipe\n\n# In another terminal:\necho &quot;Hello through pipe!&quot; &gt; mypipe\n\n# First terminal shows: Hello through pipe!\n</code></pre><p><strong>Looks like a file</strong>, acts like a pipe (Essay 9550 - command line).<h2></h2></p><h2>Filesystem Operations</h2><h3>Create</h3><pre><code class=\"bash\"># File\ntouch newfile.txt\n# Or:\necho &quot;content&quot; &gt; newfile.txt\n\n# Directory\nmkdir newdir\n\n# Nested directories\nmkdir -p path/to/nested/dir\n</code></pre><h3>Read</h3><pre><code class=\"bash\"># Entire file\ncat file.txt\n\n# First 10 lines\nhead -10 file.txt\n\n# Last 10 lines\ntail -10 file.txt\n\n# Follow file &#40;for logs&#41;\ntail -f /var/log/system.log\n</code></pre><h3>Update</h3><pre><code class=\"bash\"># Append\necho &quot;more&quot; &gt;&gt; file.txt\n\n# Overwrite\necho &quot;new content&quot; &gt; file.txt\n\n# Edit interactively\nvim file.txt\n</code></pre><h3>Delete</h3><pre><code class=\"bash\"># File\nrm file.txt\n\n# Directory &#40;empty&#41;\nrmdir emptydir/\n\n# Directory &#40;with contents&#41;\nrm -r fulldir/\n\n# Be careful! No undo!\n</code></pre><h2></h2><h2>Filesystem Metadata</h2><p><strong>Every file/directory</strong> has metadata:</p><pre><code class=\"bash\">stat essay.md\n\n# Output:\n#   File: essay.md\n#   Size: 1024        Blocks: 8          IO Block: 4096\n#   Device: 8,1       Inode: 12345       Links: 1\n#   Access: &#40;0644/-rw-r--r--&#41;  Uid: &#40;501/alice&#41;   Gid: &#40;20/staff&#41;\n#   Access: 2025-10-10 12:00:00\n#   Modify: 2025-10-10 12:00:00\n#   Change: 2025-10-10 12:00:00\n</code></pre><p><strong>Key metadata</strong>:</p><ul><li><strong>Size</strong>: Bytes</li><li><strong>Permissions</strong>: Who can read/write/execute</li><li><strong>Owner</strong>: User and group</li><li><strong>Timestamps</strong>: Access, modify, change (ctime)</li><li><strong>Inode number</strong>: File's identity</li><li><strong>Links</strong>: How many names point to this inode<h2></h2></li></ul><h2>The House of Wisdom Parallel</h2><p><strong>Islamic scholars</strong> (Essay 9505) organized manuscripts in the <strong>House of Wisdom</strong>:</p><p><strong>Their system</strong>:</p><pre><code>House of Wisdom &#40;Baghdad, 800-1200 CE&#41;\n├── Translation wing/\n│   ├── Greek manuscripts/\n│   ├── Persian manuscripts/\n│   └── Indian manuscripts/\n├── Mathematics section/\n├── Medicine section/\n├── Astronomy section/\n└── Philosophy section/\n</code></pre><p><strong>Hierarchical organization</strong> (like filesystem!)</p><p><strong>Librarians</strong> maintained:</p><ul><li><strong>Catalog</strong> (like inodes - metadata about each manuscript)</li><li><strong>Location</strong> (which shelf, which room - like filesystem path)</li><li><strong>Cross-references</strong> (like soft links - \"see also...\")</li><li><strong>Preservation</strong> (copying degraded texts - like backups!)</li></ul><p><strong>Same principles</strong>:</p><ul><li>Hierarchical structure (easier to find things)</li><li>Metadata (author, date, subject)</li><li>Paths (navigation system)</li><li>Preservation (redundancy, copying)</li></ul><p><strong>Modern filesystem</strong> = <strong>Digital library catalog</strong> at massive scale!<h2></h2></p><h2>Try This</h2><h3>Exercise 1: Explore Your Filesystem</h3><pre><code class=\"bash\"># Where am I?\npwd\n# Output: /home/alice\n\n# What's here?\nls -la\n\n# What's in parent?\nls ../\n\n# Navigate\ncd /etc\nls\n\n# Back home\ncd &#126;\n</code></pre><p><strong>Observe</strong>: Hierarchical structure (directories contain directories).<h2></h2></p><h3>Exercise 2: Inode Investigation</h3><pre><code class=\"bash\"># Create file\necho &quot;Test&quot; &gt; file1.txt\n\n# Check inode\nls -li file1.txt\n# Output: 12345 -rw-r--r-- 1 alice file1.txt\n\n# Create hard link\nln file1.txt file2.txt\n\n# Check inode &#40;same!&#41;\nls -li file&#42;.txt\n# Output: 12345 -rw-r--r-- 2 alice file1.txt\n#         12345 -rw-r--r-- 2 alice file2.txt\n\n# Create symlink\nln -s file1.txt file3.txt\n\n# Check inode &#40;different!&#41;\nls -li file&#42;.txt\n# Output: 12345 -rw-r--r-- 2 alice file1.txt\n#         12345 -rw-r--r-- 2 alice file2.txt\n#         67890 lrwxrwxrwx 1 alice file3.txt -&gt; file1.txt\n</code></pre><p><strong>Observe</strong>: Hard links share inode, symlinks have own inode.<h2></h2></p><h3>Exercise 3: \"Everything is a File\"</h3><pre><code class=\"bash\"># Read from device\nhead -c 10 /dev/urandom | xxd\n# Random bytes!\n\n# Process info\ncat /proc/cpuinfo | head -10\n\n# Write to log &#40;if you have permission&#41;\necho &quot;Test message&quot; | sudo tee -a /var/log/test.log\n</code></pre><p><strong>Observe</strong>: Devices, processes, logs all accessible as files.<h2></h2></p><h2>Going Deeper</h2><h3>Related Essays</h3><ul><li><strong><a href='/12025-10/9560-text-files-universal-format'>9560: Text Files</a></strong> - What files contain</li><li><strong><a href='/12025-10/9570-processes-programs-in-motion'>9570: Processes</a></strong> - What uses files</li><li><strong><a href='/12025-10/9505-house-of-wisdom-knowledge-gardens'>9505: House of Wisdom</a></strong> - Manuscript organization</li><li><strong><a href='/12025-10/9595-package-managers-dependency-resolution'>9595: Package Managers</a></strong> - Filesystem + metadata at scale</li></ul><h3>External Resources</h3><ul><li><strong>\"The Linux Filesystem Explained\"</strong> - Comprehensive guide</li><li><strong><code>man hier</code></strong> - Filesystem hierarchy documentation</li><li><strong><code>man inode</code></strong> - Inode structure details</li><li><strong>ext4, btrfs, ZFS</strong> - Modern filesystem implementations<h2></h2></li></ul><h2>Reflection Questions</h2><ol><li><strong>Why hierarchical?</strong> (Why not flat? What about tags/labels instead of directories?)</li><li><strong>Is the FHS optimal?</strong> (Why <code>/usr/bin</code> vs <code>/bin</code>? Historical reasons or good design?)</li><li><strong>Should everything be a file?</strong> (Unix says yes. Windows uses more abstractions. Who's right?)</li><li><strong>What if filesystems were immutable?</strong> (Nix store is append-only! What if ALL filesystems were?)</li><li><strong>How would you organize 10 million files?</strong> (Hierarchical structure helps, but at what depth?)<h2></h2></li></ol><h2>Summary</h2><p><strong>Filesystems provide</strong>:</p><ul><li><strong>Hierarchical organization</strong> (directories contain directories/files)</li><li><strong>Persistent storage</strong> (survives power loss, unlike RAM)</li><li><strong>Metadata</strong> (permissions, timestamps, ownership)</li><li><strong>Uniform interface</strong> (\"everything is a file\")</li></ul><p><strong>Key Concepts</strong>:</p><ul><li><strong>Inodes</strong>: File identity (metadata + data blocks)</li><li><strong>Paths</strong>: Navigation (absolute vs relative)</li><li><strong>Hard links</strong>: Multiple names, same inode</li><li><strong>Soft links</strong>: Pointer to filename (breaks if target deleted)</li></ul><p><strong>Unix Filesystem Hierarchy</strong>:</p><ul><li><code>/</code> - Root (top of tree)</li><li><code>/home/</code> - User files</li><li><code>/etc/</code> - Configuration (text files!)</li><li><code>/var/</code> - Variable data (logs, caches)</li><li><code>/usr/</code> - User programs and libraries</li></ul><p><strong>\"Everything is a File\"</strong>:</p><ul><li>Regular files (data)</li><li>Directories (containers)</li><li>Devices (hardware access)</li><li>Processes (<code>/proc/</code> - virtual)</li><li>Pipes (IPC via filesystem)</li></ul><p><strong>Key Insights</strong>:</p><ul><li><strong>Hierarchy enables organization</strong> at scale (millions of files)</li><li><strong>Inodes separate identity from naming</strong> (powerful abstraction)</li><li><strong>Text configuration</strong> (<code>/etc/</code>) enables version control, portability</li><li><strong>Virtual filesystems</strong> (<code>/proc/</code>, <code>/dev/</code>) show power of \"everything is a file\"</li></ul><p><strong>Historical Parallel</strong>:</p><ul><li><strong>House of Wisdom</strong> organized manuscripts hierarchically</li><li><strong>Modern filesystem</strong> = digital library catalog</li><li><strong>Same principles</strong>: hierarchy, metadata, preservation, cross-references</li></ul><p><strong>In the Valley</strong>:</p><ul><li><strong>We respect the filesystem</strong> (persistent garden, seed bank)</li><li><strong>We use hierarchy wisely</strong> (not too deep, not too flat)</li><li><strong>We version control config</strong> (<code>/etc/</code> is text - git it!)</li><li><strong>We understand inodes</strong> (enables hard links, reflinks, deduplication)</li></ul><p><strong>Plant lens</strong>: <strong>\"Filesystem is the organized seed bank—hierarchical storage with metadata, preserving knowledge through winters (power cycles).\"</strong><h2></h2></p><p><strong>Next</strong>: We'll explore <strong>permissions</strong>—who can read, write, and execute files. The security model that keeps your seeds safe from unauthorized access!<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9580-memory-management'>9580 (memory management)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9592-permissions-who-can-do-what'>9592 (permissions who can do what)</a></p><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 3</li><li><strong>Prerequisites</strong>: 9560, 9570, 9580</li><li><strong>Concepts</strong>: Filesystem, hierarchy, inodes, hard links, soft links, FHS, \"everything is a file\"</li><li><strong>Next Concepts</strong>: Permissions, access control, security model</li><li><strong>Plant Lens</strong>: Seed bank (persistent storage), branches (directories), fruits (files), routes (paths)</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T10:21:16.802527339Z-14310"
}