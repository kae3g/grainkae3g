{
  "slug" : "7002-therhizomesys",
  "meta" : {
    "slug" : "7002-therhizomesys",
    "title" : "7002. The Rhizome System: Framework Laptop + Alpine Linux + s6 + musl + Sway Wayland",
    "filename" : "7002-therhizomesys.md",
    "series" : "technical-implementation",
    "sort-order" : 7002,
    "source-dir" : "writings"
  },
  "html" : "<h1>kae3g 7002: The Rhizome System — Framework Laptop + Alpine Linux + s6 + musl + Sway Wayland</h1><p><strong>Timestamp:</strong> 12025-10-21&ndash;coldriver-tundra<br /> <strong>Series:</strong> Technical Implementation<br /> <strong>Category:</strong> Framework Laptop, Alpine Linux, s6 Init, musl libc, Sway Wayland<br /> <strong>Reading Time:</strong> 45 minutes</p><blockquote><p> <strong>\"The rhizome grows underground, connecting nodes without hierarchy. Like the Framework laptop's modular design, Alpine Linux's musl libc purity, and s6's supervision philosophy, this system embodies the rhizomatic nature of modern computing—distributed, connected, and beautifully minimal. This comprehensive guide provides both fast-track installation (20-30 minutes) and detailed configuration options for the perfect musl-native development environment.\"</strong> <h2></h2></p></blockquote><h2>Multi-AI Consensus: The Perfect Stack</h2><p><strong>All AI systems (Meta, DeepSeek, Gemini, Grok, ChatGPT, Claude) converge on this optimal configuration:</strong></p><ul><li><strong>OS</strong>: Alpine Linux Extended ISO (v3.22) — musl libc, minimal, secure</li><li><strong>Init System</strong>: s6 supervision suite — musl-native, ~200KB footprint</li><li><strong>GUI</strong>: Sway Wayland — keyboard-driven, configuration-as-code, minimal</li><li><strong>Hardware</strong>: Framework 16 AMD Ryzen 7 7840HS + Radeon 780M Graphics</li><li><strong>Package Manager</strong>: apk + Nix (for reproducible development environments)</li></ul><p><strong>Installation Options:</strong></p><ul><li><strong>🚀 Fast-Track</strong>: 20-30 minutes, no encryption, user <code>xy</code>, hostname <code>xy-framework-alpine</code></li><li><strong>🔧 Detailed</strong>: Comprehensive configuration with power management and laptop optimizations</li></ul><p><strong>Why This Stack:</strong></p><ul><li><strong>Musl libc purity</strong> — Clean, auditable C codebase, minimal attack surface</li><li><strong>s6 supervision</strong> — Unix philosophy, process supervision = container supervision</li><li><strong>Sway minimalism</strong> — Developer efficiency, keyboard-driven workflow</li><li><strong>Framework optimization</strong> — Hardware-specific firmware and drivers included<h2></h2></li></ul><h2>Prerequisites</h2><h3>Hardware Requirements</h3><ul><li><strong>Framework 16 Laptop</strong> (AMD Ryzen 7 7840HS, Radeon 780M Graphics)</li><li><strong>BIOS Version</strong>: Insyde IFGP6.03.05 or compatible</li><li><strong>RAM</strong>: 32GB recommended (16GB minimum)</li><li><strong>Storage</strong>: 1TB NVMe SSD (Framework's standard NVMe drive)</li><li><strong>Network</strong>: WiFi or Ethernet connection for initial setup</li></ul><h3>Software Requirements</h3><ul><li><strong>USB Drive</strong>: 8GB+ USB-C or USB-A drive for Alpine Extended ISO</li><li><strong>Host System</strong>: Any Linux/macOS/Windows system for creating bootable USB</li><li><strong>Network Access</strong>: Internet connection for package downloads</li></ul><h3>Installation Options</h3><ul><li><strong>Fast-Track</strong>: No dual-boot, no encryption, single user <code>xy</code>, auto-boot from NVMe</li><li><strong>Detailed</strong>: Full power management, laptop optimizations, comprehensive configuration<h2></h2></li></ul><h2>Step 1: BIOS Configuration</h2><h3>Essential BIOS Settings</h3><p><strong>Access BIOS:</strong></p><ol><li>Power on Framework laptop</li><li>Press <code>F2</code> repeatedly during boot to enter BIOS</li><li>Navigate using arrow keys and Enter</li></ol><p><strong>Required BIOS Changes:</strong><pre><code class=\"bash\"># Critical Settings for Alpine Linux\nSecure Boot: DISABLED          # Required for Alpine Linux\nSVM Mode: ENABLED              # AMD virtualization support\nIOMMU: ENABLED                 # GPU passthrough capability\nBoot Order: USB UEFI → NVMe UEFI OS\nFast Boot: DISABLED            # Ensure proper hardware detection\n</code></pre></p><p><strong>Detailed BIOS Configuration:</strong></p><ol><li><strong>Security Tab:</strong><ul><li>Secure Boot: <code>Disabled</code></li><li>TPM: <code>Enabled</code> (for hardware security)</li><li>Secure Boot Keys: <code>Clear</code> (if needed)</li></ul></li><li><strong>Advanced Tab:</strong><ul><li>CPU Configuration:<ul><li>SVM Mode: <code>Enabled</code></li><li>IOMMU: <code>Enabled</code></li><li>Secure Memory Encryption: <code>Enabled</code> (optional)   </li></ul></li></ul></li><li><strong>Boot Tab:</strong><ul><li>Boot Mode: <code>UEFI</code></li><li>Fast Boot: <code>Disabled</code></li><li>Boot Order: USB devices first</li></ul></li><li><strong>Save and Exit:</strong><ul><li>Press <code>F10</code> to save changes</li><li>Confirm with <code>Yes</code></li><li>System will reboot<h2></h2></li></ul></li></ol><h2>Step 2: Download and Prepare Alpine Linux Extended ISO</h2><h3>Why Extended ISO is Essential</h3><p><strong>Multi-AI Consensus:</strong> The Extended ISO is <strong>required</strong> (not optional) for Framework laptops:</p><ul><li><strong>AMD Microcode</strong>: Includes <code>amd-ucode</code> for Ryzen 7 7840HS optimization</li><li><strong>Graphics Firmware</strong>: Contains <code>linux-firmware-amd</code> for Radeon 780M acceleration</li><li><strong>WiFi Firmware</strong>: Framework's WiFi card requires <code>linux-firmware-iwlwifi</code></li><li><strong>Audio Firmware</strong>: Framework laptop audio codecs need specific firmware</li><li><strong>Offline Installation</strong>: ~200 packages included, reducing network dependency</li></ul><h3>Download Alpine Linux Extended ISO</h3><pre><code class=\"bash\"># Download Alpine Linux Extended ISO &#40;Essential for Framework laptops&#41;\nwget https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/alpine-extended-3.22.2-x86&#95;64.iso\n\n# Download and verify checksum\nwget https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/alpine-extended-3.22.2-x86&#95;64.iso.sha256\nsha256sum -c alpine-extended-3.22.2-x86&#95;64.iso.sha256\n\n# Expected output:\n# alpine-extended-3.22.2-x86&#95;64.iso: OK\n</code></pre><h3>Create Bootable USB Drive</h3><p><strong>On Linux/macOS:</strong><pre><code class=\"bash\"># Identify USB drive &#40;replace /dev/sdX with your USB device&#41;\nlsblk  # or albinutil list on macOS\n\n# Create bootable USB &#40;WARNING: This will erase the USB drive&#41;\ndd if=alpine-extended-3.22.2-x86&#95;64.iso of=/dev/sdX bs=4M status=progress oflag=sync\n\n# macOS alternative:\nsudo dd if=alpine-extended-3.22.2-x86&#95;64.iso of=/dev/rdiskX bs=4m\n</code></pre></p><p><strong>On Windows:</strong><pre><code class=\"powershell\"># Use Rufus or similar tool\n# Download Rufus: https://rufus.ie/\n# Select Alpine Extended ISO\n# Use DD image mode\n# Create bootable USB\n</code></pre></p><h2></h2><h2>🚀 <strong>Fast-Track Installation (20-30 minutes)</strong></h2><p><em>For those who want to get up and running quickly</em></p><h3>Step 3A: Boot from Alpine Extended ISO USB</h3><pre><code class=\"bash\"># Boot from Alpine Extended ISO USB\n# Login as root &#40;no password&#41;\n\n# Quick WiFi setup &#40;if needed&#41;\nsetup-interfaces\n# Select: wlan0, DHCP, enter SSID/password\n# Or use eth0 for wired connection\n\n# Verify connection\nping -c 3 dl-cdn.alpinelinux.org\n</code></pre><h3>Step 4A: Run Alpine Installation</h3><pre><code class=\"bash\">setup-alpine\n</code></pre><p><strong>Fast-Track Answers (Multi-AI Optimized):</strong></p><pre><code>Keyboard:      us\nHostname:      xy-framework-alpine\nInterface:     wlan0 &#40;or eth0&#41;\nIP address:    dhcp\nRoot password: &#91;set secure password&#93;\nTimezone:      America/Los&#95;Angeles &#40;or yours&#41;\nProxy:         none\nMirror:        f &#40;finds fastest&#41;\nSSH server:    openssh\nDisk:          nvme0n1\nHow to use:    sys &#40;creates bootable system with GRUB&#41;\nErase disk:    y\n</code></pre><p><strong>Installation will proceed automatically, then reboot when complete.</strong></p><h3>Step 5A: First Boot - Login to Installed System</h3><pre><code class=\"bash\"># After reboot, login as root\n# Remove USB drive when prompted during boot\n\n# Update system first\napk update &amp;&amp; apk upgrade\n\n# Create admin user 'xy'\nadduser xy\nadduser xy wheel\n\n# Install and configure sudo &#40;CRITICAL: requires community repository&#41;\n# Step 1: Enable community repository &#40;sudo is not in main repository&#41;\necho 'http://dl-cdn.alpinelinux.org/alpine/v3.22/community' &gt;&gt; /etc/apk/repositories\n\n# Step 2: Update package index\napk update\n\n# Step 3: Install sudo package\napk add sudo\n\n# Step 4: Create admin user 'xy' with password\nadduser xy\necho &quot;Enter password for user xy when prompted&quot;\npasswd xy\n\n# Step 5: Add xy to wheel group &#40;required for sudo access&#41;\nadduser xy wheel\n\n# Step 6: Configure sudoers file &#40;use visudo for safety&#41;\nvisudo\n# In visudo, uncomment this line: %wheel ALL=&#40;ALL&#41; ALL\n# Or programmatically add it:\necho '%wheel ALL=&#40;ALL&#41; ALL' &gt;&gt; /etc/sudoers\n\n# Alternative: Use doas &#40;Alpine's recommended lightweight sudo replacement&#41;\n# apk add doas\n# echo 'permit persist :wheel' &gt;&gt; /etc/doas.conf\n\n# Install Framework hardware essentials &#40;corrected package names&#41;\napk add --no-cache \\\n  linux-firmware \\\n  linux-firmware-amd \\\n  amd-ucode \\\n  mesa-dri-gallium mesa-va-gallium mesa-vulkan-radeon \\\n  acpid cpufrequtils brightnessctl \\\n  wpa&#95;supplicant wireless-tools\n\n# Enable critical services &#40;corrected service names&#41;\nrc-update add acpid default\nrc-update add wpa&#95;supplicant default\n\n# Install s6 suite &#40;keep OpenRC as PID1 for stability&#41;\napk add --no-cache \\\n  s6 s6-rc s6-linux-init \\\n  s6-portable-utils s6-dns \\\n  execline\n</code></pre><h3>Step 6A: Install Sway and Configure User</h3><pre><code class=\"bash\"># Login as 'xy' with your password\n\n# Install Sway and all dependencies\nsudo apk add --no-cache \\\n  sway foot waybar mako \\\n  grim slurp wl-clipboard \\\n  seatd \\\n  pipewire pipewire-alsa wireplumber pamixer \\\n  firefox \\\n  ttf-dejavu ttf-noto ttf-noto-emoji \\\n  dbus elogind\n\n# Add user to required groups\nsudo adduser xy video\nsudo adduser xy input\nsudo adduser xy seat\n\n# Enable services\nsudo rc-update add seatd default\nsudo rc-update add dbus default\nsudo rc-update add elogind default\n\n# Start services now\nsudo rc-service seatd start\nsudo rc-service dbus start\nsudo rc-service elogind start\n</code></pre><h3>Step 7A: Configure Sway (Framework-Optimized)</h3><pre><code class=\"bash\">mkdir -p &#126;/.config/sway\n\ncat &gt; &#126;/.config/sway/config &lt;&lt; 'EOF'\n# Framework-optimized Sway config &#40;Multi-AI Consensus&#41;\nset $mod Mod4\n\n# Framework display &#40;adjust if needed&#41;\noutput eDP-1 scale 1\n\n# Input configuration\ninput &quot;type:keyboard&quot; {\n    xkb&#95;layout us\n}\n\ninput &quot;type:touchpad&quot; {\n    tap enabled\n    natural&#95;scroll enabled\n}\n\n# Key bindings\nbindsym $mod+Return exec foot\nbindsym $mod+d exec firefox\nbindsym $mod+Shift+q kill\nbindsym $mod+Shift+e exec swaynag -t warning -m 'Exit Sway?' -b 'Yes' 'swaymsg exit'\n\n# Window management &#40;vim-style&#41;\nbindsym $mod+h focus left\nbindsym $mod+j focus down\nbindsym $mod+k focus up\nbindsym $mod+l focus right\n\n# Brightness controls &#40;Framework function keys&#41;\nbindsym XF86MonBrightnessDown exec brightnessctl set 5%-\nbindsym XF86MonBrightnessUp exec brightnessctl set +5%\n\n# Volume controls\nbindsym XF86AudioLowerVolume exec pamixer --decrease 5\nbindsym XF86AudioRaiseVolume exec pamixer --increase 5\nbindsym XF86AudioMute exec pamixer --toggle-mute\n\n# Status bar\nbar {\n    position top\n    status&#95;command waybar\n}\nEOF\n\n# Test Sway\nsway\n</code></pre><h3>Step 8A: Verification and Development Setup</h3><pre><code class=\"bash\"># Check hostname\nhostname\n# Output: xy-framework-alpine\n\n# Check user and groups\nid\n# Should show: wheel, video, input, seat\n\n# Check init system\nps -p 1 -o comm=\n# Output: init &#40;OpenRC&#41;\n\n# Check GRUB boot entries\nsudo efibootmgr -v\n# Should show 'alpine' as first entry\n\n# Check graphics acceleration\nsudo apk add mesa-demos\nglxinfo | grep &quot;OpenGL renderer&quot;\n# Should show: AMD Radeon Graphics &#40;Radeon 780M&#41;\n\n# Check WiFi\nip addr show wlan0\n# Should show IP address\n\n# Check Sway is working\necho $WAYLAND&#95;DISPLAY\n# Should show wayland-&#42; if in Sway\n</code></pre><h2></h2><h2>🔧 <strong>Detailed Installation (Comprehensive Configuration)</strong></h2><p><em>For those who want full control and optimization</em></p><h3>Step 3B: Boot from Alpine Extended ISO USB</h3><ol><li><strong>Insert USB drive</strong> into Framework laptop</li><li><strong>Power on</strong> and press <code>F12</code> for boot menu</li><li><strong>Select USB drive</strong> from boot menu</li><li><strong>Wait for Alpine Linux boot</strong> (should boot automatically)</li><li><strong>Login as root</strong> (no password required)</li></ol><h3>Step 4B: Run Alpine Installation</h3><pre><code class=\"bash\"># Run Alpine setup script\nsetup-alpine\n\n# Configuration prompts and responses:\n</code></pre><p><strong>Keyboard Layout:</strong></p><pre><code>Available layouts: us, de, fr, it, etc.\nSelect keyboard layout: us\n</code></pre><p><strong>Hostname:</strong></p><pre><code>Enter hostname: framework-alpine\n</code></pre><p><strong>Network Configuration:</strong></p><pre><code>Available interfaces: wlan0, eth0\nSelect interface: wlan0\n\n# WiFi Setup &#40;if using WiFi&#41;\nEnter SSID: &#91;your-wifi-network&#93;\nEnter passphrase: &#91;your-wifi-password&#93;\n\n# Static IP &#40;recommended for development&#41;\nConfigure IP address: 192.168.1.100/24\nConfigure gateway: 192.168.1.1\nConfigure DNS: 8.8.8.8\n</code></pre><p><strong>Timezone:</strong></p><pre><code>Available timezones: America/Los&#95;Angeles, America/New&#95;York, etc.\nSelect timezone: America/Los&#95;Angeles\n</code></pre><p><strong>SSH Access:</strong></p><pre><code>Enable SSH server: yes\nAllow root login: yes &#40;for initial setup&#41;\n</code></pre><p><strong>Disk Configuration:</strong></p><pre><code>Available disks: nvme0n1 &#40;Framework's NVMe drive&#41;\nSelect disk: nvme0n1\nUse entire disk: yes\nCreate swap: yes &#40;recommended&#41;\n</code></pre><p><strong>User Setup:</strong></p><pre><code>Root password: &#91;secure-password&#93;\nCreate user: developer\nUser password: &#91;secure-password&#93;\n</code></pre><p><strong>Installation:</strong></p><pre><code>Installation will begin...\nThis may take 10-15 minutes\n</code></pre><p><strong>Reboot:</strong><pre><code class=\"bash\"># Installation will complete and prompt for reboot\n# Remove USB drive when prompted during boot\nreboot\n</code></pre></p><h3>Step 5B: Post-Installation Base System Setup</h3><pre><code class=\"bash\"># Login as root\nlogin: root\nPassword: &#91;your-root-password&#93;\n\n# Update system packages\napk update &amp;&amp; apk upgrade\n\n# Install Framework laptop specific firmware\napk add --no-cache \\\n  linux-firmware \\\n  linux-firmware-amd \\\n  amd-ucode \\\n  acpi \\\n  acpid \\\n  cpupower\n\n# Install essential development packages\napk add --no-cache \\\n  curl \\          # HTTP client for downloads and API calls\n  wget \\          # Alternative HTTP client\n  xz \\            # High-compression archiver &#40;xz/lzma format&#41;\n  git \\\n  vim \\\n  htop \\\n  iotop \\\n  nload \\\n  tcpdump \\\n  strace \\\n  gdb \\\n  musl-dev \\\n  clang \\\n  make \\\n  linux-headers\n</code></pre><h3>Step 6B: Install and Configure s6 Init System</h3><pre><code class=\"bash\"># Install s6 supervision suite &#40;musl-native&#41;\napk add --no-cache \\\n  s6 \\\n  s6-rc \\\n  s6-linux-init \\\n  s6-portable-utils \\\n  s6-dns \\\n  execline\n\n# Configure s6 as init system &#40;musl-native&#41;\ns6-linux-init-maker -1 /etc/s6/rc/init\n\n# Backup original inittab\ncp /etc/inittab /etc/inittab.bak\n\n# Replace with s6 init\ncat &gt; /etc/inittab &lt;&lt; 'EOF'\n::sysinit:/etc/s6/init/init-stage1\n::wait:/etc/s6/init/init-stage2\n::shutdown:/etc/s6/init/init-shutdown\nEOF\n\n# Create s6 service directories\nmkdir -p /etc/s6/services/{sshd,chronyd,networking,seatd}\n\n# Configure SSH service\ncat &gt; /etc/s6/services/sshd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\n/usr/sbin/sshd -D\nEOF\n\n# Configure chrony service\ncat &gt; /etc/s6/services/chronyd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid chrony\n/usr/sbin/chronyd -d\nEOF\n\n# Configure seatd service &#40;required for Wayland&#41;\ncat &gt; /etc/s6/services/seatd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\n/usr/bin/seatd\nEOF\n\n# Make services executable\nchmod +x /etc/s6/services/&#42;/run\n\n# Configure s6-rc for service management\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\ns6-rc change default\n\n# Add user to video and seat groups for Wayland\nadduser $USER video\nadduser $USER seat\n</code></pre><h3>Step 7B: Install Sway Wayland GUI</h3><pre><code class=\"bash\"># Install Sway Wayland compositor and components\napk add --no-cache \\\n  sway \\\n  foot \\\n  waybar \\\n  mako \\\n  grim \\\n  slurp \\\n  wl-clipboard \\\n  seatd\n\n# Install graphics drivers for Radeon 780M\napk add --no-cache \\\n  mesa-dri-gallium \\\n  mesa-va-gallium \\\n  mesa-vulkan-radeon\n\n# Install audio support\napk add --no-cache \\\n  pipewire \\\n  pipewire-alsa \\\n  wireplumber \\\n  pamixer\n\n# Install web browser\napk add --no-cache \\\n  firefox\n\n# Add user to required groups for Wayland\nadduser developer video\nadduser developer seat\nadduser developer audio\n</code></pre><h3>Step 8B: Configure Sway</h3><pre><code class=\"bash\"># Create Sway configuration directory\nmkdir -p /home/developer/.config/sway\n\n# Create comprehensive Sway configuration\ncat &gt; /home/developer/.config/sway/config &lt;&lt; 'EOF'\n# Sway configuration for Framework laptop development\n\n# Variables\nset $mod Mod4\nset $terminal foot\nset $menu wofi --show drun\n\n# Font\nfont pango:JetBrains Mono 10\n\n# Input configuration\ninput &#42; {\n    xkb&#95;layout us\n    xkb&#95;variant &quot;&quot;\n}\n\n# Output configuration &#40;Framework laptop display&#41;\noutput &#42; {\n    background #000000 solid&#95;color\n}\n\n# Key bindings\nbindsym $mod+Return exec $terminal\nbindsym $mod+Shift+q kill\nbindsym $mod+d exec $menu\nbindsym $mod+Shift+e exec swaynag -t warning -m 'Exit Sway?' -b 'Yes' 'swaymsg exit'\n\n# Window management\nbindsym $mod+Left focus left\nbindsym $mod+Right focus right\nbindsym $mod+Up focus up\nbindsym $mod+Down focus down\n\nbindsym $mod+Shift+Left move left\nbindsym $mod+Shift+Right move right\nbindsym $mod+Shift+Up move up\nbindsym $mod+Shift+Down move down\n\n# Workspace switching\nbindsym $mod+1 workspace 1\nbindsym $mod+2 workspace 2\nbindsym $mod+3 workspace 3\nbindsym $mod+4 workspace 4\nbindsym $mod+5 workspace 5\n\nbindsym $mod+Shift+1 move container to workspace 1\nbindsym $mod+Shift+2 move container to workspace 2\nbindsym $mod+Shift+3 move container to workspace 3\nbindsym $mod+Shift+4 move container to workspace 4\nbindsym $mod+Shift+5 move container to workspace 5\n\n# Layout management\nbindsym $mod+s layout stacking\nbindsym $mod+w layout tabbed\nbindsym $mod+e layout toggle split\n\n# Reload configuration\nbindsym $mod+Shift+c reload\n\n# Lock screen\nbindsym $mod+l exec swaylock\n\n# Volume control\nbindsym XF86AudioRaiseVolume exec pamixer -i 5\nbindsym XF86AudioLowerVolume exec pamixer -d 5\nbindsym XF86AudioMute exec pamixer -t\n\n# Brightness control &#40;Framework laptop&#41;\nbindsym XF86MonBrightnessUp exec brightnessctl set +5%\nbindsym XF86MonBrightnessDown exec brightnessctl set 5%-\n\n# Startup applications\nexec waybar\nexec mako\nEOF\n\n# Set proper ownership\nchown -R developer:developer /home/developer/.config\n</code></pre><h3>Step 9B: Configure Waybar</h3><pre><code class=\"bash\"># Create Waybar configuration\ncat &gt; /home/developer/.config/waybar/config &lt;&lt; 'EOF'\n{\n    &quot;layer&quot;: &quot;top&quot;,\n    &quot;position&quot;: &quot;top&quot;,\n    &quot;height&quot;: 30,\n    &quot;modules-left&quot;: &#91;&quot;sway/workspaces&quot;&#93;,\n    &quot;modules-center&quot;: &#91;&quot;clock&quot;&#93;,\n    &quot;modules-right&quot;: &#91;&quot;pulseaudio&quot;, &quot;battery&quot;, &quot;network&quot;&#93;,\n    \n    &quot;sway/workspaces&quot;: {\n        &quot;all-outputs&quot;: true\n    },\n    \n    &quot;clock&quot;: {\n        &quot;format&quot;: &quot;{:%Y-%m-%d %H:%M}&quot;\n    },\n    \n    &quot;pulseaudio&quot;: {\n        &quot;format&quot;: &quot;{volume}% {icon}&quot;,\n        &quot;format-muted&quot;: &quot;🔇&quot;,\n        &quot;format-icons&quot;: {\n            &quot;headphone&quot;: &quot;🎧&quot;,\n            &quot;hands-free&quot;: &quot;🖱️&quot;,\n            &quot;headset&quot;: &quot;🎧&quot;,\n            &quot;phone&quot;: &quot;📞&quot;,\n            &quot;portable&quot;: &quot;📱&quot;,\n            &quot;car&quot;: &quot;🚗&quot;,\n            &quot;default&quot;: &#91;&quot;🔈&quot;, &quot;🔉&quot;, &quot;🔊&quot;&#93;\n        }\n    },\n    \n    &quot;battery&quot;: {\n        &quot;format&quot;: &quot;{capacity}% {icon}&quot;,\n        &quot;format-charging&quot;: &quot;{capacity}% 🔌&quot;,\n        &quot;format-icons&quot;: &#91;&quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;, &quot;🔋&quot;&#93;\n    },\n    \n    &quot;network&quot;: {\n        &quot;format&quot;: &quot;{ifname}&quot;,\n        &quot;format-wifi&quot;: &quot;📶 {signalStrength}%&quot;,\n        &quot;format-ethernet&quot;: &quot;🌐&quot;,\n        &quot;format-disconnected&quot;: &quot;❌&quot;\n    }\n}\nEOF\n\n# Create Waybar style\ncat &gt; /home/developer/.config/waybar/style.css &lt;&lt; 'EOF'\n&#42; {\n    border: none;\n    border-radius: 0;\n    font-family: JetBrains Mono;\n    font-size: 12px;\n    min-height: 0;\n}\n\nwindow#waybar {\n    background: #1e1e1e;\n    color: #ffffff;\n}\n\n#workspaces button {\n    padding: 0 5px;\n    background: transparent;\n    color: #ffffff;\n    border-bottom: 3px solid transparent;\n}\n\n#workspaces button.focused {\n    background: #64727D;\n    border-bottom: 3px solid #ffffff;\n}\n\n#clock, #battery, #pulseaudio, #network {\n    padding: 0 10px;\n    margin: 0 5px;\n}\nEOF\n\n# Set proper ownership\nchown -R developer:developer /home/developer/.config\n</code></pre><h3>Step 10B: Laptop Power & Usability Optimization</h3><p><em>Based on Alpine Linux Wiki \"Setting up a laptop\" guidance, adapted for Framework laptop + s6 supervision</em></p><h4>Framework Laptop Power Management</h4><pre><code class=\"bash\"># Install laptop power management tools\napk add brightnessctl cpufreqd acpi acpid hdparm\n\n# Install NetworkManager for easy WiFi management\napk add networkmanager wpa&#95;supplicant dhcpcd wireless-tools iputils\n\n# Install locking tools for security\napk add swaylock swayidle\n</code></pre><h4>ACPI Event Handling (Lid, Power, AC Events)</h4><pre><code class=\"bash\"># Create ACPI event handlers for Framework laptop\nmkdir -p /etc/acpi/handlers\n\n# Lid close handler &#40;suspend&#41;\ncat &gt; /etc/acpi/handlers/lid-close &lt;&lt; 'EOF'\n#!/bin/sh\n# Suspend on lid close\necho mem &gt; /sys/power/state\nEOF\n\n# Lid open handler &#40;resume&#41;\ncat &gt; /etc/acpi/handlers/lid-open &lt;&lt; 'EOF'\n#!/bin/sh\n# Lock screen on lid open\nswaylock --daemonize\nEOF\n\n# AC adapter plug/unplug handlers\ncat &gt; /etc/acpi/handlers/ac-adapter &lt;&lt; 'EOF'\n#!/bin/sh\n# Switch CPU governor based on AC status\nif &#91; &quot;$3&quot; = &quot;00000000&quot; &#93;; then\n    # Battery mode - powersave governor\n    cpupower frequency-set -g powersave\n    # Reduce brightness for battery saving\n    brightnessctl set 70%\nelse\n    # AC mode - performance governor\n    cpupower frequency-set -g performance\n    # Increase brightness for AC power\n    brightnessctl set 100%\nfi\nEOF\n\nchmod +x /etc/acpi/handlers/&#42;\n</code></pre><h4>s6 Service Configuration for Power Management</h4><pre><code class=\"bash\"># Create s6 services for power management\nmkdir -p /etc/s6/services/{acpid,cpufreqd,NetworkManager}\n\n# ACPI daemon service\ncat &gt; /etc/s6/services/acpid/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\nacpid -f\nEOF\n\n# CPU frequency daemon service\ncat &gt; /etc/s6/services/cpufreqd/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\ncpufreqd\nEOF\n\n# NetworkManager service\ncat &gt; /etc/s6/services/NetworkManager/run &lt;&lt; 'EOF'\n#!/bin/execlineb -P\ns6-setuidgid root\nNetworkManager --no-daemon\nEOF\n\nchmod +x /etc/s6/services/&#42;/run\n\n# Configure s6-rc service dependencies\nmkdir -p /etc/s6-rc/source/{acpid,cpufreqd,NetworkManager}\n\n# Service type definitions\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/acpid/type\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/cpufreqd/type\necho &quot;longrun&quot; &gt; /etc/s6-rc/source/NetworkManager/type\n\n# Compile and activate services\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\ns6-rc change default\n</code></pre><h4>Backlight Control and Battery Optimization</h4><pre><code class=\"bash\"># Configure automatic backlight adjustment\ncat &gt; /usr/local/bin/battery-backlight &lt;&lt; 'EOF'\n#!/bin/sh\n# Battery-aware backlight control\nBATTERY&#95;PERCENT=$&#40;cat /sys/class/power&#95;supply/BAT0/capacity 2&gt;/dev/null || echo 100&#41;\nAC&#95;STATUS=$&#40;cat /sys/class/power&#95;supply/ADP1/online 2&gt;/dev/null || echo 1&#41;\n\nif &#91; &quot;$AC&#95;STATUS&quot; = &quot;0&quot; &#93;; then\n    # On battery - adjust brightness based on battery level\n    if &#91; &quot;$BATTERY&#95;PERCENT&quot; -lt 20 &#93;; then\n        brightnessctl set 30%\n    elif &#91; &quot;$BATTERY&#95;PERCENT&quot; -lt 50 &#93;; then\n        brightnessctl set 50%\n    else\n        brightnessctl set 70%\n    fi\nelse\n    # On AC - full brightness\n    brightnessctl set 100%\nfi\nEOF\n\nchmod +x /usr/local/bin/battery-backlight\n\n# Create systemd timer equivalent using cron for battery monitoring\necho &quot;&#42;/5 &#42; &#42; &#42; &#42; /usr/local/bin/battery-backlight&quot; | crontab -\n</code></pre><h4>WiFi Management with NetworkManager</h4><pre><code class=\"bash\"># Configure NetworkManager for easy WiFi management\ncat &gt; /etc/NetworkManager/NetworkManager.conf &lt;&lt; 'EOF'\n&#91;main&#93;\nplugins=keyfile\n\n&#91;device&#93;\nwifi.scan-rand-mac-address=no\nEOF\n\n# Start NetworkManager\ns6-rc change NetworkManager\n\n# Connect to WiFi using nmtui\nnmtui\n</code></pre><h4>Framework Laptop Specific Optimizations</h4><pre><code class=\"bash\"># Configure power management for Framework laptop\necho 'SUBSYSTEM==&quot;power&#95;supply&quot;, ATTR{type}==&quot;Battery&quot;, ATTR{status}==&quot;Discharging&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g powersave&quot;' &gt; /etc/udev/rules.d/99-framework-power.rules\n\necho 'SUBSYSTEM==&quot;power&#95;supply&quot;, ATTR{type}==&quot;Battery&quot;, ATTR{status}==&quot;Charging&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g ondemand&quot;' &gt; /etc/udev/rules.d/99-framework-charging.rules\n\n# Configure thermal management\necho 'SUBSYSTEM==&quot;thermal&quot;, ATTR{type}==&quot;cpu&quot;, ATTR{temp}==&quot;&#42;&quot;, RUN+=&quot;/usr/bin/cpupower frequency-set -g ondemand&quot;' &gt; /etc/udev/rules.d/99-framework-thermal.rules\n\n# Reload udev rules\nudevadm control --reload-rules\n</code></pre><h2></h2><h2>Step 11: Install Development Tools</h2><h3>Install Nix Package Manager</h3><pre><code class=\"bash\"># Install Nix &#40;single-user mode for simplicity&#41;\ncurl -L https://nixos.org/nix/install | sh\n\n# Source Nix environment\nsource /home/developer/.nix-profile/etc/profile.d/nix.sh\n\n# Verify installation\nnix --version\n\n# Install development tools via Nix\nnix-env -iA nixpkgs.kubectl\nnix-env -iA nixpkgs.helm\nnix-env -iA nixpkgs.docker\nnix-env -iA nixpkgs.git\nnix-env -iA nixpkgs.nodejs\nnix-env -iA nixpkgs.rustc\nnix-env -iA nixpkgs.go\n</code></pre><h3>Install Additional Alpine Packages</h3><pre><code class=\"bash\"># Install development and system tools\napk add --no-cache \\\n  qemu \\\n  libvirt \\\n  virt-manager \\\n  docker \\\n  docker-compose \\\n  python3 \\\n  py3-pip \\\n  nodejs \\\n  npm \\\n  rust \\\n  cargo \\\n  go \\\n  openjdk17-jdk \\\n  postgresql \\\n  redis\n\n# Add user to docker group\nadduser developer docker\n</code></pre><h2></h2><h2>Step 12: Configure Auto-Start Sway</h2><h3>Create Desktop Session</h3><pre><code class=\"bash\"># Create desktop session file\ncat &gt; /usr/share/wayland-sessions/sway.desktop &lt;&lt; 'EOF'\n&#91;Desktop Entry&#93;\nName=Sway\nComment=An i3-compatible Wayland compositor\nExec=sway\nType=Application\nEOF\n\n# Create autostart script for developer user\ncat &gt; /home/developer/.bash&#95;profile &lt;&lt; 'EOF'\n# Start Sway if not already running\nif &#91; -z &quot;$WAYLAND&#95;DISPLAY&quot; &#93; &amp;&amp; &#91; &quot;$&#40;tty&#41;&quot; = &quot;/dev/tty1&quot; &#93;; then\n    exec sway\nfi\nEOF\n\n# Set proper ownership\nchown developer:developer /home/developer  \n</code></pre><h2></h2><h2>Step 13: Verification and Testing</h2><h3>System Verification Checklist</h3><pre><code class=\"bash\"># 1. Verify musl libc usage\napk add pax-utils\nscanelf -n /usr/bin/python3\n# Should show: /lib/ld-musl-x86&#95;64.so.1\n\n# 2. Verify s6 services\ns6-svstat /var/service/&#42;\n# All services should show &quot;up&quot;\n\n# 3. Verify WiFi connectivity\nip addr show wlan0\nping -c 3 8.8.8.8\n# Should show IP address and successful ping\n\n# 4. Verify Wayland session\necho $WAYLAND&#95;DISPLAY\n# Should show wayland-0 or similar\n\n# 5. Verify graphics acceleration\nglxinfo | grep &quot;direct rendering&quot;\n# Should show &quot;direct rendering: Yes&quot;\n\n# 6. Verify audio\npamixer --get-volume\n# Should show volume percentage\n\n# 7. Verify Framework laptop hardware\nlscpu | grep &quot;Model name&quot;\n# Should show AMD Ryzen 7 7840HS\n\nlspci | grep VGA\n# Should show AMD Radeon 780M Graphics\n</code></pre><h3>Performance Testing</h3><pre><code class=\"bash\"># Boot time test\nsystemd-analyze  # If available, or use time commands\n\n# Memory usage\nfree -h\n# Should show &#126;180MB used with Sway running\n\n# CPU usage\nhtop\n# Should show minimal CPU usage at idle\n\n# Temperature monitoring\nsensors\n# Should show reasonable temperatures for Framework laptop\n</code></pre><h2></h2><h2>Troubleshooting</h2><h3>Alpine Linux musl libc Purity</h3><p><strong>The rhizome system embodies musl libc purity - all packages use musl libc for consistency:</strong></p><pre><code class=\"bash\"># Development dependencies that use musl libc:\napk add pkgconf libffi    # Both use musl libc as dependency\napk add wayland-dev       # Compiled against musl libc\napk add gcc musl-dev      # musl-native development tools\n\n# Verify musl libc usage:\nscanelf -n /usr/bin/pkgconf    # Shows: /lib/ld-musl-x86&#95;64.so.1\nscanelf -n /usr/lib/libffi.so  # Shows: /lib/ld-musl-x86&#95;64.so.1\n\n# One-liner to verify entire rhizome system musl libc purity:\nscanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep -q glibc &amp;&amp; echo &quot;❌ CONTAMINATED&quot; || echo &quot;✅ MUSL PURE&quot;\n\n# Comprehensive purity check with count &#40;corrected syntax&#41;:\nscanelf -n /usr/bin/&#42; /usr/sbin/&#42; /usr/lib/&#42; /lib/&#42; 2&gt;/dev/null | awk '/glibc|ld-linux/ {print &quot;❌ GLIBC:&quot;, $0; exit 1} /musl/ {count++} END {if &#40;count &gt; 0&#41; print &quot;✅ MUSL PURE: Found&quot;, count, &quot;musl binaries&quot;}'\n\n# Benefits of musl libc purity in the rhizome system:\n# - Smaller binaries &#40;no glibc bloat&#41;\n# - Static linking support for containerization\n# - Consistent behavior across all packages\n# - Better security &#40;minimal attack surface&#41;\n# - Predictable performance characteristics\n# - Perfect for s6 supervision and Wayland compositors\n\n# Community Repository musl libc packages &#40;all use musl libc&#41;:\nscanelf -n /usr/bin/sudo /usr/sbin/wpa&#95;supplicant /usr/sbin/acpid /usr/sbin/cpufreq-set /usr/sbin/iwconfig 2&gt;/dev/null | grep musl\n\n# Verify community packages maintain musl purity:\necho &quot;✅ Community Repository musl libc packages:&quot;\necho &quot;  - wireless-tools &#40;iwconfig, iwlist, iwspy&#41;&quot;\necho &quot;  - acpid &#40;Advanced Configuration and Power Interface daemon&#41;&quot;\necho &quot;  - wpa&#95;supplicant &#40;WiFi connection manager&#41;&quot;\necho &quot;  - sudo &#40;superuser do command&#41;&quot;\necho &quot;  - cpufrequtils &#40;CPU frequency scaling utilities&#41;&quot;\n</code></pre><h3>Essential Tools for the Rhizome System</h3><p><strong>curl and xz - Critical for System Operations:</strong></p><pre><code class=\"bash\"># curl - Essential for downloads, API calls, and network testing\ncurl -I https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/\ncurl -s https://httpbin.org/ip  # Test internet connectivity\ncurl -O https://example.com/file.tar.xz  # Download files\n\n# xz - High-compression archiver for efficient storage\nxz -9 file.tar        # Maximum compression\nxz -d file.tar.xz     # Decompress\ntar -Jxf file.tar.xz  # Extract compressed archive\nxz -l file.tar.xz     # List archive contents without extracting\n\n# Combined workflow for downloading and extracting:\ncurl -L https://example.com/archive.tar.xz | xz -d | tar -xf -\n</code></pre><p><strong>Benefits in the Rhizome System:</strong></p><ul><li><strong>curl</strong>: Network diagnostics, package downloads, API integration</li><li><strong>xz</strong>: Efficient backup compression, minimal storage footprint</li><li><strong>Both use musl libc</strong>: Maintaining system purity and consistency</li></ul><h3>Network Connectivity Testing</h3><p><strong>Install Network Testing Tools:</strong><pre><code class=\"bash\"># Install comprehensive network testing suite\napk add --no-cache \\\n  iputils \\\n  bind-tools \\\n  speedtest-cli \\\n  iperf3 \\\n  mtr \\\n  netcat-openbsd \\\n  curl \\\n  wget\n\n# Test basic connectivity\nping -c 3 8.8.8.8\n\n# Test DNS resolution\nnslookup google.com\n\n# Test HTTP connectivity to Alpine mirrors\ncurl -I https://dl-cdn.alpinelinux.org\n\n# Run speed test\nspeedtest-cli\n\n# Test download speed from Alpine repository\ncurl -o /dev/null -s -w 'Download: %{speed&#95;download} bytes/sec\\n' https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86&#95;64/alpine-extended-3.22.2-x86&#95;64.iso\n</code></pre></p><h3>Framework 16 WiFi Troubleshooting (Critical for apk)</h3><p><strong>If you're getting apk errors, WiFi is likely not working. Here's the step-by-step fix:</strong></p><pre><code class=\"bash\"># 1. Check if WiFi interface exists\nip link show\n# Look for wlan0 or similar WiFi interface\n\n# 2. Check if WiFi is up\nip link show wlan0\n# Should show &quot;state UP&quot; if working\n\n# 3. If WiFi is down, bring it up\nip link set wlan0 up\n\n# 4. Check for WiFi networks\niwlist wlan0 scan | grep ESSID\n# Should show available networks\n\n# 5. Configure WiFi using setup-interfaces &#40;if not done during install&#41;\nsetup-interfaces\n# Select: wlan0\n# Select: DHCP\n# Enter your WiFi SSID and password\n\n# 6. Alternative manual WiFi configuration\ncat &gt; /etc/wpa&#95;supplicant/wpa&#95;supplicant.conf &lt;&lt; 'EOF'\nctrl&#95;interface=/var/run/wpa&#95;supplicant\nctrl&#95;interface&#95;group=wheel\nupdate&#95;config=1\n\nnetwork={\n    ssid=&quot;YOUR&#95;WIFI&#95;NAME&quot;\n    psk=&quot;YOUR&#95;WIFI&#95;PASSWORD&quot;\n}\nEOF\n\n# 7. Start wpa&#95;supplicant\nrc-service wpa&#95;supplicant start\nrc-update add wpa&#95;supplicant default\n\n# 8. Get IP address via DHCP\nudhcpc -i wlan0\n\n# 9. Test connectivity\nping -c 3 8.8.8.8\n\n# 10. If still not working, check for firmware issues\ndmesg | grep -i firmware\ndmesg | grep -i wifi\ndmesg | grep -i wlan\n\n# 11. Install WiFi firmware if missing\napk add linux-firmware\n# Reboot after installing firmware\nreboot\n</code></pre><p><strong>Common WiFi Issues on Framework 16:</strong></p><pre><code class=\"bash\"># Issue: No WiFi interface detected\n# Solution: Check if WiFi is enabled in BIOS\n# - Enter BIOS &#40;F2 during boot&#41;\n# - Look for WiFi/WLAN settings\n# - Ensure WiFi is enabled\n\n# Issue: WiFi interface exists but won't connect\n# Solution: Install proper firmware\napk add linux-firmware\nmodprobe -r iwlwifi\nmodprobe iwlwifi\n\n# Issue: Can connect but no internet &#40;DNS issues&#41;\n# Solution: Check DNS configuration\ncat /etc/resolv.conf\n# Should show: nameserver 8.8.8.8 or your router's IP\n\n# Issue: Intermittent WiFi drops\n# Solution: Power management issues\necho 'options iwlwifi power&#95;save=0' &gt; /etc/modprobe.d/iwlwifi.conf\n</code></pre><h3>Common Issues and Solutions</h3><p><strong>Issue: WiFi not connecting</strong><pre><code class=\"bash\"># Check WiFi interface\nip link show wlan0\n\n# Restart WiFi service\nrc-service wpa&#95;supplicant restart\n\n# Check WiFi configuration\ncat /etc/wpa&#95;supplicant/wpa&#95;supplicant.conf\n</code></pre></p><p><strong>Issue: Sway not starting</strong><pre><code class=\"bash\"># Check seatd service\ns6-svstat /var/service/seatd\n\n# Check user groups\ngroups developer\n# Should include: video, seat, audio\n\n# Check Wayland session\necho $WAYLAND&#95;DISPLAY\n</code></pre></p><p><strong>Issue: Graphics not working</strong><pre><code class=\"bash\"># Check graphics drivers\napk list | grep mesa\n\n# Check firmware\napk list | grep linux-firmware-amdgpu\n\n# Restart display manager\nkillall sway\n# Login again and start Sway\n</code></pre></p><p><strong>Issue: Audio not working</strong><pre><code class=\"bash\"># Check audio devices\npamixer --list-sources\npamixer --list-sinks\n\n# Restart audio services\nrc-service pipewire restart\nrc-service wireplumber restart\n</code></pre></p><h3>Performance Optimization</h3><p><strong>Memory Optimization:</strong><pre><code class=\"bash\"># Check memory usage\nfree -h\n\n# Optimize Sway configuration for lower memory usage\n# Edit &#126;/.config/sway/config to remove unnecessary components\n</code></pre></p><p><strong>Battery Optimization:</strong><pre><code class=\"bash\"># Check power consumption\npowertop\n\n# Configure CPU governor for battery saving\ncpupower frequency-set -g powersave\n</code></pre></p><h2></h2><h2>Success Verification</h2><h3>Final System Check</h3><p>After completing all steps, your Framework laptop should have:</p><p>✅ <strong>Alpine Linux</strong> running with musl libc<br /> ✅ <strong>s6 init system</strong> managing services (~200KB footprint)<br /> ✅ <strong>Sway Wayland</strong> compositor providing keyboard-driven desktop<br /> ✅ <strong>WiFi connectivity</strong> with Framework laptop firmware<br /> ✅ <strong>Graphics acceleration</strong> with Radeon 780M drivers<br /> ✅ <strong>Audio support</strong> with PipeWire<br /> ✅ <strong>Development tools</strong> including Nix package manager<br /> ✅ <strong>Optimized performance</strong> for Framework laptop hardware<br /></p><h3>Expected Performance Metrics</h3><ul><li><strong>Boot time</strong>: ~3 seconds</li><li><strong>Memory usage</strong>: ~180MB with Sway running</li><li><strong>CPU usage</strong>: ~5% at idle</li><li><strong>Battery life</strong>: Optimized for Framework laptop</li><li><strong>Development ready</strong>: Full toolchain available<h2></h2></li></ul><h2>Next Steps</h2><h3>Development Workflow</h3><ol><li><strong>Start Sway</strong>: Login and Sway will start automatically</li><li><strong>Open terminal</strong>: <code>Mod+Return</code> to open foot terminal</li><li><strong>Access applications</strong>: <code>Mod+d</code> for application launcher</li><li><strong>Switch workspaces</strong>: <code>Mod+1-5</code> for workspace switching</li><li><strong>Development</strong>: Full Nix and Alpine package ecosystem available</li></ol><h3>Further Customization</h3><ul><li><strong>Sway configuration</strong>: Customize <code>&#126;/.config/sway/config</code></li><li><strong>Waybar configuration</strong>: Customize <code>&#126;/.config/waybar/</code></li><li><strong>Nix packages</strong>: Install additional development tools</li><li><strong>Alpine packages</strong>: Use <code>apk</code> for system packages</li></ul><h3>Migration Path</h3><p>This setup provides the foundation for:</p><ul><li><strong>SixOS contribution</strong>: s6 + musl expertise</li><li><strong>Kubernetes development</strong>: Container-ready environment</li><li><strong>Full-stack development</strong>: All modern toolchains available<h2></h2></li></ul><h2>Quick Reference Commands</h2><pre><code class=\"bash\"># Start Sway\nsway\n\n# Check system status\nsudo rc-status\n\n# View logs\ndmesg | tail -n 50\n\n# Check battery\ntlp-stat -b\n\n# Brightness control\nbrightnessctl set 50%\n\n# Volume control\npamixer --set-volume 50\n\n# Network info\nnmcli device status  # if using NetworkManager\niwconfig            # for wpa&#95;supplicant\n</code></pre><h2></h2><p><strong>The rhizome system is complete: Your Framework laptop now runs Alpine Linux with s6 supervision and Sway Wayland, embodying the beauty of musl libc and Unix philosophy in a modern, repairable laptop. Like the rhizome, this system grows nomadic, connecting nodes without hierarchy—distributed, minimal, and beautifully functional.</strong><h2></h2></p><p><em>← <a href='/12025-10/'>Return to Main Index</a></em> | <em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em>Continue to Chapter xbn: The Eastern Capital → <a href='/12025-10/xbn-the-eastern-capital-vzxw.html'>kae3g xbn</a></em></p>",
  "hash" : "2025-10-22T10:21:16.816799425Z-34916"
}