{
  "slug" : "9501-what-is-compute",
  "meta" : {
    "slug" : "9501-what-is-compute",
    "title" : "kae3g 9501: What Is Compute? Cloud, P2P, and Networked Power",
    "filename" : "9501-what-is-compute.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9501: What Is Compute? Cloud, P2P, and Networked Power</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 1</strong> | <strong>Reading Time: 12 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>How \"compute\" differs from \"a computer\"</li><li>Cloud computing: renting processing power across the network</li><li>Peer-to-peer (P2P): distributed computation without central servers</li><li>Edge computing: bringing processing closer to data sources</li><li>The economic and architectural implications of networked compute</li><li>Why location of computation matters (latency, privacy, sovereignty)<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9500-what-is-a-computer'>9500: What Is a Computer?</a></strong> - Understanding single-machine computation<h2></h2></li></ul><h2>From \"A Computer\" to \"Compute\"</h2><p>In <strong>Essay 9500</strong>, we defined <strong>a computer</strong> as a single, universal machine.</p><p>But modern computing transcends individual machines:</p><blockquote><p> <strong>Compute</strong> (noun): Processing power as a <strong>fungible resource</strong>, distributed across networks, rented by the second, accessed from anywhere. </p></blockquote><p>The shift:</p><pre><code>Then: &quot;I own a computer&quot;\nNow:  &quot;I rent compute&quot;\n\nThen: &quot;Where's my machine?&quot;\nNow:  &quot;Where's my data? Where's my process running? I don't know—and I don't care.&quot;\n</code></pre><p>This is the <strong>cloudification</strong> of computing: treating CPU cycles, memory, and storage as <strong>commodities</strong> like electricity or water.<h2></h2></p><h2>The Three Models of Compute</h2><h3>1. Centralized Compute (The Cloud)</h3><p><strong>Definition</strong>: Large datacenters owned by companies (AWS, Google, Microsoft) rent processing power to users.</p><p><strong>Architecture</strong>:</p><pre><code>Your Laptop/Phone\n      ↓ &#40;Internet&#41;\nCloud Datacenter &#40;Virginia, Oregon, Ireland, Singapore...&#41;\n├─ Millions of servers\n├─ Your VMs/containers running here\n└─ You pay per second/hour\n</code></pre><p><strong>Pros</strong>:</p><ul><li><strong>Scalability</strong>: Spin up 1000 servers in minutes</li><li><strong>Reliability</strong>: Datacenters have redundancy, backups, 99.99% uptime</li><li><strong>Maintenance</strong>: Someone else replaces hard drives, applies patches</li><li><strong>Global reach</strong>: Deploy to multiple continents instantly</li></ul><p><strong>Cons</strong>:</p><ul><li><strong>Privacy</strong>: Your data lives on someone else's hardware</li><li><strong>Sovereignty</strong>: Subject to datacenter country's laws (GDPR, CLOUD Act)</li><li><strong>Cost</strong>: Can be expensive at scale (vs owning hardware)</li><li><strong>Latency</strong>: Round-trip to datacenter (50-200ms typical)</li><li><strong>Dependency</strong>: If AWS goes down, half the internet goes down</li></ul><p><strong>Economic Model</strong>:</p><ul><li>Pay for what you use (like electricity)</li><li>Shifts <strong>capital expense</strong> (buy servers) to <strong>operational expense</strong> (rent servers)</li><li>Enables startups (no upfront hardware cost)</li></ul><p><strong>Examples</strong>:</p><ul><li><strong>AWS EC2</strong>: Rent Linux/Windows VMs</li><li><strong>Google Cloud Run</strong>: Deploy containerized apps, pay per request</li><li><strong>Cloudflare Workers</strong>: Run JavaScript at edge locations</li><li><strong>Render, Fly.io, Railway</strong>: Deploy web apps without managing servers<h2></h2></li></ul><h3>2. Peer-to-Peer Compute (P2P)</h3><p><strong>Definition</strong>: Computation distributed across participant machines, with no central authority.</p><p><strong>Architecture</strong>:</p><pre><code>Your Computer ←→ Peer A\n     ↕              ↕\n   Peer B  ←→    Peer C\n     ↕              ↕\n   Peer D  ←→    Peer E\n\n&#40;No central server - everyone connects to everyone&#41;\n</code></pre><p><strong>Pros</strong>:</p><ul><li><strong>Censorship resistance</strong>: No single point of control</li><li><strong>Cost</strong>: Free or very cheap (participants share resources)</li><li><strong>Resilience</strong>: No single point of failure</li><li><strong>Privacy</strong>: Can be encrypted end-to-end (no trusted third party)</li></ul><p><strong>Cons</strong>:</p><ul><li><strong>Complexity</strong>: Harder to program (no central coordination)</li><li><strong>Performance</strong>: Unpredictable (depends on peer availability)</li><li><strong>Discovery</strong>: How do you find peers? (bootstrapping problem)</li><li><strong>Security</strong>: Must assume some peers are malicious</li></ul><p><strong>Historical Examples</strong>:</p><ul><li><strong>SETI@home</strong> (1999): Distributed search for alien signals</li><li><strong>Folding@home</strong>: Protein folding simulation (COVID-19 research)</li><li><strong>BitTorrent</strong>: Distributed file sharing</li><li><strong>Bitcoin</strong>: Distributed ledger (blockchain)</li><li><strong>IPFS</strong>: Distributed file storage</li><li><strong>Tor</strong>: Anonymous routing through volunteer relays</li></ul><p><strong>Modern Applications</strong>:</p><ul><li><strong>WebRTC</strong>: Peer-to-peer video calls (Zoom, Meet use P2P when possible)</li><li><strong>Syncthing</strong>: File sync without cloud storage</li><li><strong>Mastodon/Fediverse</strong>: Distributed social networks</li><li><strong>Urbit</strong>: Peer-to-peer operating system (we'll explore this later!)<h2></h2></li></ul><h3>3. Edge Compute</h3><p><strong>Definition</strong>: Processing at the \"edge\" of the network, close to data sources.</p><p><strong>Architecture</strong>:</p><pre><code>Central Cloud &#40;Virginia&#41;\n      ↕\nRegional Edge &#40;San Francisco&#41;\n      ↕\nLocal Edge &#40;Your ISP's datacenter&#41;\n      ↕\nDevice Edge &#40;Your phone/laptop&#41;\n      ↕\nSensors/IoT &#40;Your smartwatch, car, thermostat&#41;\n</code></pre><p><strong>Why Edge Matters</strong>:</p><ol><li><strong>Latency</strong>: Physical distance = delay<ul><li>Light travels at 300,000 km/s</li><li>San Francisco ↔ Virginia: ~4,000 km = 13ms minimum (one way)</li><li>Round trip: 26ms + processing time</li><li>For real-time applications (gaming, AR/VR, autonomous vehicles), this is <strong>too slow</strong></li></ul></li><li><strong>Bandwidth</strong>: Moving data is expensive<ul><li>Self-driving car generates 4 TB/day of sensor data</li><li>Sending all data to cloud: impractical</li><li>Process locally, send only insights</li></ul></li><li><strong>Privacy</strong>: Keep sensitive data local<ul><li>Medical devices: process on device, never send raw data</li><li>Security cameras: detect motion locally, only upload alerts</li></ul></li><li><strong>Reliability</strong>: Work offline<ul><li>If internet dies, edge devices keep working</li><li>Airplane mode: your phone still processes photos, plays music</li></ul></li></ol><p><strong>Examples</strong>:</p><ul><li><strong>Cloudflare Edge</strong>: 300+ datacenters worldwide, <50ms from 95% of internet users</li><li><strong>AWS Lambda@Edge</strong>: Run code closer to users</li><li><strong>Apple Neural Engine</strong>: ML inference on iPhone (not in cloud!)</li><li><strong>Tesla Autopilot</strong>: Processes sensor data in car (can't wait for cloud round-trip)</li><li><strong>Smart home hubs</strong>: Process commands locally (Alexa/Google Home hybrid approach)<h2></h2></li></ul><h2>The Compute Continuum</h2><p>Modern systems use <strong>all three</strong> models in combination:</p><h3>Example: A Self-Driving Car</h3><pre><code>┌─────────────────────────────────────────────────────────────┐\n│ Cloud Compute &#40;Datacenter&#41;                                  │\n│ - Train ML models on fleet data &#40;100,000 GPUs&#41;             │\n│ - Map updates, traffic patterns                            │\n│ - Over-the-air software updates                            │\n└─────────────────────────────────────────────────────────────┘\n                          ↑ ↓\n                      &#40;4G/5G Network&#41;\n                          ↑ ↓\n┌─────────────────────────────────────────────────────────────┐\n│ Edge Compute &#40;In Car&#41;                                       │\n│ - Real-time sensor fusion &#40;cameras, lidar, radar&#41;          │\n│ - Path planning, obstacle avoidance                        │\n│ - Inference on pretrained models &#40;100ms response&#41;          │\n│ - Works offline &#40;in tunnels, rural areas&#41;                  │\n└─────────────────────────────────────────────────────────────┘\n                          ↑ ↓\n                   &#40;CAN bus, internal&#41;\n                          ↑ ↓\n┌─────────────────────────────────────────────────────────────┐\n│ Device Compute &#40;Sensors&#41;                                    │\n│ - Camera: compress images                                   │\n│ - Lidar: range finding                                      │\n│ - Radar: velocity detection                                 │\n└─────────────────────────────────────────────────────────────┘\n</code></pre><p>The <strong>division of labor</strong> is strategic:</p><ul><li><strong>Heavy, slow tasks</strong> (training): Cloud</li><li><strong>Fast, real-time tasks</strong> (driving): Edge (car)</li><li><strong>Sensor preprocessing</strong>: Device (camera chip)<h2></h2></li></ul><h2>The Economic Shift: Compute as Commodity</h2><h3>Traditional Computing (Pre-2006)</h3><pre><code>Want to run a website?\n1. Buy servers &#40;$10,000&#41;\n2. Install in your office\n3. Pay for power, cooling, internet\n4. Maintain hardware yourself\n5. Over-provision &#40;what if you get popular?&#41;\n</code></pre><p><strong>Capital-intensive</strong>, <strong>slow to scale</strong>, <strong>risky</strong>.</p><h3>Cloud Computing (2006+)</h3><pre><code>Want to run a website?\n1. Write code\n2. Deploy to AWS/Vercel/Fly.io\n3. Pay $5/month &#40;or $0.50 if low traffic&#41;\n4. Scale automatically\n5. Someone else handles hardware\n</code></pre><p><strong>Low upfront cost</strong>, <strong>fast scaling</strong>, <strong>pay-as-you-go</strong>.</p><h3>The Pricing Model</h3><p><strong>AWS EC2</strong> (example):</p><ul><li><code>t4g.nano</code>: 2 vCPUs, 0.5 GB RAM = <strong>$0.0042/hour</strong> = ~$3/month</li><li><code>c7g.16xlarge</code>: 64 vCPUs, 128 GB RAM = <strong>$2.176/hour</strong> = ~$1,600/month</li><li><strong>On-demand</strong>: Pay by the hour, no commitment</li><li><strong>Spot instances</strong>: Bid for unused capacity (up to 90% discount, but can be terminated)</li><li><strong>Reserved</strong>: 1-3 year commitment (up to 72% discount)</li></ul><p><strong>Implications</strong>:</p><ul><li>Startups can compete with giants (low entry cost)</li><li>But giants have economies of scale (Netflix pays less per GB than you)</li><li>\"Serverless\" movement: pay per request, not per hour (even more granular)<h2></h2></li></ul><h2>Location, Location, Location</h2><h3>Why Geography Matters</h3><p><strong>1. Latency</strong> (Speed of light is fixed!)</p><pre><code>User in Tokyo → Server in Virginia:\n- Distance: 11,000 km\n- Light speed travel: 37ms &#40;minimum&#41;\n- Actual internet route: 150-200ms &#40;goes through routers, undersea cables&#41;\n- User perceives lag\n\nUser in Tokyo → Server in Tokyo:\n- Distance: &lt;100 km\n- Latency: 5-10ms\n- Feels instant\n</code></pre><p><strong>2. Data Sovereignty</strong> (Where data lives = which laws apply)</p><pre><code>EU user data on EU servers:\n- Must comply with GDPR &#40;strict privacy&#41;\n- EU government can subpoena\n\nEU user data on US servers:\n- Must comply with GDPR AND US CLOUD Act\n- Both EU and US governments can subpoena\n- More legal complexity\n</code></pre><p><strong>3. Availability</strong> (Network failures are geographic)</p><pre><code>US-EAST-1 &#40;Virginia&#41; goes down:\n- Affects US East Coast users most\n- Multi-region deployments stay up\n- But: routing can cascade failures\n</code></pre><p><strong>Example</strong>: Cloudflare's approach</p><ul><li>300+ datacenters worldwide</li><li>Your request goes to nearest one (anycast routing)</li><li>Code runs <50ms from 95% of users</li><li>Data replicated across regions<h2></h2></li></ul><h2>The P2P Alternative: Urbit's Vision</h2><p><strong>Problem with Cloud</strong>: You rent someone else's computer. They have all the power.</p><p><strong>Problem with P2P</strong>: Hard to program, unpredictable performance.</p><p><strong>Urbit's synthesis</strong>:</p><pre><code>You own a &quot;planet&quot; &#40;your personal server&#41;\n- Could be running on your hardware at home\n- Could be hosted by a third party &#40;but YOU own it&#41;\n- Other planets connect directly to yours &#40;P2P&#41;\n- But with clean abstractions &#40;not raw P2P chaos&#41;\n</code></pre><p><strong>Key insight</strong>: <strong>Ownership</strong> of compute, not just rental.</p><p>(We'll explore Urbit deeply in Phase 4 - it's a radical reimagining of networked computing)<h2></h2></p><h2>Hands-On: Understanding Latency</h2><h3>Exercise 1: Ping the World</h3><p>Open a terminal and run:<pre><code class=\"bash\"># Ping Google's DNS &#40;usually very close&#41;\nping 8.8.8.8\n\n# Typical results:\n# - Same city: 5-15ms\n# - Same continent: 20-50ms\n# - Across ocean: 100-200ms\n# - Satellite internet: 500-700ms\n</code></pre></p><p><strong>Insight</strong>: Every network request has this baseline latency. </p><p>For an API call:</p><ul><li>1 request: 50ms</li><li>10 sequential requests: 500ms (users notice!)</li><li>10 parallel requests: 50ms (much better)</li></ul><p><strong>Design implication</strong>: Minimize round-trips. Batch requests. Cache aggressively.<h2></h2></p><h3>Exercise 2: Calculate Cloud Costs</h3><p><strong>Scenario</strong>: You run a web app</p><ul><li>2 servers (for redundancy): <code>t4g.small</code> = $0.0168/hour each</li><li>1 database: RDS <code>db.t4g.small</code> = $0.034/hour</li><li>100 GB storage: $10/month</li><li>500 GB bandwidth: $45/month</li></ul><p><strong>Monthly cost</strong>:</p><pre><code>Servers: 2 × $0.0168 × 24 × 30 = $24.19\nDatabase: $0.034 × 24 × 30 = $24.48\nStorage: $10\nBandwidth: $45\nTotal: &#126;$104/month\n</code></pre><p><strong>Compare to</strong>:</p><ul><li>Shared hosting: $5-20/month (but limited scaling)</li><li>Dedicated server: $100-300/month (but you manage it)</li><li>Serverless (Vercel/Netlify): $0-20/month for small apps (but less control)</li></ul><p><strong>Trade-offs everywhere!</strong><h2></h2></p><h3>Exercise 3: Explore P2P in Action</h3><p><strong>Try BitTorrent</strong> (legal torrents only!):</p><ol><li>Download a Linux ISO via torrent (e.g., Ubuntu)</li><li>Watch the peer list: you're connected to dozens of strangers</li><li>Notice: no central server, yet the download works</li><li>Each peer uploads to others (P2P reciprocity)</li></ol><p><strong>Insight</strong>: P2P scales beautifully for popular content (more peers = faster). But for rare content, you need seeders (someone hosting).<h2></h2></p><h2>The Philosophical Implications</h2><h3>Centralization vs Decentralization</h3><p><strong>Centralized (Cloud)</strong>:</p><ul><li><strong>Pros</strong>: Fast, reliable, easy to use</li><li><strong>Cons</strong>: Single point of control, censorship risk, privacy concerns</li><li><strong>Power</strong>: Concentrated (Amazon, Google, Microsoft)</li></ul><p><strong>Decentralized (P2P)</strong>:</p><ul><li><strong>Pros</strong>: Censorship-resistant, privacy-preserving, no gatekeepers</li><li><strong>Cons</strong>: Slower, harder to use, less reliable</li><li><strong>Power</strong>: Distributed (everyone is equal)</li></ul><p><strong>The Valley's Position</strong>:<blockquote><p> We embrace <strong>selective centralization</strong>. Use cloud for convenience, but design systems that <strong>could</strong> run P2P. Avoid lock-in. Own your data. Choose your dependencies consciously. <h2></h2></p></blockquote></p><h3>Sovereignty and Compute</h3><p><strong>Who controls your compute?</strong></p><p><strong>Scenario 1</strong>: Your app on AWS</p><ul><li>Amazon can (and has) suspended accounts without warning</li><li>If AWS decides you violate ToS, your app disappears overnight</li><li>You have <strong>no recourse</strong> (private platform, their rules)</li></ul><p><strong>Scenario 2</strong>: Your app on your hardware</p><ul><li>You control everything</li><li>But: hardware fails, you're responsible</li><li>And: what if your ISP cuts you off? (still a dependency)</li></ul><p><strong>Scenario 3</strong>: Your app on a P2P network</p><ul><li>No single point of control</li><li>But: how do users find you? (DNS still centralized)</li><li>And: harder to program, less tooling</li></ul><p><strong>The middle ground</strong>: </p><ul><li>Own your <strong>data</strong> (can export and move it)</li><li>Use cloud for <strong>convenience</strong> (but keep portability)</li><li>Design for <strong>graceful degradation</strong> (works offline)</li></ul><p>We'll explore this deeply in <strong>Phase 5</strong> (Synthesis & Integration).<h2></h2></p><h2>The Future: Compute Trends</h2><h3>1. Serverless Everywhere</h3><p><strong>Current</strong>: You manage VMs/containers<br /> <strong>Future</strong>: You write functions, cloud runs them<br /> <strong>Example</strong>: Cloudflare Workers, AWS Lambda@Edge</p><p><strong>Pros</strong>: Pay per request (can be $0 for low-traffic sites)<br /> <strong>Cons</strong>: Vendor lock-in, cold start latency, less control</p><h3>2. Edge AI</h3><p><strong>Current</strong>: ML models run in cloud<br /> <strong>Future</strong>: Models run on device (phone, laptop, IoT)<br /> <strong>Example</strong>: Apple Silicon's Neural Engine, Google Tensor</p><p><strong>Why</strong>: Privacy (data never leaves device), latency (instant), offline (works anywhere)</p><h3>3. Quantum Computing (Still Early)</h3><p><strong>Current</strong>: Classical computers (bits: 0 or 1)<br /> <strong>Future</strong>: Quantum computers (qubits: superposition of 0 and 1)<br /> <strong>Status</strong>: Experimental (not ready for general use)</p><p><strong>What it's good for</strong>: Optimization, simulation, cryptography<br /> <strong>What it's NOT good for</strong>: General-purpose computing (your laptop won't be quantum)</p><h3>4. Homomorphic Encryption</h3><p><strong>Problem</strong>: To process data in cloud, you must decrypt it (cloud provider sees it)<br /> <strong>Future</strong>: Compute on <strong>encrypted</strong> data, cloud never sees plaintext<br /> <strong>Status</strong>: Mathematically possible, but too slow today (100-1000x overhead)</p><p><strong>If this works</strong>: True \"zero-knowledge\" cloud computing (ultimate privacy)<h2></h2></p><h2>Try This</h2><h3>Exercise 1: Deploy to the Cloud (Beginner-Friendly)</h3><p><strong>Option A</strong>: Static site (free!)</p><ol><li>Create an HTML file: <code>index.html</code></li><li>Push to GitHub</li><li>Enable GitHub Pages</li><li>Your site is now live! (Uses GitHub's compute/bandwidth)</li></ol><p><strong>Option B</strong>: Full backend (free tier)</p><ol><li>Write a simple API in Python/Node.js</li><li>Deploy to Render.com or Fly.io (free tier: 512MB RAM)</li><li>Your API is now accessible worldwide</li></ol><p><strong>Insight</strong>: You're using compute you don't own, accessed via URLs.<h2></h2></p><h3>Exercise 2: Measure Your Compute Usage</h3><p><strong>On your laptop</strong>, run:<pre><code class=\"bash\"># macOS/Linux\ntop\n\n# See:\n# - CPU usage &#40;how much compute you're using&#41;\n# - Memory usage\n# - Running processes\n</code></pre></p><p><strong>Now think</strong>:</p><ul><li>How much of your laptop's power are you actually using? (Usually <10%)</li><li>What if you could rent out the idle 90%? (This is the P2P compute dream)</li><li>What if you could rent someone else's idle compute when you need more? (Cloud in reverse)<h2></h2></li></ul><h3>Exercise 3: Design a Distributed System</h3><p><strong>Scenario</strong>: Build a messaging app (like Signal, WhatsApp)</p><p><strong>Questions</strong>:</p><ol><li><strong>Where do messages live?</strong><ul><li>Centralized server? (Easy, but operator sees everything)</li><li>P2P? (Private, but how do you send to offline users?)</li><li>Hybrid? (Server as relay for offline delivery, but encrypted end-to-end?)</li></ul></li><li><strong>Where does compute happen?</strong><ul><li>Encrypt/decrypt in browser/app? (Privacy, but slower)</li><li>Server-side? (Fast, but server sees plaintext)</li></ul></li><li><strong>How do you find users?</strong><ul><li>Central directory? (Phone number → user ID mapping)</li><li>Distributed hash table? (P2P, but harder to implement)</li></ul></li></ol><p><strong>Real-world answer</strong>: Signal uses <strong>hybrid</strong>:</p><ul><li>Messages encrypted end-to-end (compute in client)</li><li>Server acts as relay (doesn't see plaintext)</li><li>Phone numbers mapped centrally (for convenience)</li><li>Messages deleted after delivery (minimize server storage)</li></ul><p><strong>Trade-offs everywhere!</strong> No perfect solution.<h2></h2></p><h2>Going Deeper</h2><h3>Related Essays</h3><ul><li><strong>9500</strong>: What Is a Computer? (Foundation for understanding compute)</li><li><strong>9610</strong>: Nix Package Management (How to make cloud deployments reproducible)</li><li><strong>9650</strong>: Init Systems (How processes are managed—relevant for cloud)</li><li><strong>9840</strong>: Cosmopolitan libc (Build-once, run-anywhere binaries—ultimate portability)</li></ul><h3>External Resources</h3><ul><li><strong>AWS Architecture Center</strong>: Real-world cloud patterns</li><li><strong>IPFS Docs</strong>: How distributed storage works</li><li><strong>Urbit.org</strong>: Radical rethinking of networked computing</li><li><strong>Cloudflare Blog</strong>: Excellent explanations of edge computing</li></ul><h3>For the Technically Curious</h3><ul><li><strong>CAP Theorem</strong>: Why distributed systems are hard (consistency, availability, partition tolerance—pick 2)</li><li><strong>Byzantine Fault Tolerance</strong>: P2P systems with malicious actors</li><li><strong>Raft/Paxos</strong>: Consensus algorithms for distributed systems<h2></h2></li></ul><h2>Reflection Questions</h2><ol><li><strong>If \"compute\" is a commodity, who owns it?</strong>   (AWS owns the hardware, you rent cycles—but what about data sovereignty?)</li><li><strong>Is P2P inevitable, or will centralized cloud dominate?</strong>   (Network effects favor centralization, but privacy concerns push toward P2P)</li><li><strong>What does it mean to \"own\" your compute?</strong>   (Hardware? The right to run programs? Access to internet? All three?)</li><li><strong>How much latency is acceptable?</strong>   (For chat: 100ms OK. For gaming: 20ms max. For autonomous vehicles: 1ms required)</li><li><strong>Should compute be free?</strong>   (Like roads/libraries? Or like electricity? Or purely market-based?)<h2></h2></li></ol><h2>Summary</h2><p><strong>Compute</strong> is:</p><ul><li><strong>Distributed</strong>: Across clouds, edges, devices</li><li><strong>Commodified</strong>: Rented like electricity</li><li><strong>Geographic</strong>: Location determines latency, laws, reliability</li><li><strong>Hybrid</strong>: Modern systems use centralized + P2P + edge</li></ul><p><strong>Key Insights:</strong></p><ul><li>Cloud computing <strong>shifted economics</strong> (capex → opex, low entry cost)</li><li>P2P computing <strong>shifts power</strong> (centralized → distributed control)</li><li>Edge computing <strong>optimizes latency</strong> (move compute closer to users)</li><li><strong>Trade-offs everywhere</strong>: convenience vs privacy, performance vs cost, control vs simplicity</li></ul><p><strong>In the Valley:</strong></p><ul><li>We use cloud <strong>tactically</strong> (for leverage)</li><li>We design for <strong>portability</strong> (avoid lock-in)</li><li>We respect <strong>sovereignty</strong> (know where your data lives)</li><li>We embrace <strong>simplicity</strong> (choose the right level of distribution)<h2></h2></li></ul><p><strong>Next</strong>: We'll explore the Unix philosophy—how to structure computation simply, regardless of where it runs.<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9500-what-is-a-computer'>9500 (what is a computer)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9502-ode-to-nocturnal-time'>9502 (ode to nocturnal time)</a></p><p><strong>Bridge to Narrative</strong>: For a character-driven take on distributed systems, see <a href='/12025-10/9960-grainhouse-risc-v-synthesis'>9960 (The Grainhouse)</a> - our vision for sovereign computing!</p><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 1</li><li><strong>Prerequisites</strong>: 9500 (What Is a Computer?)</li><li><strong>Concepts</strong>: Cloud computing, P2P, edge computing, latency, sovereignty, distributed systems</li><li><strong>Next Concepts</strong>: Unix philosophy, simplicity, composition</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T10:21:16.800527416Z-21216"
}