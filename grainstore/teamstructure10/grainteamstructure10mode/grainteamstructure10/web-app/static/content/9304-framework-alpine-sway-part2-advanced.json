{
  "slug" : "9304-framework-alpine-sway-part2-advanced",
  "meta" : {
    "slug" : "9304-framework-alpine-sway-part2-advanced",
    "title" : "9304. Framework Laptop Alpine Linux Advanced Configuration - Part 2: s6 + Sway + Wayland",
    "filename" : "9304-framework-alpine-sway-part2-advanced.md",
    "tags" : [ "alpine-linux", "s6", "sway", "wayland", "musl-libc", "framework-laptop", "advanced" ],
    "sort-order" : 9304,
    "source-dir" : "hidden"
  },
  "html" : "<h1>9304. Framework Laptop Alpine Linux Advanced Configuration - Part 2: s6 + Sway + Wayland</h1><blockquote><p> <strong>The Rhizome System Advanced Stack</strong> - s6 supervision + Sway Wayland + musl libc purity on Framework Laptop 16 </p></blockquote><h2>Table of Contents</h2><ul><li><a href='#s6-init-system'>s6 Init System</a></li><li><a href='#wayland-foundation'>Wayland Foundation</a></li><li><a href='#sway-compositor'>Sway Compositor</a></li><li><a href='#package-verification'>Package Verification</a></li><li><a href='#troubleshooting'>Troubleshooting</a></li><li><a href='#advanced-topics'>Advanced Topics</a></li></ul><h2>s6 Init System</h2><h3>What is s6?</h3><p><strong>s6</strong> is a process supervision suite designed for Unix systems. It provides:</p><ul><li><strong>Process supervision</strong> - Automatic restart of failed services</li><li><strong>Dependency management</strong> - Service ordering and dependencies</li><li><strong>musl libc native</strong> - Perfect for Alpine Linux</li><li><strong>Lightweight</strong> - ~200KB footprint</li><li><strong>Unix philosophy</strong> - Do one thing well</li></ul><h3>Install s6 Suite</h3><pre><code class=\"bash\"># Install s6 suite &#40;keep OpenRC as PID1 for stability&#41;\napk add --no-cache \\\n  s6 s6-rc s6-linux-init \\\n  s6-portable-utils s6-dns \\\n  s6-networking s6-svscan\n\n# Verify installation\napk info s6 s6-rc s6-linux-init\n</code></pre><h3>Configure s6 Init System</h3><pre><code class=\"bash\"># Create s6 directory structure &#40;CRITICAL: prevents mkdir errors&#41;\nmkdir -p /etc/s6/rc/init\nmkdir -p /etc/s6/services\nmkdir -p /etc/s6-rc/source\nmkdir -p /etc/s6-rc/compiled\n\n# Generate s6 init system\ns6-linux-init-maker -1 /etc/s6/rc/init\n\n# Configure inittab to use s6\necho '::sysinit:/etc/s6/rc/init' &gt;&gt; /etc/inittab\necho '::shutdown:/etc/s6/rc/init' &gt;&gt; /etc/inittab\n</code></pre><h3>Create s6-rc Service Definitions</h3><pre><code class=\"bash\"># Create s6-rc source directory structure\nmkdir -p /etc/s6-rc/source/networking\nmkdir -p /etc/s6-rc/source/dbus\nmkdir -p /etc/s6-rc/source/wpa&#95;supplicant\nmkdir -p /etc/s6-rc/source/acpid\n\n# Create networking service definition\ncat &gt; /etc/s6-rc/source/networking/up &lt;&lt; 'EOF'\n#!/bin/sh\n# Bring up networking interfaces\nsetup-interfaces\nEOF\n\n# Create networking service type\ncat &gt; /etc/s6-rc/source/networking/type &lt;&lt; 'EOF'\noneshot\nEOF\n\n# Create dbus service definition\ncat &gt; /etc/s6-rc/source/dbus/up &lt;&lt; 'EOF'\n#!/bin/sh\nexec dbus-daemon --system\nEOF\n\n# Create dbus service type\ncat &gt; /etc/s6-rc/source/dbus/type &lt;&lt; 'EOF'\nlongrun\nEOF\n\n# Make scripts executable\nchmod +x /etc/s6-rc/source/networking/up\nchmod +x /etc/s6-rc/source/dbus/up\n\n# Compile s6-rc services\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\n</code></pre><h3>s6 Package Verification Commands</h3><pre><code class=\"bash\"># List all s6-related packages\napk search s6\n\n# Show s6 package information\napk info --depends s6 s6-rc s6-linux-init\n\n# Verify s6 binaries use musl libc\nscanelf -n /usr/bin/s6&#42; /usr/sbin/s6&#42; 2&gt;/dev/null | grep musl\n</code></pre><h2>Wayland Foundation</h2><h3>Install Wayland Dependencies</h3><pre><code class=\"bash\"># Install Wayland foundation and dependencies\napk add --no-cache \\\n  wayland wayland-dev wayland-protocols \\\n  wayland-libs-client wayland-libs-cursor \\\n  wayland-libs-egl wayland-libs-server \\\n  pkgconf libffi \\\n  seatd \\\n  pipewire pipewire-alsa wireplumber pamixer \\\n  firefox \\\n  ttf-dejavu ttf-noto ttf-noto-emoji \\\n  dbus\n</code></pre><h3>Wayland Development Dependencies Explained</h3><ul><li><strong>pkgconf</strong> - Package configuration tool (replaces pkg-config)</li><li><strong>libffi</strong> - Foreign Function Interface library</li><li><strong>wayland-protocols</strong> - Standard Wayland protocols</li><li><strong>seatd</strong> - Seat management daemon (Wayland requirement)</li><li><strong>pipewire</strong> - Modern audio/video framework</li></ul><h3>Verify Wayland Installation</h3><pre><code class=\"bash\"># Check Wayland libraries\npkg-config --list-all | grep wayland\n\n# Verify musl libc usage\nscanelf -n /usr/bin/pkgconf /usr/lib/libffi.so 2&gt;/dev/null | grep musl\n\n# Test Wayland protocol support\nls /usr/share/wayland-protocols/\n</code></pre><h2>Sway Compositor</h2><h3>Install Sway and Dependencies</h3><pre><code class=\"bash\"># Install Sway and Wayland applications\napk add --no-cache \\\n  sway \\\n  foot \\\n  waybar \\\n  mako \\\n  wofi \\\n  grim slurp \\\n  wl-clipboard \\\n  alacritty\n</code></pre><h3>Configure Sway</h3><pre><code class=\"bash\"># Create Sway configuration directory\nmkdir -p /home/xy/.config/sway\n\n# Create basic Sway config\ncat &gt; /home/xy/.config/sway/config &lt;&lt; 'EOF'\n# Sway configuration for Framework Laptop\n# Key bindings\nset $mod Mod4\nbindsym $mod+Return exec foot\nbindsym $mod+d exec wofi --show drun\nbindsym $mod+Shift+q kill\n\n# Window management\nbindsym $mod+Left focus left\nbindsym $mod+Right focus right\nbindsym $mod+Up focus up\nbindsym $mod+Down focus down\n\n# Workspace switching\nbindsym $mod+1 workspace 1\nbindsym $mod+2 workspace 2\nbindsym $mod+3 workspace 3\n\n# Output configuration\noutput &#42; bg #000000 solid&#95;color\n\n# Status bar\nbar {\n    swaybar&#95;command waybar\n}\nEOF\n\n# Set proper ownership\nchown -R xy:xy /home/xy/.config\n</code></pre><h3>Start Sway</h3><pre><code class=\"bash\"># Switch to xy user\nsu - xy\n\n# Start Sway &#40;from console&#41;\nsway\n\n# Or start from X11 session\nsway --my-next-gpu-wont-be-nvidia\n</code></pre><h2>Package Verification</h2><h3>Alpine musl libc Purity Verification</h3><pre><code class=\"bash\"># Quick purity check\nscanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep -q glibc &amp;&amp; echo &quot;❌ CONTAMINATED&quot; || echo &quot;✅ MUSL PURE&quot;\n\n# Comprehensive purity check with count\nscanelf -n /usr/bin/&#42; /usr/sbin/&#42; /usr/lib/&#42; /lib/&#42; 2&gt;/dev/null | awk '/glibc|ld-linux/ {print &quot;❌ GLIBC:&quot;, $0; exit 1} /musl/ {count++} END {if &#40;count &gt; 0&#41; print &quot;✅ MUSL PURE: Found&quot;, count, &quot;musl binaries&quot;}'\n\n# Verify specific packages\nscanelf -n /usr/bin/pkgconf /usr/lib/libffi.so 2&gt;/dev/null | grep -o 'ld-musl-x86&#95;64.so.1' | wc -l | xargs -I {} &#91; {} -eq 2 &#93; &amp;&amp; echo &quot;✅ pkgconf &amp; libffi are musl-pure&quot; || echo &quot;❌ Not pure&quot;\n</code></pre><h3>Community Repository musl libc Packages</h3><pre><code class=\"bash\"># Verify community repository packages use musl libc\nscanelf -n /usr/bin/sudo /usr/sbin/wpa&#95;supplicant /usr/sbin/acpid /usr/sbin/cpufreq-set /usr/sbin/iwconfig 2&gt;/dev/null | grep musl\n\n# Check package information\napk info --depends wireless-tools acpid wpa&#95;supplicant sudo cpufrequtils\n\n# Verify all community packages maintain musl purity\necho &quot;✅ Community Repository musl libc packages:&quot;\necho &quot;  - wireless-tools &#40;iwconfig, iwlist, iwspy&#41;&quot;\necho &quot;  - acpid &#40;Advanced Configuration and Power Interface daemon&#41;&quot;\necho &quot;  - wpa&#95;supplicant &#40;WiFi connection manager&#41;&quot;\necho &quot;  - sudo &#40;superuser do command&#41;&quot;\necho &quot;  - cpufrequtils &#40;CPU frequency scaling utilities&#41;&quot;\n</code></pre><h3>s6 Package Verification</h3><pre><code class=\"bash\"># List all s6 packages\napk search s6\n\n# Show s6 package dependencies\napk info --depends s6 s6-rc s6-linux-init\n\n# Verify s6 uses musl libc\nscanelf -n /usr/bin/s6&#42; /usr/sbin/s6&#42; 2&gt;/dev/null | grep musl\n</code></pre><h3>Wayland Package Verification</h3><pre><code class=\"bash\"># Check Wayland libraries\npkg-config --list-all | grep wayland\n\n# Verify Wayland protocol support\nls /usr/share/wayland-protocols/\n\n# Check if compositors are available\napk search sway\napk search wlroots\napk search weston\n</code></pre><h2>Troubleshooting</h2><h3>Common Issues and Solutions</h3><p><strong>Issue: s6-linux-init-maker fails with \"No such file or directory\"</strong><pre><code class=\"bash\"># Create s6 directory structure first\nmkdir -p /etc/s6/rc/init\nmkdir -p /etc/s6/services\nmkdir -p /etc/s6-rc/source\nmkdir -p /etc/s6-rc/compiled\n\n# Then run s6-linux-init-maker\ns6-linux-init-maker -1 /etc/s6/rc/init\n</code></pre></p><p><strong>Issue: s6-rc-compile fails with \"unable to open /etc/s6-rc/source/networking/up: No such file or directory\"</strong><pre><code class=\"bash\"># Create s6-rc service definitions first\nmkdir -p /etc/s6-rc/source/networking\nmkdir -p /etc/s6-rc/source/dbus\n\n# Create networking service\ncat &gt; /etc/s6-rc/source/networking/up &lt;&lt; 'EOF'\n#!/bin/sh\nsetup-interfaces\nEOF\necho 'oneshot' &gt; /etc/s6-rc/source/networking/type\n\n# Create dbus service\ncat &gt; /etc/s6-rc/source/dbus/up &lt;&lt; 'EOF'\n#!/bin/sh\nexec dbus-daemon --system\nEOF\necho 'longrun' &gt; /etc/s6-rc/source/dbus/type\n\n# Make scripts executable\nchmod +x /etc/s6-rc/source/networking/up\nchmod +x /etc/s6-rc/source/dbus/up\n\n# Now compile s6-rc services\ns6-rc-compile /etc/s6-rc/compiled /etc/s6-rc/source\n</code></pre></p><p><strong>CRITICAL: s6 Init System Boot Failure Recovery</strong><pre><code class=\"bash\"># If you get stuck with:\n# &quot;can't run '/etc/s6/init-stage1': No such file or directory&quot;\n# &quot;can't run '/etc/s6/init/init-stage2': No such file or directory&quot;\n\n# 1. Boot from Alpine ISO USB to rescue your system\n# 2. Mount your root filesystem\nmkdir -p /mnt/alpine\nmount /dev/nvme0n1p2 /mnt/alpine  # Adjust partition as needed\n\n# 3. Chroot into your system\nchroot /mnt/alpine /bin/sh\n\n# 4. Check what went wrong\nls -la /etc/s6/\nls -la /etc/s6/init/\ncat /etc/inittab\n\n# 5. Fix the s6 init system\n# Option A: Remove s6 and go back to OpenRC &#40;RECOMMENDED&#41;\nrm -f /etc/s6/rc/init\nrm -rf /etc/s6-rc/\n# Restore original inittab\ncp /etc/inittab.bak /etc/inittab  # if you backed it up\n\n# Option B: Properly create s6 init system\nmkdir -p /etc/s6/rc/init\nmkdir -p /etc/s6-rc/source\nmkdir -p /etc/s6-rc/compiled\ns6-linux-init-maker -1 /etc/s6/rc/init\n\n# 6. Exit chroot and reboot\nexit\numount /mnt/alpine\nreboot\n</code></pre></p><p><strong>Issue: \"no such package\" for sudo</strong><pre><code class=\"bash\"># TROUBLESHOOTING: sudo package not found\n# 1. Check if community repository is enabled:\ncat /etc/apk/repositories | grep community\n\n# 2. If not found, enable community repository:\necho 'http://dl-cdn.alpinelinux.org/alpine/v3.22/community' &gt;&gt; /etc/apk/repositories\n\n# 3. Update package index:\napk update\n\n# 4. Verify sudo is available:\napk search sudo\n\n# 5. Install sudo:\napk add sudo\n\n# 6. Verify installation:\nwhich sudo\nsudo --version\n\n# 7. Test sudo access:\nsu - xy\nsudo ls /root\n</code></pre></p><p><strong>Issue: Wayland compositors not found</strong><pre><code class=\"bash\"># Check available compositors\napk search sway\napk search wlroots\napk search weston\n\n# Install from community repository\necho 'http://dl-cdn.alpinelinux.org/alpine/v3.22/community' &gt;&gt; /etc/apk/repositories\napk update\napk add sway foot waybar mako\n</code></pre></p><h2>Cursor IDE Integration</h2><h3>The musl libc Compatibility Challenge</h3><p><strong>CRITICAL</strong>: Cursor IDE is Electron-based and requires <strong>glibc libraries</strong>. This creates a philosophical tension with Alpine's musl libc purity. However, there are several viable approaches:</p><h4>Option 1: Flatpak Installation (RECOMMENDED)</h4><p><strong>✅ Maintains System Purity</strong> - Cursor runs in isolated container</p><pre><code class=\"bash\"># Install Flatpak support\napk add --no-cache flatpak\n\n# Enable Flathub repository\nflatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo\n\n# Search for Cursor &#40;may not be available yet&#41;\nflatpak search cursor\n\n# Alternative: Install VS Code via Flatpak as reference\nflatpak install flathub com.visualstudio.code\n</code></pre><h4>Option 2: AppImage with gcompat</h4><p><strong>⚠️ Breaks Purity</strong> - Installs glibc compatibility layer</p><pre><code class=\"bash\"># Install gcompat compatibility layer\napk add --no-cache gcompat libgcc libstdc++\n\n# Download Cursor AppImage\nwget -O /opt/cursor.AppImage &quot;https://downloader.cursor.sh/linux/appImage/x64&quot;\nchmod +x /opt/cursor.AppImage\n\n# Test Cursor with gcompat\ngcompat /opt/cursor.AppImage\n\n# Create wrapper script for Wayland\ncat &gt; /usr/local/bin/cursor &lt;&lt; 'EOF'\n#!/bin/sh\nexport ELECTRON&#95;OZONE&#95;PLATFORM&#95;HINT=wayland\nexport WAYLAND&#95;DISPLAY=&quot;${WAYLAND&#95;DISPLAY:-wayland-0}&quot;\ngcompat /opt/cursor.AppImage &quot;$@&quot; &gt; /dev/null 2&gt;&amp;1 &amp;\nEOF\nchmod +x /usr/local/bin/cursor\n</code></pre><h4>Option 3: Docker/Podman Container</h4><p><strong>✅ Maintains System Purity</strong> - Complete isolation</p><pre><code class=\"bash\"># Install Podman &#40;rootless containers&#41;\napk add --no-cache podman\n\n# Create Cursor container with X11/Wayland forwarding\npodman run -it --rm \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix:ro \\\n  -v &quot;$HOME:/workspace&quot; \\\n  -e DISPLAY=$DISPLAY \\\n  ubuntu:22.04 bash\n\n# Inside container: Install Cursor\napt update &amp;&amp; apt install -y wget libgtk-3-0 libgconf-2-4\nwget -O cursor.AppImage &quot;https://downloader.cursor.sh/linux/appImage/x64&quot;\nchmod +x cursor.AppImage &amp;&amp; ./cursor.AppImage\n</code></pre><h4>Option 4: Chroot Environment</h4><p><strong>⚠️ Complex Setup</strong> - Requires glibc chroot</p><pre><code class=\"bash\"># Install debootstrap\napk add --no-cache debootstrap\n\n# Create Ubuntu chroot\nmkdir -p /opt/ubuntu-chroot\ndebootstrap jammy /opt/ubuntu-chroot http://archive.ubuntu.com/ubuntu/\n\n# Mount necessary filesystems\nmount --bind /dev /opt/ubuntu-chroot/dev\nmount --bind /proc /opt/ubuntu-chroot/proc\nmount --bind /sys /opt/ubuntu-chroot/sys\nmount --bind /home /opt/ubuntu-chroot/home\n\n# Enter chroot and install Cursor\nchroot /opt/ubuntu-chroot /bin/bash\napt update &amp;&amp; apt install -y wget\nwget -O /usr/local/bin/cursor.AppImage &quot;https://downloader.cursor.sh/linux/appImage/x64&quot;\nchmod +x /usr/local/bin/cursor.AppImage\n</code></pre><h3>Wayland Integration</h3><h4>Environment Variables for Electron/Cursor</h4><pre><code class=\"bash\"># Add to &#126;/.profile or /etc/environment\nexport ELECTRON&#95;OZONE&#95;PLATFORM&#95;HINT=wayland\nexport ELECTRON&#95;ENABLE&#95;WAYLAND=1\nexport WAYLAND&#95;DISPLAY=&quot;${WAYLAND&#95;DISPLAY:-wayland-0}&quot;\nexport XDG&#95;SESSION&#95;TYPE=wayland\nexport QT&#95;QPA&#95;PLATFORM=wayland\nexport GDK&#95;BACKEND=wayland\nexport MOZ&#95;ENABLE&#95;WAYLAND=1\n</code></pre><h4>Sway Configuration for Cursor</h4><pre><code class=\"bash\"># Add to &#126;/.config/sway/config\n# Cursor IDE window rules\nfor&#95;window &#91;app&#95;id=&quot;cursor&quot;&#93; floating enable\nfor&#95;window &#91;app&#95;id=&quot;cursor&quot;&#93; border pixel 2\nfor&#95;window &#91;app&#95;id=&quot;electron&quot;&#93; floating enable\n\n# Keyboard shortcuts\nbindsym $mod+c exec cursor\nbindsym $mod+Shift+c exec cursor --no-sandbox\n</code></pre><h3>Development Environment Alternatives</h3><h4>Native Alpine Development Stack</h4><p><strong>✅ Pure musl libc</strong> - Lightweight, fast</p><pre><code class=\"bash\"># Install development tools\napk add --no-cache \\\n  neovim \\\n  tmux \\\n  git \\\n  nodejs npm \\\n  python3 py3-pip \\\n  rust cargo \\\n  go \\\n  clang llvm \\\n  make cmake\n\n# Install language servers for vim/neovim\nnpm install -g typescript-language-server\nnpm install -g vscode-langservers-extracted\npip3 install python-lsp-server\n</code></pre><h4>Code-server (VS Code in Browser)</h4><p><strong>✅ Maintains Purity</strong> - Web-based development</p><pre><code class=\"bash\"># Install code-server\napk add --no-cache code-server\n\n# Configure code-server\nmkdir -p &#126;/.config/code-server\ncat &gt; &#126;/.config/code-server/config.yaml &lt;&lt; 'EOF'\nbind-addr: 127.0.0.1:8080\nauth: password\npassword: your-secure-password\ncert: false\nEOF\n\n# Start code-server\ncode-server --bind-addr 0.0.0.0:8080\n</code></pre><h3>Package Verification Commands</h3><h4>Check gcompat Installation Impact</h4><pre><code class=\"bash\"># Before installing gcompat - baseline purity\nscanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep -q glibc &amp;&amp; echo &quot;❌ CONTAMINATED&quot; || echo &quot;✅ MUSL PURE&quot;\n\n# After installing gcompat - verify impact\napk add gcompat libgcc libstdc++\nscanelf -n /usr/lib/libgcompat.so /usr/lib/libgcc&#95;s.so 2&gt;/dev/null | grep -o 'ld-musl-x86&#95;64.so.1'\n\n# Verify gcompat provides glibc compatibility without contamination\nldd /usr/lib/libgcompat.so | grep -q musl &amp;&amp; echo &quot;✅ gcompat uses musl&quot; || echo &quot;❌ gcompat contaminated&quot;\n</code></pre><h4>Monitor System Purity</h4><pre><code class=\"bash\"># Continuous purity monitoring script\ncat &gt; /usr/local/bin/check-musl-purity &lt;&lt; 'EOF'\n#!/bin/sh\necho &quot;🔍 Alpine Linux musl libc Purity Check&quot;\necho &quot;======================================&quot;\n\n# Count musl vs glibc binaries\nMUSL&#95;COUNT=$&#40;scanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep -c musl&#41;\nGLIBC&#95;COUNT=$&#40;scanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep -c glibc&#41;\n\necho &quot;✅ musl binaries: $MUSL&#95;COUNT&quot;\necho &quot;⚠️  glibc binaries: $GLIBC&#95;COUNT&quot;\n\nif &#91; &quot;$GLIBC&#95;COUNT&quot; -eq 0 &#93;; then\n    echo &quot;🎉 SYSTEM IS MUSL PURE!&quot;\nelse\n    echo &quot;❌ SYSTEM CONTAMINATED - glibc detected&quot;\n    echo &quot;Contaminated binaries:&quot;\n    scanelf -n /usr/bin/&#42; /usr/sbin/&#42; 2&gt;/dev/null | grep glibc\nfi\nEOF\nchmod +x /usr/local/bin/check-musl-purity\n</code></pre><h3>Performance Considerations</h3><h4>Framework Laptop 16 Optimizations</h4><pre><code class=\"bash\"># CPU frequency scaling for development workloads\necho 'schedutil' &gt; /sys/devices/system/cpu/cpu&#42;/cpufreq/scaling&#95;governor\n\n# AMD GPU optimization for Electron apps\nexport RADV&#95;PERFTEST=aco\nexport AMD&#95;VULKAN&#95;ICD=RADV\n\n# Memory optimization for Electron\nexport ELECTRON&#95;NO&#95;ATTACH&#95;CONSOLE=1\nexport ELECTRON&#95;DISABLE&#95;GPU&#95;SANDBOX=1\n</code></pre><h4>Battery Life with Cursor IDE</h4><pre><code class=\"bash\"># Install power management\napk add --no-cache powertop tlp\n\n# Configure aggressive power saving\ntlp start\n\n# Monitor Cursor power usage\npowertop --auto-tune\n</code></pre><h3>Security Considerations</h3><h4>Sandboxing Electron Applications</h4><pre><code class=\"bash\"># Run Cursor with restricted permissions\nfirejail --noprofile --net=none --private-tmp cursor\n\n# Or use bubblewrap for fine-grained sandboxing\napk add bubblewrap\nbwrap --dev-bind / / --tmpfs /tmp cursor\n</code></pre><h3>Troubleshooting Common Issues</h3><h4>Issue: AppImage won't run - \"No such file or directory\"</h4><pre><code class=\"bash\"># Install AppImage runtime dependencies\napk add --no-cache libgcc libstdc++ gcompat\n\n# Check AppImage dependencies\nobjdump -p cursor.AppImage | grep NEEDED\n\n# Test with gcompat\ngcompat ./cursor.AppImage --version\n</code></pre><h4>Issue: Wayland integration problems</h4><pre><code class=\"bash\"># Force Wayland mode\ncursor --enable-features=UseOzonePlatform --ozone-platform=wayland\n\n# Check Wayland session\necho $XDG&#95;SESSION&#95;TYPE  # Should be &quot;wayland&quot;\necho $WAYLAND&#95;DISPLAY   # Should be &quot;wayland-0&quot;\n\n# Debug Wayland compositor\nexport WAYLAND&#95;DEBUG=1\ncursor\n</code></pre><h4>Issue: Font rendering problems</h4><pre><code class=\"bash\"># Install additional fonts\napk add --no-cache \\\n  ttf-dejavu \\\n  ttf-liberation \\\n  ttf-noto \\\n  ttf-noto-emoji \\\n  fontconfig\n\n# Rebuild font cache\nfc-cache -fv\n</code></pre><h3>Recommendation Summary</h3><p><strong>For Production Use:</strong></p><ol><li><strong>Flatpak</strong> (when available) - Maintains system purity</li><li><strong>Code-server</strong> - Web-based VS Code experience</li><li><strong>Native vim/neovim</strong> with LSP - Ultimate purity</li></ol><p><strong>For Development/Testing:</strong></p><ol><li><strong>AppImage + gcompat</strong> - Quick setup, breaks purity</li><li><strong>Container</strong> - Good isolation, more complex</li><li><strong>Chroot</strong> - Full compatibility, highest complexity</li></ol><p><strong>Philosophy Assessment:</strong></p><ul><li><strong>✅ Pure</strong>: Flatpak, containers, native alternatives</li><li><strong>⚠️ Acceptable</strong>: gcompat (minimal glibc compatibility)</li><li><strong>❌ Contamination</strong>: Direct glibc installation</li></ul><h2>Advanced Topics</h2><h3>Xen Hypervisor Integration</h3><p><strong>Question: Should we install Xen?</strong></p><p><strong>Answer: Yes, if you need virtualization!</strong> Xen uses musl libc and integrates well with Alpine:</p><pre><code class=\"bash\"># Install Xen hypervisor\napk add xen xen-hypervisor\n\n# Verify Xen uses musl libc\nscanelf -n /usr/bin/xen&#42; /usr/sbin/xen&#42; 2&gt;/dev/null | grep musl\n\n# Check Xen package information\napk info --depends xen\napk info --provides xen\n</code></pre><p><strong>Benefits of Xen on Alpine:</strong></p><ul><li>✅ <strong>musl libc native</strong> - No compatibility issues</li><li>✅ <strong>Lightweight</strong> - Minimal resource overhead</li><li>✅ <strong>Production ready</strong> - Used in enterprise environments</li><li>✅ <strong>Framework compatible</strong> - Works well with AMD hardware</li></ul><h3>Container Integration</h3><pre><code class=\"bash\"># Install container tools\napk add docker docker-compose\n\n# Install podman &#40;rootless containers&#41;\napk add podman\n\n# Verify container tools use musl libc\nscanelf -n /usr/bin/docker /usr/bin/podman 2&gt;/dev/null | grep musl\n</code></pre><h3>Development Environment</h3><pre><code class=\"bash\"># Install development tools\napk add --no-cache \\\n  gcc musl-dev \\\n  clang llvm \\\n  make cmake \\\n  git \\\n  vim nano \\\n  curl wget xz\n\n# Verify development tools\napk info --depends gcc musl-dev clang\n</code></pre><h2>Key Concepts Summary</h2><h3>The Rhizome System Stack</h3><ul><li>✅ <strong>Alpine Linux</strong> - Lightweight, security-focused base</li><li>✅ <strong>musl libc</strong> - Clean, auditable C library</li><li>✅ <strong>s6</strong> - Process supervision and service management</li><li>✅ <strong>Sway</strong> - Wayland compositor for modern desktop</li><li>✅ <strong>Framework Hardware</strong> - Optimized for AMD Ryzen + Radeon</li></ul><h3>Package Management Philosophy</h3><ul><li>✅ <strong>musl libc purity</strong> - All packages use musl libc</li><li>✅ <strong>Community repository</strong> - Required for many packages</li><li>✅ <strong>Verification commands</strong> - Ensure system integrity</li><li>✅ <strong>Troubleshooting guides</strong> - Common issues and solutions</li></ul><h3>Next Steps</h3><ul><li><strong>Performance Tuning</strong> - CPU scaling, power management</li><li><strong>Security Hardening</strong> - Firewall, user permissions</li><li><strong>Development Setup</strong> - Programming languages, tools</li><li><strong>Backup Strategy</strong> - System backup and recovery<h2></h2></li></ul><h2></h2><h2>Navigation</h2><p><strong>Previous</strong>: <a href='9303-framework-alpine-sway-part1-installation.md'>9303. Framework Laptop Alpine Linux Installation Guide - Part 1: Foundation Setup</a></p><p><strong>Next</strong>: <a href='9305-framework-alpine-performance-part3-optimization.md'>9305. Framework Laptop Alpine Linux Performance Tuning - Part 3: Optimization</a></p><p><strong>Related</strong>: </p><ul><li><a href='7002-therhizomesys.md'>7002. The Rhizome System</a> - Complete rhizome system documentation</li><li><a href='9300-alpine-kubernetes-nix-implementation.md'>9300. Alpine Kubernetes Nix Implementation</a> - Kubernetes on Alpine</li><li><a href='9302-urbana-rhizome-herbal-bar-blueprint.md'>9302. The Urbana Rhizome</a> - Urbana co-op blueprint</li></ul><p><strong>Series Navigation</strong>:</p><ul><li><a href='9303-framework-alpine-sway-part1-installation.md'>9303 Part 1: Installation</a> ← <strong>You are here</strong></li><li><a href='9304-framework-alpine-sway-part2-advanced.md'>9304 Part 2: Advanced Configuration</a> ← <strong>You are here</strong></li><li><a href='9305-framework-alpine-performance-part3-optimization.md'>9305 Part 3: Performance Tuning</a><h2></h2></li></ul><h2>Key Concepts Cross-Reference</h2><h4>#musl-libc-purity</h4><blockquote><p> <strong>Definition</strong>: Alpine Linux's use of musl libc ensures all packages maintain consistent, minimal C library dependencies without glibc contamination. </p></blockquote><h4>#s6-supervision</h4><blockquote><p> <strong>Definition</strong>: s6 is a process supervision suite that provides automatic service restart, dependency management, and musl libc native process control. </p></blockquote><h4>#sway-wayland</h4><blockquote><p> <strong>Definition</strong>: Sway is a Wayland compositor that provides keyboard-driven, configuration-as-code desktop environment optimized for developers. </p></blockquote><h4>#framework-hardware</h4><blockquote><p> <strong>Definition</strong>: Framework Laptop 16 with AMD Ryzen 7 7840HS and Radeon 780M Graphics, optimized for Alpine Linux with specific firmware requirements. </p></blockquote><h4>#alpine-package-management</h4><blockquote><p> <strong>Definition</strong>: Alpine's apk package manager with community repository requirements for packages like sudo, sway, and development tools. </p></blockquote>",
  "hash" : "2025-10-22T10:21:16.800527416Z-21712"
}