{
  "slug" : "9510-unix-philosophy-primer",
  "meta" : {
    "slug" : "9510-unix-philosophy-primer",
    "title" : "kae3g 9510: Unix Philosophy Primer - Do One Thing Well",
    "filename" : "9510-unix-philosophy-primer.md",
    "source-dir" : "hidden"
  },
  "html" : "<h1>kae3g 9510: Unix Philosophy Primer - Do One Thing Well</h1><p><strong>Phase 1: Foundations & Philosophy</strong> | <strong>Week 2</strong> | <strong>Reading Time: 8 minutes</strong><h2></h2></p><h2>What You'll Learn</h2><ul><li>The Unix philosophy in 3 principles (quick!)</li><li>Why small, focused tools win</li><li>Composition via pipes</li><li>Text as universal interface</li><li>Modern applications (Kubernetes, microservices)</li><li><strong>Fast track to Essay 9511</strong> (Kubernetes!)<h2></h2></li></ul><h2>Prerequisites</h2><ul><li><strong><a href='/12025-10/9500-what-is-a-computer'>9500: What Is a Computer?</a></strong> - Computing foundations</li><li><strong><a href='/12025-10/9504-what-is-clojure'>9504: What Is Clojure?</a></strong> - Simplicity philosophy<h2></h2></li></ul><h2>The Philosophy in One Sentence</h2><blockquote><p> <strong>\"Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.\"</strong> <br /> — Doug McIlroy, Bell Labs (1978) </p></blockquote><p><strong>That's it.</strong> Three principles that shaped 50+ years of computing.<h2></h2></p><h2>Principle 1: Do One Thing Well</h2><h3>The Unix Way</h3><p><strong>Instead of monolithic programs</strong>:</p><ul><li><code>cat</code> - concatenate files (one job)</li><li><code>grep</code> - search text (one job)</li><li><code>sort</code> - sort lines (one job)</li><li><code>uniq</code> - remove duplicates (one job)</li></ul><p><strong>Each is tiny</strong> (100-500 lines of C).</p><p><strong>But composed</strong>:<pre><code class=\"bash\"># Find the 10 most common words\ncat file.txt | tr ' ' '\\n' | sort | uniq -c | sort -rn | head -10\n</code></pre></p><p><strong>Six tiny programs</strong> solving a complex problem.<h2></h2></p><h2>Principle 2: Composition via Pipes</h2><p><strong>Small tools become powerful when connected</strong>:</p><pre><code class=\"bash\">command1 | command2 | command3\n</code></pre><p><strong>Example</strong>:<pre><code class=\"bash\"># Count files in directory\nls | wc -l\n</code></pre></p><p><strong>The magic</strong>: <code>ls</code> and <code>wc</code> don't know about each other. They just:</p><ul><li>Read from <strong>stdin</strong></li><li>Write to <strong>stdout</strong></li><li>Report errors to <strong>stderr</strong></li></ul><p><strong>Universal interface</strong>: Text streams.<h2></h2></p><h2>Principle 3: Text as Universal Interface</h2><p><strong>Why text?</strong></p><ol><li><strong>Human-readable</strong> (you can read/edit/debug it)</li><li><strong>Platform-independent</strong> (same on Linux, macOS, Windows)</li><li><strong>Grep-able, sed-able, awk-able</strong> (process with standard tools)</li></ol><p><strong>Example</strong>:<pre><code class=\"bash\"># Search logs\ngrep &quot;ERROR&quot; app.log\n\n# Replace text\nsed 's/foo/bar/g' file.txt\n\n# Extract columns\nawk '{print $1, $3}' data.txt\n</code></pre></p><p><strong>If output is text</strong>, you can manipulate it.<h2></h2></p><h2>Why This Still Matters (2025!)</h2><h3>Kubernetes = Unix at Scale</h3><p><strong>Old Unix</strong>:<pre><code class=\"bash\">grep | sort | uniq  # Separate processes, pipes\n</code></pre></p><p><strong>Kubernetes</strong>:</p><pre><code>Pods → Services → Deployments  # Separate resources, composed\n</code></pre><p><strong>Same principle</strong>: Small components, composed via standard interfaces.</p><p><strong>(Dive deeper in Essay 9511!)</strong></p><h3>Microservices</h3><p><strong>Unix thinking</strong> applied to distributed systems:</p><ul><li>Each service does one thing</li><li>Services communicate via standard protocols (HTTP/gRPC)</li><li>Independent deployment, isolated failures</li></ul><h3>Containers</h3><p><strong>Unix process isolation</strong> perfected:</p><ul><li>Each container = isolated app</li><li>Standard interface (OCI spec)</li><li>Composable (orchestration)<h2></h2></li></ul><h2>Quick Examples</h2><h3>Example 1: Log Analysis</h3><p><strong>Find top 10 IP addresses</strong>:</p><pre><code class=\"bash\">cat access.log | awk '{print $1}' | sort | uniq -c | sort -rn | head -10\n</code></pre><p><strong>5 tools, one line.</strong></p><h3>Example 2: Git Stats</h3><p><strong>Who commits most?</strong></p><pre><code class=\"bash\">git log --format='%an' | sort | uniq -c | sort -rn | head -10\n</code></pre><p><strong>One line. Deep insight.</strong><h2></h2></p><h2>The Key Tools</h2><p><strong>Text Processing</strong>:</p><ul><li><code>grep</code> - search patterns</li><li><code>sed</code> - search & replace</li><li><code>awk</code> - extract columns, compute</li></ul><p><strong>File Operations</strong>:</p><ul><li><code>cat</code> - concatenate/display</li><li><code>head</code>/<code>tail</code> - first/last lines</li><li><code>sort</code> - sort lines</li><li><code>uniq</code> - remove duplicates</li></ul><p><strong>Composition</strong>:</p><ul><li><code>|</code> - pipe (connect outputs)</li><li><code>&gt;</code> - redirect to file</li><li><code>&lt;</code> - read from file</li></ul><p><strong>(Deep dive: Essays 9550, 9601, 9602)</strong><h2></h2></p><h2>Summary</h2><p><strong>Unix Philosophy</strong>:</p><ol><li><strong>Do one thing well</strong> (focused tools)</li><li><strong>Compose via pipes</strong> (connect tools)</li><li><strong>Text interface</strong> (universal format)</li></ol><p><strong>Why it matters</strong>:</p><ul><li>Still dominates (Linux, macOS, containers)</li><li>Scales to clouds (Kubernetes!)</li><li>Applies to hardware (Framework laptops!)</li><li>Will outlast us (Nock verified!)</li></ul><p><strong>Modern echoes</strong>:</p><ul><li>Microservices (Unix at network scale)</li><li>Kubernetes (Unix in cloud orchestration)</li><li>Containers (Unix isolation perfected)</li></ul><p><strong>In the Valley</strong>:</p><ul><li>We build on Unix principles</li><li>We scale them (Kubernetes - Essay 9511!)</li><li>We verify them (seL4 - Essay 9512!)</li><li>We own them (Framework - Essay 9513!)<h2></h2></li></ul><p><strong>Next</strong>: <strong>Essay 9511 - Kubernetes!</strong> Now that you understand Unix philosophy, see how it powers modern cloud orchestration!<h2></h2></p><p><strong>Navigation</strong>:<br /> ← Previous: <a href='/12025-10/9507-helen-atthowe-ecological-systems'>9507 (helen atthowe ecological systems)</a> | <strong>Phase 1 Index</strong> | Next: <a href='/12025-10/9511-kubernetes-cloud-orchestration'>9511 (kubernetes cloud orchestration)</a></p><p><strong>Want deeper dive?</strong> </p><ul><li><strong><a href='/12025-10/9512-unix-philosophy-deep-dive'>9512: Unix Philosophy Deep Dive</a></strong> (seL4, Nock, verification!)</li><li><strong><a href='/12025-10/9513-personal-sovereignty-framework-stack'>9513: Personal Sovereignty Stack</a></strong> (Framework, RISC-V, complete control!)</li></ul><p><strong>Metadata</strong>:</p><ul><li><strong>Phase</strong>: 1 (Foundations)</li><li><strong>Week</strong>: 2</li><li><strong>Prerequisites</strong>: 9500, 9504</li><li><strong>Concepts</strong>: Unix philosophy, composition, pipes, text streams, do one thing well</li><li><strong>Next</strong>: Kubernetes (9511), then deep dives (9512, 9513)</li><li><strong>Reading Time</strong>: 8 minutes (condensed for speed!)</li></ul><h2></h2><p><div style=\"text-align: center; opacity: 0.6; font-size: 0.85em; margin-top: 3em; padding-top: 1em; border-top: 1px solid rgba(139, 116, 94, 0.2);\"></p><p><strong>Copyright © 2025 <a href='https://codeberg.org/kae3g/12025-10/'>kae3g</a></strong> | Dual-licensed under <a href='https://www.apache.org/licenses/LICENSE-2.0'>Apache-2.0</a> / <a href='https://opensource.org/licenses/MIT'>MIT</a><br /> Competitive technology in service of clarity and beauty</p><p></div></p><p><em><a href='/12025-10/hidden-docs-index.html'>View Hidden Docs Index</a></em> | <em><a href='/12025-10/'>Return to Main Index</a></em></p>",
  "hash" : "2025-10-22T10:21:16.801527377Z-5755"
}